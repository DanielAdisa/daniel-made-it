"use client";

import React, { useState, useEffect, useRef } from "react";
import { FaBook, FaBoxOpen, FaBriefcase, FaChartLine, FaChartPie, FaHome, FaPlus, FaMinus, FaSearch, FaTimes, FaDollarSign, 
  FaChevronDown, FaChevronRight, FaChevronLeft, FaDownload, FaUpload, FaSync, FaSave, FaUser, FaUsers, FaUserPlus, FaEye, FaPrint, 
  FaInfoCircle, FaFileExcel, FaStore, FaMapMarkerAlt, FaPhone, FaEnvelope, FaEdit, FaTrash, FaCheck, FaLock, 
  FaArrowUp, FaArrowDown, FaCalendarAlt, FaPaperclip, FaFileInvoice, FaBox, FaTag, FaUtensils, FaCar, FaFilm, 
  FaMedkit, FaShoppingBag, FaFileInvoiceDollar, FaTags, FaShare, FaFileAlt, FaShoppingCart, FaExclamationTriangle,
  FaMoneyBillWave, FaCheckCircle, FaClock, FaFilter, FaSortAmountDown, FaMoneyCheckAlt, FaCalendarCheck ,FaArrowRight,FaExternalLinkAlt,FaCalendarDay,
  FaAddressCard,FaEquals,FaSpinner,FaMoneyBill,FaPen,FaUserTie,FaIdCard,FaStickyNote,FaAddressBook,FaSuitcase,FaFolder} from "react-icons/fa";
import { motion, AnimatePresence } from "framer-motion";
import { v4 as uuidv4 } from 'uuid'; 
import { toPng, toJpeg } from 'html-to-image';
import toast from 'react-hot-toast';
import Barcode from 'react-barcode';

// Define TypeScript interfaces for our data models
interface InventoryItem {
  id: string;
  name: string;
  category: string;
  quantity: number;
  costPrice: number;
  sellingPrice: number;
  lastRestocked: Date;
  sku: string;
}



interface Transaction {
  id: string;
  date: Date;
  description: string;
  type: "income" | "expense";
  category: string;
  amount: number;
  relatedInventoryId?: string;
  customerId?: string; // Associate transaction with customer
  relatedInvoiceId?: string; // Add this to link to invoices
  quantity?: number; // Add this field to the interface
  relatedPayrollId?: string; // Add this field to the interface
}

// Modify Receipt interface to include a linked transaction id
interface Receipt {
  id: string;
  date: Date;
  customerId: string;
  customerName: string;
  items: { id: string; name: string; quantity: number; price: number }[];
  totalAmount: number;
  transactionId?: string; // Add this to link to transactions
  type: "income" | "expense"; // Add transaction type to distinguish between income and expense receipts
  description?: string; // Add description field for expense receipts that don't have items
  isAutoGenerated?: boolean; // Flag to track if this was auto-generated from transaction
}

// Add Customer interface
interface Customer {
  id: string;
  name: string;
  email: string;
  phone: string;
  address: string;
  notes: string;
  createdAt: Date;
  totalPurchases: number;
}

// Form state interfaces
interface InventoryFormData {
  name: string;
  category: string;
  quantity: number;
  costPrice: number;
  sellingPrice: number;
  sku: string;
}

// Update TransactionFormData to include optional customer association
interface TransactionFormData {
  description: string;
  type: "income" | "expense";
  category: string;
  amount: number;
  date: string;
  relatedInventoryId?: string;
  customerId?: string; // Associate transaction with customer
  id?: string;
  quantity: number;
  relatedPayrollId?: string; // Add this field to the interface
}

// Update ReceiptFormData to include customerId selection
interface ReceiptFormData {
  date: string;
  customerId?: string;
  customerName: string;
  items: { id: string; name: string; quantity: number; price: number }[];
  totalAmount: number;
  isNewCustomer: boolean; // Track if we're creating a new customer
  newCustomerData?: {
    email: string;
    phone: string;
    address: string;
    notes: string;
  };
}

interface Employee {
  id: string;
  name: string;
  email: string;
  phone: string;
  address: string;
  position: string;
  hireDate: Date;
  department: string;
  notes: string;
}

// Add Customer form data interface
interface CustomerFormData {
  name: string;
  email: string;
  phone: string;
  address: string;
  notes: string;
}

// Add Invoice interface
interface Invoice {
  id: string;
  date: Date;
  dueDate: Date; // Add due date field
  invoiceNumber: string;
  customerId: string;
  customerName: string;
  items: { id: string; name: string; quantity: number; price: number }[];
  totalAmount: number;
  notes: string;
  paymentTerms: string; // Add payment terms field
  isPaid: boolean;  // Add this
  paidDate?: Date;  // Add this
  paidTimestamp?: string; // ISO string of when the invoice was marked as paid
}

interface Payroll {
  id: string;
  employeeId: string;
  employeeName: string;
  position: string;
  payPeriodStart: Date;
  payPeriodEnd: Date;
  baseSalary: number;
  overtime: number;
  deductions: number;
  netPay: number;
  status: 'paid' | 'pending';
  paymentDate?: Date;
  transactionId?: string; // Links to financial transactions
  employeePhone?: string; // Employee contact phone
  employeeEmail?: string; // Employee contact email
  employeeAddress?: string; // Employee physical address
}

// Add Invoice form data interface
interface InvoiceFormData {
  date: string;
  dueDate: string; // Add due date field
  invoiceNumber: string;
  customerId: string;
  customerName: string;
  items: { id: string; name: string; quantity: number; price: number }[];
  totalAmount: number;
  notes: string;
  paymentTerms: string; // Add payment terms field
  isNewCustomer: boolean; // Track if creating a new customer
  newCustomerData?: { // Add new customer data
    email: string;
    phone: string;
    address: string;
    notes: string;
  };
  isPaid: boolean; // Add this for paid status
  paidDate: string; // Add this for payment date
  paidTimestamp?: string; // ISO string of when the invoice was marked as paid
}

// Currency interface
interface Currency {
  code: string;
  symbol: string;
  name: string;
  rate?: number;
}

interface EmployeeFormData {
  name: string;
  email: string;
  phone: string;
  address: string;
  position: string;
  hireDate: string;
  department: string;
  notes: string;
}

// Update your TempBudgetCategory interface
interface TempBudgetCategory {
  name: string;
  allocated: number;
  customName?: string; // For new category name input
  color?: string; // For color selection of new category
}

// Add interface for app data
interface AppData {
  inventory: InventoryItem[];
  transactions: Transaction[];
  receipts: Receipt[];
  customers: Customer[]; // Add customers to AppData
  lastUpdated: string;
  version: string;
  selectedCurrency: string;
  selectedTheme: string; // Add this to save theme preference
  categories: Category[]; // Add categories to AppData
  businessInfo?: {
    name: string;
    type: string;
    address: string;
    phone: string;
    email: string;
    logo?: string;
    established?: string;
    baseCurrency?: string;
  }; // Add business info to AppData
  invoices: Invoice[]; // Add invoices to AppData
  budgets: Budget[]; // Add budgets to AppData
  payrolls: Payroll[]; // Add payroll to AppData
  employees: Employee[]; // Add employees to AppData
  
}

// First, let's add a Theme interface and available themes
interface Theme {
  id: string;
  name: string;
  primary: string;
  secondary: string;
  accent: string;
  background: string;
  cardBackground: string;
  text: string;
  border: string;
  buttonText: string;
  success: string;
  danger: string;
  warning: string;
}

// Add Category interface to the existing interfaces section
interface Category {
  id: string;
  name: string;
  description: string;
  type: "inventory" | "transaction" | "both"; // categorize by usage type
  color: string; // For visual distinction
}

// Add exchange rates after the Currency interface
const exchangeRates = {
  USD: 1, // Base currency
  NGN: 1515, 
  EUR: 0.92, 
  GBP: 0.78,
  GHS: 15.54,
  JPY: 151.05,
  INR: 83.42,
};

// Add conversion function
// Add conversion function
// Define a type for supported currency codes
type CurrencyCode = 'USD' | 'NGN' | 'EUR' | 'GBP' | 'GHS' | 'JPY' | 'INR';

// Interface for the exchange rates object
interface ExchangeRates {
  [key: string]: number;
}

/**
 * Converts an amount from one currency to another
 * @param amount The monetary amount to convert
 * @param fromCurrency The source currency code
 * @param toCurrency The target currency code
 * @returns The converted amount as a number
 */
const convertCurrency = (
  amount: number, 
  fromCurrency: CurrencyCode = 'USD', 
  toCurrency: CurrencyCode = 'USD'
): number => {
  // Handle same currency case
  if (fromCurrency === toCurrency) {
    return amount;
  }
  
  // Ensure both currencies are supported
  if (!exchangeRates[fromCurrency]) {
    console.error(`Unsupported source currency: ${fromCurrency}`);
    return amount;
  }
  
  if (!exchangeRates[toCurrency]) {
    console.error(`Unsupported target currency: ${toCurrency}`);
    return amount;
  }
  
  // Convert from source currency to USD first (as intermediary)
  const amountInUSD = fromCurrency === 'USD' 
    ? amount 
    : amount / exchangeRates[fromCurrency];
  
  // Then convert from USD to target currency
  const convertedAmount = toCurrency === 'USD'
    ? amountInUSD
    : amountInUSD * exchangeRates[toCurrency];
  
  // Return with 2 decimal places for clean formatting
  return parseFloat(convertedAmount.toFixed(2));
};

// Add this utility function to convert data to CSV format
const convertToCSV = (data: any[], headers: string[]): string => {
  // Create header row
  let csvContent = headers.join(',') + '\n';
  
  // Add data rows
  data.forEach(item => {
    const row = headers.map(header => {
      // Get property value from the data item
      const fieldValue = header.split('.').reduce((obj, key) => 
        obj && obj[key] !== undefined ? obj[key] : '', item);
      
      // Format date objects
      if (fieldValue instanceof Date) {
        return `"${fieldValue.toLocaleDateString()}"`;
      }
      
      // Format strings with commas or quotes
      if (typeof fieldValue === 'string' && (fieldValue.includes(',') || fieldValue.includes('"'))) {
        return `"${fieldValue.replace(/"/g, '""')}"`;
      }
      
      return fieldValue;
    });
    
    csvContent += row.join(',') + '\n';
  });
  
  return csvContent;
};



// Add this function to generate invoice numbers
const generateInvoiceNumber = (businessInfo: any) => {
  const date = new Date();
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  
  // Use business initials if available
  const businessInitials = businessInfo?.name
    ? businessInfo.name
        .split(' ')
        .map((word: string) => word[0])
        .join('')
        .toUpperCase()
        .slice(0, 3)
    : 'INV';
  
  // Random 4-digit number
  const random = Math.floor(1000 + Math.random() * 9000);
  
  return `${businessInitials}-${year}${month}-${random}`;
};

const formatDate = (dateValue: any): string => {
  if (!dateValue) return '';
  
  try {
    // If it's already a Date object
    if (dateValue instanceof Date) {
      return dateValue.toLocaleDateString();
    }
    
    // If it's a string, convert to Date first
    const date = new Date(dateValue);
    
    // Check if valid date
    if (isNaN(date.getTime())) {
      return '';
    }
    
    return date.toLocaleDateString();
  } catch (error) {
    console.error("Error formatting date:", error);
    return '';
  }
};



const formatDateForInput = (dateValue: any): string => {
  if (!dateValue) return '';
  
  try {
    // Handle Date objects
    if (dateValue instanceof Date) {
      return dateValue.toISOString().split('T')[0];
    }
    
    // Handle string dates by converting to Date first
    const date = new Date(dateValue);
    
    // Check if valid date
    if (isNaN(date.getTime())) {
      return '';
    }
    
    return date.toISOString().split('T')[0];
  } catch (error) {
    console.error("Error formatting date for form:", error);
    return '';
  }
};

interface BudgetCategory {
  id?: string;
  name: string;
  allocated: number;
  spent: number;
}

interface BudgetTransaction {
  id?: string;
  description: string;
  amount: number;
  date: string | Date;
  category: string;
  type: 'income' | 'expense';
}

interface Budget {
  id: string;
  name: string;
  period: string;
  startDate: string | Date;
  endDate: string | Date;
  targetAmount: number;
  spentAmount: number;
  categories?: BudgetCategory[];
  recentTransactions?: BudgetTransaction[];
  notes?: string;
}
// Main component
// Budget Category interface
interface BudgetCategory {
  name: string;
  allocated: number;
  spent: number;
}

// Recent Transaction interface for budget view
interface BudgetTransaction {
  id?: string;
  date: string | Date;
  description: string;
  category: string;
  amount: number;
  type: 'income' | 'expense';
}

// Main Budget interface
interface Budget {
  id: string;
  name: string;
  period: string;
  startDate: string | Date;
  endDate: string | Date;
  targetAmount: number;
  spentAmount: number;
  categories?: BudgetCategory[];
  recentTransactions?: BudgetTransaction[];
  notes?: string;
}

// Budget form data interface
interface BudgetFormData {
  name: string;
  period: string;
  startDate: string;
  endDate: string;
  targetAmount: number;
  categories: BudgetCategory[];
  notes?: string;
}

// Hook states and functions related to Budget management
interface BudgetHookReturn {
  filteredBudgets: Budget[];
  expandedBudget: string | null;
  editingBudget: Budget | null;
  budgetFormData: BudgetFormData;
  showBudgetModal: boolean;
  setExpandedBudget: (id: string | null) => void;
  setEditingBudget: (budget: Budget | null) => void;
  resetBudgetForm: () => void;
  setShowBudgetModal: (show: boolean) => void;
  handleBudgetFormChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
  saveBudget: (budget: BudgetFormData) => void;
  deleteBudget: (id: string) => void;
}

export default function BookKeepingSystem() {
  // Update the activeTab state to initialize from localStorage
  const [activeTab, setActiveTab] = useState<"dashboard" | "inventory" | "transactions" | "receipts" | "budgets" | "categories" | "customers" | "employees" | "invoices"|"payrolls">(() => {
    // Check if we're in a browser environment (to avoid issues during SSR)
    if (typeof window !== 'undefined') {
      const savedTab = localStorage.getItem('bookkeep-active-tab');
      return (savedTab as "dashboard" | "inventory" | "transactions" | "receipts" | "budgets" | "categories" | "customers" | "employees" | "invoices"| "payrolls") || "dashboard";
    }
    return "dashboard";
  });
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [searchQuery, setSearchQuery] = useState("");

  // Add effect to save activeTab to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('bookkeep-active-tab', activeTab);
  }, [activeTab]);
  const [expandedInvoice, setExpandedInvoice] = useState<string | null>(null);
  // Add business information state
  const [showBusinessOnboarding, setShowBusinessOnboarding] = useState(false);
  const [businessInfo, setBusinessInfo] = useState<{
    name: string;
    type: string;
    address: string;
    phone: string;
    email: string;
    logo?: string;
    established?: string;
    baseCurrency?: string;
  }>({
    name: "Rename Me Please",
    type: "Retail",
    address: "",
    phone: "",
    email: "",
  });

  

  const invoiceCardRef = useRef<HTMLDivElement>(null);

  const [categories, setCategories] = useState<Category[]>([
    // Some default categories to start with
    { id: "cat-1", name: "Electronics", description: "Electronic items and gadgets", type: "inventory", color: "blue-500" },
    { id: "cat-2", name: "Stationery", description: "Office supplies and stationery", type: "inventory", color: "green-500" },
    { id: "cat-3", name: "Sales", description: "Income from sales", type: "transaction", color: "emerald-500" },
    { id: "cat-4", name: "Utilities", description: "Utility bills and expenses", type: "transaction", color: "amber-500" },
    { id: "cat-5", name: "Salaries", description: "Staff salaries", type: "transaction", color: "rose-500" }
  ]);
  const [filteredCategories, setFilteredCategories] = useState<Category[]>([]);
  
  const [budgets, setBudgets] = useState<Budget[]>([]);
  const [filteredBudgets, setFilteredBudgets] = useState<Budget[]>([]);
  const [expandedBudget, setExpandedBudget] = useState<string | null>(null);
  const [editingBudget, setEditingBudget] = useState<Budget | null>(null);
  const [showBudgetModal, setShowBudgetModal] = useState(false);
  const [budgetFormData, setBudgetFormData] = useState({
    name: '',
    period: 'Monthly',
    startDate: new Date().toISOString().split('T')[0],
    endDate: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0],
    targetAmount: 0,
    categories: [] as {id: string, name: string, allocated: number}[],
    notes: ''
  });

  const [tempBudgetCategory, setTempBudgetCategory] = useState<TempBudgetCategory>({
    name: '',
    allocated: 0,
    customName: '',
    color: ''
  });

  // Format date utility function
  const formatDate = (dateString: string | Date | undefined): string => {
    if (!dateString) return 'N/A';
    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
    return date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
  };

  // Calculate dates within budget period
  const isDateInBudgetPeriod = (date: Date, budget: Budget): boolean => {
    const startDate = new Date(budget.startDate);
    const endDate = new Date(budget.endDate);
    return date >= startDate && date <= endDate;
  };

  

  // Filter budgets based on search query
  useEffect(() => {
    if (!searchQuery) {
      setFilteredBudgets(budgets);
      return;
    }
    
    const query = searchQuery.toLowerCase();
    const filtered = budgets.filter(budget => 
      budget.name.toLowerCase().includes(query) || 
      budget.period.toLowerCase().includes(query) ||
      budget.notes?.toLowerCase().includes(query) ||
      budget.categories?.some(cat => cat.name.toLowerCase().includes(query))
    );
    
    setFilteredBudgets(filtered);
    
    // Update search stats
    searchStats.budgets = filtered.length.toString();
  }, [searchQuery, budgets]);

  

  // Initialize with demo data if none exists
  useEffect(() => {
    if (budgets.length === 0) {
      // Only add sample data if we're in a clean state
      const sampleBudget: Budget = {
        id: 'budget-' + Date.now(),
        name: 'Monthly Operations',
        period: 'Monthly',
        startDate: new Date(new Date().setDate(1)).toISOString(),
        endDate: new Date(new Date().setMonth(new Date().getMonth() + 1, 0)).toISOString(),
        targetAmount: 5000,
        spentAmount: 2100,
        categories: [
          { id: 'cat1', name: 'Supplies', allocated: 2000, spent: 1200 },
          { id: 'cat2', name: 'Marketing', allocated: 1500, spent: 600 },
          { id: 'cat3', name: 'Utilities', allocated: 500, spent: 300 }
        ],
        recentTransactions: [
          {
            id: 'tr1',
            description: 'Office supplies purchase',
            amount: 450,
            date: new Date(Date.now() - 86400000 * 3).toISOString(),
            category: 'Supplies',
            type: 'expense'
          },
          {
            id: 'tr2',
            description: 'Facebook ad campaign',
            amount: 600,
            date: new Date(Date.now() - 86400000 * 5).toISOString(),
            category: 'Marketing',
            type: 'expense'
          }
        ]
      };
      
      setBudgets([sampleBudget]);
    }
  }, []);

  // Reset budget form data
  // const resetBudgetForm = () => {
  //   setBudgetFormData({
  //     name: '',
  //     period: 'Monthly',
  //     startDate: new Date().toISOString().split('T')[0],
  //     endDate: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0],
  //     targetAmount: 0,
  //     categories: [],
  //     notes: ''
  //   });
  // };

  const resetBudgetForm = () => {
    setBudgetFormData({
      name: "",
      period: "Monthly",
      startDate: new Date().toISOString().split('T')[0],
      endDate: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0],
      targetAmount: 0,
      categories: [],
      notes: ""
    });
    setTempBudgetCategory({ name: "", allocated: 0 });
  };

// Payroll form handling
const [payrollFormData, setPayrollFormData] = useState({
  employeeName: '',
  position: '',
  payPeriodStart: new Date(),
  payPeriodEnd: new Date(),
  baseSalary: 0,
  overtime: 0,
  deductions: 0,
  employeePhone: '', // New field for phone number
  employeeEmail: '', // New field for email address
  employeeAddress: '' // New field for physical address
});

const handlePayrollFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const { name, value } = e.target;
  setPayrollFormData(prev => ({ ...prev, [name]: value }));
};

const handlePayrollSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  const newPayroll: Payroll = {
    id: `payroll-${Date.now()}`,
    employeeId: 'emp-' + Date.now(), // Add a placeholder employeeId
    ...payrollFormData,
    netPay: payrollFormData.baseSalary + payrollFormData.overtime - payrollFormData.deductions,
    status: 'pending'
  };
  
  setPayrolls([...payrolls, newPayroll]);
  setShowPayrollModal(false);
  toast.success('Payroll added successfully!');
};

// Payment processing
const handlePayrollPayment = (payroll: Payroll) => {
  // Create transaction record
  const transaction: Transaction = {
    id: `txn-${Date.now()}`,
    type: 'expense',
    category: 'Payroll',
    amount: payroll.netPay,
    date: new Date(),
    description: `Salary payment for ${payroll.employeeName}`,
    relatedPayrollId: payroll.id
  };
  
  // Update payroll status with the correct union type
  const updatedPayroll: Payroll = {
    ...payroll,
    status: "paid" as "paid" | "pending", // Explicitly type as union
    paymentDate: new Date(),
    transactionId: transaction.id
  };
  
  // Update state
  setTransactions([...transactions, transaction]);
  setPayrolls(payrolls.map(p => 
    p.id === payroll.id ? updatedPayroll : p
  ));
  
  // Show success message
  toast.success(`Payment processed for ${payroll.employeeName}`);
};

const addEmployee = () => {
  const newEmployee: Employee = {
    id: uuidv4(),
    ...employeeFormData,
    hireDate: new Date(employeeFormData.hireDate),
  };
  setEmployees([...employees, newEmployee]);
  toast.success("Employee added successfully");
  resetEmployeeForm();
  setShowEmployeeModal(false);
};

const updateEmployee = () => {
  const updatedEmployees = employees.map(e =>
    e.id === editingEmployee!.id
      ? { ...editingEmployee!, ...employeeFormData, hireDate: new Date(employeeFormData.hireDate) }
      : e
  );
  setEmployees(updatedEmployees);
  toast.success("Employee updated");
  resetEmployeeForm();
  setShowEmployeeModal(false);
  setEditingEmployee(null);
};

const deleteEmployee = (employeeId: string) => {
  const confirmed = window.confirm("Are you sure?");
  if (confirmed) {
    const filtered = employees.filter(e => e.id !== employeeId);
    setEmployees(filtered);
    toast.success("Employee removed");
  }
};

const resetEmployeeForm = () => {
  setEmployeeFormData({
    name: "",
    email: "",
    phone: "",
    address: "",
    position: "",
    hireDate: "",
    department: "",
    notes: ""
  });
};

  
  // Handle budget form changes
  const handleBudgetFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    if (name === "targetAmount") {
      setBudgetFormData({
        ...budgetFormData,
        [name]: parseFloat(value) || 0
      });
    } else {
      setBudgetFormData({
        ...budgetFormData,
        [name]: value
      });
    }
  };
  
  // Handle temporary category form changes
  const handleTempCategoryChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setTempBudgetCategory({
      ...tempBudgetCategory,
      [name]: name === "allocated" ? parseFloat(value) || 0 : value
    });
  };
  
  // Add a category to the form
  const addCategoryToForm = () => {
    if (!tempBudgetCategory.name || tempBudgetCategory.allocated <= 0) {
      toast.error("Please enter a valid category name and allocation amount");
      return;
    }
    
    setBudgetFormData({
      ...budgetFormData,
      categories: [
        ...budgetFormData.categories, 
        { 
          id: uuidv4(),
          name: tempBudgetCategory.name, 
          allocated: tempBudgetCategory.allocated 
        }
      ]
    });
    
    setTempBudgetCategory({ name: "", allocated: 0 });
  };
  
  // Remove a category from the form
  const removeCategoryFromForm = (id: string) => {
    setBudgetFormData({
      ...budgetFormData,
      categories: budgetFormData.categories.filter(cat => cat.id !== id)
    });
  };
  
  // Function to save a new budget
  const saveBudget = () => {
    // Validation
    if (!budgetFormData.name) {
      toast.error("Budget name is required");
      return;
    }
    
    if (parseFloat(String(budgetFormData.targetAmount)) <= 0) {
      toast.error("Budget target amount must be greater than zero");
      return;
    }
    
    if (new Date(budgetFormData.startDate) >= new Date(budgetFormData.endDate)) {
      toast.error("End date must be after start date");
      return;
    }
    
    if (budgetFormData.categories.length === 0) {
      toast.error("Please add at least one category to your budget");
      return;
    }
    
    if (editingBudget) {
      // Update existing budget
      const updatedBudget: Budget = {
        ...editingBudget,
        name: budgetFormData.name,
        period: budgetFormData.period,
        startDate: budgetFormData.startDate,
        endDate: budgetFormData.endDate,
        targetAmount: budgetFormData.targetAmount,
        categories: budgetFormData.categories.map(cat => {
          // Find matching category in existing budget to preserve spent amounts
          const existingCat = (editingBudget.categories || []).find(c => c.id === cat.id);
          return {
            id: cat.id,
            name: cat.name,
            allocated: cat.allocated,
            spent: existingCat ? existingCat.spent : 0
          };
        }),
        notes: budgetFormData.notes
      };
      
      setBudgets(budgets.map(b => b.id === updatedBudget.id ? updatedBudget : b));
      toast.success("Budget updated successfully");
    } else {
      // Create new budget
      const newBudget: Budget = {
        id: uuidv4(),
        name: budgetFormData.name,
        period: budgetFormData.period,
        startDate: budgetFormData.startDate,
        endDate: budgetFormData.endDate,
        targetAmount: budgetFormData.targetAmount,
        spentAmount: 0,
        categories: budgetFormData.categories.map(cat => ({
          id: cat.id,
          name: cat.name,
          allocated: cat.allocated,
          spent: 0
        })),
        recentTransactions: [],
        notes: budgetFormData.notes
      };
      
      setBudgets([...budgets, newBudget]);
      toast.success("Budget created successfully");
    }
    
    setShowBudgetModal(false);
    setEditingBudget(null);
    resetBudgetForm();
    setDataChanged(true);
  };
  
  // Function to delete a budget
  // const deleteBudget = (id: string) => {
  //   if (window.confirm("Are you sure you want to delete this budget? This action cannot be undone.")) {
  //     setBudgets(budgets.filter(budget => budget.id !== id));
  //     setExpandedBudget(null);
  //     toast.success("Budget deleted");
  //     setDataChanged(true);
  //   }
  // };

  // Handle budget form changes
  // const handleBudgetFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
  //   const { name, value } = e.target;
  //   setBudgetFormData(prev => ({
  //     ...prev,
  //     [name]: name === 'targetAmount' ? parseFloat(value) : value
  //   }));
  // };

  // Add a new budget
  const addBudget = () => {
    const newBudget: Budget = {
      id: 'budget-' + Date.now(),
      name: budgetFormData.name,
      period: budgetFormData.period,
      startDate: budgetFormData.startDate,
      endDate: budgetFormData.endDate,
      targetAmount: budgetFormData.targetAmount,
      spentAmount: 0, // New budgets start with 0 spent
      categories: budgetFormData.categories.map(cat => ({
        ...cat,
        spent: 0 // New categories start with 0 spent
      })),
      recentTransactions: []
    };
    
    if (budgetFormData.notes) {
      newBudget.notes = budgetFormData.notes;
    }
    
    setBudgets(prev => [...prev, newBudget]);
    setShowBudgetModal(false);
    resetBudgetForm();
    setDataChanged(true);
  };

  // Update an existing budget
  const updateBudget = () => {
    if (!editingBudget) return;
    
    const updatedBudgets = budgets.map(budget => {
      if (budget.id === editingBudget.id) {
        return {
          ...budget,
          name: budgetFormData.name,
          period: budgetFormData.period,
          startDate: budgetFormData.startDate,
          endDate: budgetFormData.endDate,
          targetAmount: budgetFormData.targetAmount,
          categories: budgetFormData.categories.map(cat => {
            // Preserve spent amounts for existing categories
            const existingCat = budget.categories?.find(c => c.id === cat.id);
            return {
              ...cat,
              spent: existingCat ? existingCat.spent : 0
            };
          }),
          notes: budgetFormData.notes
        };
      }
      return budget;
    });
    
    setBudgets(updatedBudgets);
    setShowBudgetModal(false);
    setEditingBudget(null);
    resetBudgetForm();
    setDataChanged(true);
  };

  // Delete a budget
  const deleteBudget = (id: string) => {
    if (confirm('Are you sure you want to delete this budget? This action cannot be undone.')) {
      setBudgets(budgets.filter(budget => budget.id !== id));
      setEditingBudget(null);
      setExpandedBudget(null);
      setDataChanged(true);
    }
  };

  

  // Load budget data into form for editing
  useEffect(() => {
    if (editingBudget) {
      setBudgetFormData({
        name: editingBudget.name,
        period: editingBudget.period,
        startDate: typeof editingBudget.startDate === 'string' ? 
          editingBudget.startDate.split('T')[0] : 
          editingBudget.startDate.toISOString().split('T')[0],
        endDate: typeof editingBudget.endDate === 'string' ? 
          editingBudget.endDate.split('T')[0] : 
          editingBudget.endDate.toISOString().split('T')[0],
        targetAmount: editingBudget.targetAmount,
        categories: (editingBudget.categories || []).map(cat => ({
          id: cat.id || '',
          name: cat.name,
          allocated: cat.allocated
        })),
        notes: editingBudget.notes || ''
      });
      setShowBudgetModal(true);
    }
  }, [editingBudget]);

  // Update transaction effects on budgets
  useEffect(() => {
    // If we have both budgets and transactions, we can update spent amounts
    if (budgets.length > 0 && transactions.length > 0) {
      const updatedBudgets = budgets.map(budget => {
        // Find transactions in this budget period
        const budgetTransactions = transactions.filter(transaction => 
          isDateInBudgetPeriod(new Date(transaction.date), budget)
        );
        
        // Calculate total spent amount
        let totalSpent = 0;
        
        // Category spending map
        const categorySpending = new Map<string, number>();
        
        // Initialize category spending with 0
        (budget.categories || []).forEach(cat => {
          categorySpending.set(cat.name.toLowerCase(), 0);
        });
        
        // Calculate spending per category and total
        budgetTransactions.forEach(transaction => {
          if (transaction.type === 'expense') {
            // Get category name from categories
            const category = categories.find(c => c.id === transaction.category);
            const categoryName = category ? category.name.toLowerCase() : 'uncategorized';
            
            // Add to total spent
            totalSpent += transaction.amount;
            
            // Add to category if it exists
            if (categorySpending.has(categoryName)) {
              categorySpending.set(
                categoryName, 
                (categorySpending.get(categoryName) || 0) + transaction.amount
              );
            }
          }
        });
        
        // Update categories spent amounts
        const updatedCategories = (budget.categories || []).map(cat => ({
          ...cat,
          spent: categorySpending.get(cat.name.toLowerCase()) || 0
        }));
        
        // Get recent transactions (last 5)
        const recentTxs = budgetTransactions
          .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
          .slice(0, 5)
          .map(t => {
            const category = categories.find(c => c.id === t.category);
            return {
              id: t.id,
              description: t.description,
              amount: t.amount,
              date: t.date,
              category: category ? category.name : 'Uncategorized',
              type: t.type
            };
          });
        
        return {
          ...budget,
          spentAmount: totalSpent,
          categories: updatedCategories,
          recentTransactions: recentTxs
        };
      });
      
      setBudgets(updatedBudgets);
    }
  }, [transactions, categories]);

  
  // Business type options
  const businessTypes = [
    "Retail", "Food & Beverage", "Professional Services", 
    "Healthcare", "Manufacturing", "Technology", "Education",
    "Construction", "Transportation", "Entertainment", "Other"
  ];
  
  // Business onboarding form state
  const [businessFormData, setBusinessFormData] = useState({
    name: "",
    type: businessTypes[0],
    address: "",
    phone: "",
    email: "",
    established: new Date().getFullYear().toString(),
    baseCurrency: ""
  });
  
  // Currency state
  const [currencies] = useState<Currency[]>([
    { code: "USD", symbol: "$", name: "US Dollar", rate: exchangeRates.USD },
    { code: "EUR", symbol: "€", name: "Euro", rate: exchangeRates.EUR },
    { code: "GBP", symbol: "£", name: "British Pound", rate: exchangeRates.GBP },
    { code: "JPY", symbol: "¥", name: "Japanese Yen", rate: exchangeRates.JPY },
    { code: "NGN", symbol: "₦", name: "Nigerian Naira", rate: exchangeRates.NGN },
    { code: "INR", symbol: "₹", name: "Indian Rupee", rate: exchangeRates.INR },
    { code: "GHS", symbol: "₵", name: "Ghanaian Cedi", rate: exchangeRates.GHS },
  ]);
// Initialize with the user's base currency or default to USD if not set
const [selectedCurrency, setSelectedCurrency] = useState(() => {
  // Check if business info has a base currency
  if (businessInfo && businessInfo.baseCurrency) {
    const savedCurrency = currencies.find(c => c.code === businessInfo.baseCurrency);
    return savedCurrency || currencies.find(c => c.code === 'NGN') || currencies[0];
  }
  // Default to USD
  return currencies.find(c => c.code === 'NGN') || currencies[0];
});
  const [showCurrencyDropdown, setShowCurrencyDropdown] = useState(false);
  const [showUsdPrices, setShowUsdPrices] = useState<boolean>(true);
  
  // Modal states
  const [showInventoryModal, setShowInventoryModal] = useState(false);
  const [showTransactionModal, setShowTransactionModal] = useState(false);
  
  // Edit states - add these for tracking the item being edited
  const [editingInventoryItem, setEditingInventoryItem] = useState<InventoryItem | null>(null);
  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);

  // New state for receipts
  const [receipts, setReceipts] = useState<Receipt[]>([]);
  const [showReceiptModal, setShowReceiptModal] = useState(false);
  const [editingReceipt, setEditingReceipt] = useState<Receipt | null>(null);

  // Add customers state
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [filteredCustomers, setFilteredCustomers] = useState<Customer[]>([]);

  // Add customer modal state
  const [showCustomerModal, setShowCustomerModal] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);

  // Add invoice state
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  // const [filteredInvoices, setFilteredInvoices] = useState<Invoice[]>([]);

  const [payrolls, setPayrolls] = useState<Payroll[]>([]);
  const [showPayrollModal, setShowPayrollModal] = useState(false);
  const [editingPayroll, setEditingPayroll] = useState<Payroll | null>(null);
  // const [payrollFormData, setPayrollFormData] = useState({
  //   employeeName: '',
  //   position: '',
  //   payPeriodStart: new Date(),
  //   payPeriodEnd: new Date(),
  //   baseSalary: 0,
  //   overtime: 0,
  //   deductions: 0
  // });


  // Add invoice modal state
  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [editingInvoice, setEditingInvoice] = useState<Invoice | null>(null);

  // Form states
  const [inventoryFormData, setInventoryFormData] = useState<InventoryFormData>({
    name: "",
    category: "",
    quantity: 0,
    costPrice: 0,
    sellingPrice: 0,
    sku: "",
  });

const [employees, setEmployees] = useState<Employee[]>([]);
const [filteredEmployees, setFilteredEmployees] = useState<Employee[]>([]);
const [showEmployeeModal, setShowEmployeeModal] = useState(false);
const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);
const [employeeFormData, setEmployeeFormData] = useState<EmployeeFormData>({
  name: "",
  email: "",
  phone: "",
  address: "",
  position: "",
  hireDate: "",
  department: "",
  notes: ""
});

  
  const [transactionFormData, setTransactionFormData] = useState<TransactionFormData>({
    description: "",
    type: "income",
    category: "",
    amount: 0,
    date: new Date().toISOString().split('T')[0],
    customerId: "",
  relatedInventoryId: undefined, // No inventory item selected by default
  quantity: 1,
  relatedPayrollId: undefined, // No payroll item selected by default      
  });

  // Update form states with new customer fields
  const [receiptFormData, setReceiptFormData] = useState<ReceiptFormData>({
    date: new Date().toISOString().split('T')[0],
    customerName: "",
    items: [],
    totalAmount: 0,
    isNewCustomer: false,
    newCustomerData: {
      email: "",
      phone: "",
      address: "",
      notes: ""
    }
  });

  // Add customer form data state
  const [customerFormData, setCustomerFormData] = useState<CustomerFormData>({
    name: "",
    email: "",
    phone: "",
    address: "",
    notes: ""
  });

  // Add invoice form data state
  const [invoiceFormData, setInvoiceFormData] = useState<InvoiceFormData>({
    date: new Date().toISOString().split('T')[0],
    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // Default due date 30 days ahead
    invoiceNumber: "",
    customerId: "",
    customerName: "",
    items: [],
    totalAmount: 0,
    notes: "",
    paymentTerms: "30 days", // Default payment terms
    isNewCustomer: false,
    newCustomerData: {
      email: "",
      phone: "",
      address: "",
      notes: ""
    },
    isPaid: false,
    paidDate: "",
    paidTimestamp: undefined,
  });

  const addInvoiceItem = () => {
    if (!tempInvoiceItem.name || !tempInvoiceItem.quantity || !tempInvoiceItem.price) {
      return;
    }
    
    const newItem = { ...tempInvoiceItem, id: uuidv4() };
    const newItems = [...invoiceFormData.items, newItem];
    const newTotal = newItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    setInvoiceFormData({
      ...invoiceFormData,
      items: newItems,
      totalAmount: newTotal
    });
    
    // Reset the form
    setTempInvoiceItem({
      name: '',
      quantity: 1,
      price: 0
    });
  };

  const removeInvoiceItem = (index: number) => {
    const newItems = [...invoiceFormData.items];
    newItems.splice(index, 1);
    const newTotal = newItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    setInvoiceFormData({
      ...invoiceFormData,
      items: newItems,
      totalAmount: newTotal
    });
  };

  const isInvoicePaymentLocked = (invoice: Invoice): boolean => {
    if (!invoice.isPaid || !invoice.paidTimestamp) return false;
    
    const now = new Date();
    const paidDate = new Date(invoice.paidTimestamp);
    const twoHoursInMs = 2 * 60 * 60 * 1000; // 2 hours in milliseconds
    
    return now.getTime() - paidDate.getTime() > twoHoursInMs;
  };

  // Add this effect to populate the form when editing an employee
useEffect(() => {
  if (editingEmployee) {
    // Format the hire date for the date input (YYYY-MM-DD)
    let formattedHireDate = '';
    
    if (editingEmployee.hireDate) {
      // Handle different date formats
      const hireDate = editingEmployee.hireDate instanceof Date 
        ? editingEmployee.hireDate
        : new Date(editingEmployee.hireDate);
      
      formattedHireDate = hireDate.toISOString().split('T')[0];
    }
    
    // Update the form with the employee data
    setEmployeeFormData({
      name: editingEmployee.name || '',
      position: editingEmployee.position || '',
      department: editingEmployee.department || '',
      email: editingEmployee.email || '',
      phone: editingEmployee.phone || '',
      address: editingEmployee.address || '',
      hireDate: formattedHireDate,
      notes: editingEmployee.notes || ''
    });
  } else {
    // Reset the form when not editing
    setEmployeeFormData({
      name: '',
      position: '',
      department: '',
      email: '',
      phone: '',
      address: '',
      hireDate: '',
      notes: ''
    });
  }
}, [editingEmployee]);



  const [tempInvoiceItem, setTempInvoiceItem] = useState<{
    name: string;
    quantity: number;
    price: number;
  }>({
    name: '',
    quantity: 1,
    price: 0
  });

  // Theme colors
  const theme = {
    primary: "indigo-600",
    primaryLight: "indigo-100",
    primaryDark: "indigo-800",
    secondary: "violet-500",
    secondaryLight: "violet-100",
    secondaryDark: "violet-800",
    success: "emerald-500",
    successLight: "emerald-100",
    danger: "rose-500",
    dangerLight: "rose-100",
    warning: "amber-500",
    warningLight: "amber-100",
    info: "sky-500",
    infoLight: "sky-100",
    gray: "gray-200",
    grayDark: "gray-700",
    textPrimary: "gray-900",
    textSecondary: "gray-600",
    textLight: "gray-400",
    white: "white",
    black: "black",
  };

  // Define available themes
  const themes: Theme[] = [
    {
      id: "default",
      name: "Midnight Blue",
      primary: "indigo-600",
      secondary: "violet-500",
      accent: "indigo-400",
      background: "gray-900",
      cardBackground: "gray-800",
      text: "white",
      border: "gray-700",
      buttonText: "white",
      success: "emerald-500",
      danger: "rose-500",
      warning: "amber-500"
    },
    {
      id: "dark-purple",
      name: "Dark Purple",
      primary: "purple-600",
      secondary: "fuchsia-500",
      accent: "purple-400",
      background: "gray-900",
      cardBackground: "gray-800",
      text: "white",
      border: "purple-900",
      buttonText: "white",
      success: "green-500",
      danger: "red-500",
      warning: "yellow-500"
    },
    {
      id: "emerald",
      name: "Emerald",
      primary: "emerald-600",
      secondary: "teal-500",
      accent: "emerald-400",
      background: "gray-900",
      cardBackground: "gray-800",
      text: "white",
      border: "emerald-900",
      buttonText: "white",
      success: "green-500",
      danger: "rose-500",
      warning: "amber-500"
    },
    {
      id: "crimson",
      name: "Crimson",
      primary: "rose-600",
      secondary: "pink-500",
      accent: "rose-400",
      background: "gray-900",
      cardBackground: "gray-800",
      text: "white",
      border: "rose-900",
      buttonText: "white",
      success: "emerald-500",
      danger: "red-600",
      warning: "amber-500"
    },

  ];
  
  // Theme state
  const [currentTheme, setCurrentTheme] = useState<Theme>(themes[0]);
  const [showThemeSelector, setShowThemeSelector] = useState(false);

  
  
  // Add state for data persistence
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [dataChanged, setDataChanged] = useState(false);

  // Add categories state
  // const [categories, setCategories] = useState<Category[]>([
  //   // Some default categories to start with
  //   { id: "cat-1", name: "Electronics", description: "Electronic items and gadgets", type: "inventory", color: "blue-500" },
  //   { id: "cat-2", name: "Stationery", description: "Office supplies and stationery", type: "inventory", color: "green-500" },
  //   { id: "cat-3", name: "Sales", description: "Income from sales", type: "transaction", color: "emerald-500" },
  //   { id: "cat-4", name: "Utilities", description: "Utility bills and expenses", type: "transaction", color: "amber-500" },
  //   { id: "cat-5", name: "Salaries", description: "Staff salaries", type: "transaction", color: "rose-500" }
  // ]);
  // const [filteredCategories, setFilteredCategories] = useState<Category[]>([]);
  
  // Add category form state
  const [categoryFormData, setCategoryFormData] = useState<{
    name: string;
    description: string;
    type: "inventory" | "transaction" | "both";
    color: string;
  }>({
    name: "",
    description: "",
    type: "both",
    color: "blue-500"
  });
  
  // Add category modal state
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);

  // Available colors for categories
  const categoryColors = [
    "blue-500", "indigo-500", "purple-500", "pink-500", "rose-500", 
    "red-500", "orange-500", "amber-500", "yellow-500", "lime-500",
    "green-500", "emerald-500", "teal-500", "cyan-500", "sky-500"
  ];

  // LOCAL STORAGE INTEGRATION
  // Load data from localStorage on initial mount
  useEffect(() => {
    loadFromLocalStorage();
    
    // Check if business onboarding has been completed
    try {
      const savedData = localStorage.getItem('bookkeep-data');
      if (savedData) {
        const parsedData: AppData = JSON.parse(savedData);
        if (parsedData.businessInfo) {
          setBusinessInfo(parsedData.businessInfo);
        } else {
          setShowBusinessOnboarding(true);
        }
      } else {
        setShowBusinessOnboarding(true);
      }
    } catch (error) {
      console.error('Failed to load business info from localStorage:', error);
      setShowBusinessOnboarding(true);
    }
  }, []);

 // Update the invoice editing useEffect
useEffect(() => {
  if (editingInvoice) {
    // Check if invoice is payment-locked (paid and over 2 hours old)
    if (isInvoicePaymentLocked(editingInvoice)) {
      toast.error("This invoice was paid over 2 hours ago and can no longer be modified");
      setShowInvoiceModal(false);
      setEditingInvoice(null);
      return;
    }
    
    // Create default due date (30 days from now) as fallback
    const defaultDueDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    setInvoiceFormData({
      date: formatDateForInput(editingInvoice.date) || new Date().toISOString().split('T')[0],
      dueDate: formatDateForInput(editingInvoice.dueDate) || defaultDueDate,
      invoiceNumber: editingInvoice.invoiceNumber,
      customerId: editingInvoice.customerId,
      customerName: editingInvoice.customerName,
      items: [...editingInvoice.items],
      totalAmount: editingInvoice.totalAmount,
      notes: editingInvoice.notes || '',
      paymentTerms: editingInvoice.paymentTerms || 'Due on receipt',
      isNewCustomer: false,
      newCustomerData: {
        email: '',
        phone: '',
        address: '',
        notes: ''
      },
      isPaid: editingInvoice.isPaid || false,
      paidDate: editingInvoice.paidDate ? formatDateForInput(editingInvoice.paidDate) : '',
      paidTimestamp: editingInvoice.paidTimestamp || undefined
    });
  }
}, [editingInvoice]);

  // Save data to localStorage whenever inventory or transactions change
  useEffect(() => {
    if (inventory.length > 0 || transactions.length > 0 || receipts.length > 0 || budgets.length > 0) {
      saveToLocalStorage();
      setDataChanged(true);
    }
  }, [inventory, transactions, receipts, selectedCurrency, budgets, payrolls, employees, customers, invoices, businessInfo,budgets]);

  // Load theme from localStorage
  useEffect(() => {
    try {
      const savedData = localStorage.getItem('bookkeep-data');
      if (savedData) {
        const parsedData: AppData = JSON.parse(savedData);
        if (parsedData.selectedTheme) {
          const savedTheme = themes.find(theme => theme.id === parsedData.selectedTheme);
          if (savedTheme) {
            setCurrentTheme(savedTheme);
          }
        }
      }
    } catch (error) {
      console.error('Failed to load theme from localStorage:', error);
    }
  }, []);

  // Function to load data from localStorage
  const loadFromLocalStorage = () => {
    try {
      const savedData = localStorage.getItem('bookkeep-data');
      
      if (savedData) {
        const parsedData: AppData = JSON.parse(savedData);
        
        // Convert date strings back to Date objects for transactions
        const loadedTransactions = parsedData.transactions.map(transaction => ({
          ...transaction,
          date: new Date(transaction.date)
        }));
        
        // Convert date strings back to Date objects for inventory items
        const loadedInventory = parsedData.inventory.map(item => ({
          ...item,
          lastRestocked: new Date(item.lastRestocked)
        }));
        
        setInventory(loadedInventory);
        setTransactions(loadedTransactions);
        
        // Load receipts if they exist
        if (parsedData.receipts) {
          const loadedReceipts = parsedData.receipts.map(receipt => ({
            ...receipt,
            date: new Date(receipt.date)
          }));
          setReceipts(loadedReceipts);
        }
        
        // Set selected currency if available
        const currencyCode = parsedData.selectedCurrency;
        if (currencyCode) {
          const foundCurrency = currencies.find(c => c.code === currencyCode);
          if (foundCurrency) {
            setSelectedCurrency(foundCurrency);
          }
        }
        
        // Load categories if they exist
        if (parsedData.categories) {
          setCategories(parsedData.categories);
        }

        // Load customers if they exist
        if (parsedData.customers) {
          const loadedCustomers = parsedData.customers.map(customer => ({
            ...customer,
            createdAt: new Date(customer.createdAt)
          }));
          setCustomers(loadedCustomers);
        }

        // Load business info if it exists
        if (parsedData.businessInfo) {
          setBusinessInfo(parsedData.businessInfo);
        }

        // Load invoices if they exist
        if (parsedData.invoices) {
          const loadedInvoices = parsedData.invoices.map(invoice => ({
            ...invoice,
            date: new Date(invoice.date)
          }));
          setInvoices(loadedInvoices);
        }
        
        // Load budgets if they exist
        if (parsedData.budgets) {
          const loadedBudgets = parsedData.budgets.map(budget => ({
            ...budget,
            startDate: new Date(budget.startDate),
            endDate: new Date(budget.endDate),
            recentTransactions: budget.recentTransactions ? budget.recentTransactions.map(t => ({
              ...t,
              date: new Date(t.date)
            })) : []
          }));
          setBudgets(loadedBudgets);
        }

        // Load payrolls if they exist
        if (parsedData.payrolls) {
          const loadedPayrolls = parsedData.payrolls.map(payroll => ({
            ...payroll,
            payPeriodStart: new Date(payroll.payPeriodStart),
            payPeriodEnd: new Date(payroll.payPeriodEnd),
            paymentDate: payroll.paymentDate ? new Date(payroll.paymentDate) : undefined
          }));
          setPayrolls(loadedPayrolls);
        }

        if (parsedData.employees) {
          const loadedEmployees = parsedData.employees.map(employee => ({
            ...employee,
            hireDate: employee.hireDate ? new Date(employee.hireDate) : new Date()
          }));
          setEmployees(loadedEmployees);
        }

        setLastSaved(new Date(parsedData.lastUpdated));
        console.log('Data loaded from localStorage');
      }
    } catch (error) {
      console.error('Failed to load data from localStorage:', error);
    }
  };

  // Function to save data to localStorage
  const saveToLocalStorage = () => {
    try {
      setIsSaving(true);
      const currentTime = new Date().toISOString();
      
      // Ensure all receipts have the type field before saving
      const receiptsToSave = receipts.map(r => ({...r, type: r.type || "income"}));
      
      const dataToSave: AppData = {
        inventory,
        transactions,
        receipts: receiptsToSave, // Save with type field
        customers, // Add customers to saved data
        lastUpdated: currentTime,
        version: "1.0",
        selectedCurrency: selectedCurrency.code,
        selectedTheme: currentTheme.id, // Save selected theme
        categories,
        businessInfo, // Save business info
        invoices, // Save invoices
        budgets,   // Save budgets
        payrolls,
        employees
      };
      
      localStorage.setItem('bookkeep-data', JSON.stringify(dataToSave));
      setLastSaved(new Date());
      setDataChanged(false);
      
      setTimeout(() => {
        setIsSaving(false);
      }, 1000);
      
    } catch (error) {
      console.error('Failed to save data to localStorage:', error);
      setIsSaving(false);
    }
  };

  // Save business info
  const completeBusinessOnboarding = () => {
    const updatedBusinessInfo = {
      ...businessFormData
    };
    
    setBusinessInfo(updatedBusinessInfo);
    setShowBusinessOnboarding(false);
    
    // Save to localStorage
    setTimeout(() => {
      saveToLocalStorage();
    }, 100);
  };

  // Handle business form changes
  const handleBusinessFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setBusinessFormData({
      ...businessFormData,
      [name]: value,
    });
  };

  // Add these state variables near your other state declarations
const [payrollFilterStatus, setPayrollFilterStatus] = useState('all');
const [payrollSortOrder, setPayrollSortOrder] = useState('date-desc');

// Add this function to filter and sort payrolls
const getFilteredAndSortedPayrolls = () => {
  // First apply filters
  let result = [...payrolls];
  
  // Filter by status
  if (payrollFilterStatus === 'paid') {
    result = result.filter(p => p.status === 'paid');
  } else if (payrollFilterStatus === 'pending') {
    result = result.filter(p => p.status !== 'paid');
  } else if (payrollFilterStatus === 'recent') {
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    result = result.filter(p => new Date(p.payPeriodEnd) >= thirtyDaysAgo);
  }
  
  // Apply search query if exists
  if (searchQuery) {
    result = result.filter(p => 
      p.employeeName.toLowerCase().includes(searchQuery.toLowerCase()) || 
      p.position.toLowerCase().includes(searchQuery.toLowerCase())
    );
  }
  
  // Then sort
  switch (payrollSortOrder) {
    case 'date-desc':
      return result.sort((a, b) => new Date(b.payPeriodEnd).getTime() - new Date(a.payPeriodEnd).getTime());
    case 'date-asc':
      return result.sort((a, b) => new Date(a.payPeriodEnd).getTime() - new Date(b.payPeriodEnd).getTime());
    case 'amount-desc':
      return result.sort((a, b) => b.netPay - a.netPay);
    case 'amount-asc':
      return result.sort((a, b) => a.netPay - b.netPay);
    default:
      return result;
  }
};

// Get filtered and sorted payrolls
const filteredPayrolls = getFilteredAndSortedPayrolls();

  // EXPORT/IMPORT FUNCTIONALITY
  // Add state for export dropdown
  const [showExportDropdown, setShowExportDropdown] = useState(false);

  // Update the export function to support CSV format
  const exportData = (format: 'json' | 'csv-inventory' | 'csv-transactions' | 'csv-receipts' | 'csv-customers' | 'csv-invoices' | 'csv-budgets' | 'csv-all') => {
    try {
      const currentTime = new Date().toISOString().replace(/[:.]/g, '-');
      
      // JSON format (existing code)
      if (format === 'json') {
        const dataToExport: AppData = {
          inventory,
          transactions,
          receipts,
          customers,
          lastUpdated: new Date().toISOString(),
          version: "1.0",
          selectedCurrency: selectedCurrency.code,
          selectedTheme: currentTheme.id,
          categories,
          businessInfo, // Include business info in export
          invoices, // Include invoices in export
          budgets,   // Include budgets in export
          payrolls,
          employees
        };
        
        const json = JSON.stringify(dataToExport, null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        const href = URL.createObjectURL(blob);
        
        const link = document.createElement('a');
        link.href = href;
        link.download = `bookkeep-export-${currentTime}.json`;
        document.body.appendChild(link);
        link.click();
        
        document.body.removeChild(link);
        URL.revokeObjectURL(href);
        
        return;
      }
      
      // CSV formats
      let csvContent = '';
      let fileName = '';
      const currencySymbol = selectedCurrency.symbol;
      
      if (format === 'csv-inventory' || format === 'csv-all') {
        const headers = ['ID', 'Name', 'Category', 'Quantity', `Cost Price (${currencySymbol})`, 
          `Selling Price (${currencySymbol})`, 'Last Restocked', 'SKU'];
        
        const inventoryData = inventory.map(item => {
          const category = categories.find(c => c.id === item.category);
          return {
            ...item,
            category: category ? category.name : item.category
          };
        });
        
        const inventoryMappings = [
          'id', 'name', 'category', 'quantity', 'costPrice', 'sellingPrice', 'lastRestocked', 'sku'
        ];
        
        const inventoryCSV = convertToCSV(inventoryData, inventoryMappings);
        
        if (format === 'csv-inventory') {
          csvContent = 'Product Inventory\n' + headers.join(',') + '\n' + inventoryCSV;
          fileName = `inventory-export-${currentTime}.csv`;
        } else {
          csvContent = 'INVENTORY DATA\n' + headers.join(',') + '\n' + inventoryCSV + '\n\n';
        }
      }
      
      if (format === 'csv-transactions' || format === 'csv-all') {
        const headers = ['ID', 'Date', 'Description', 'Type', 'Category', 
          `Amount (${currencySymbol})`, 'Related Inventory', 'Customer'];
        
        const transactionData = transactions.map(t => {
          const category = categories.find(c => c.id === t.category);
          const relatedItem = t.relatedInventoryId ? 
            inventory.find(i => i.id === t.relatedInventoryId)?.name : '';
          const customer = t.customerId ?
            customers.find(c => c.id === t.customerId)?.name : '';
            
          return {
            ...t,
            category: category ? category.name : t.category,
            relatedInventory: relatedItem,
            customer
          };
        });
        
        const transactionMappings = [
          'id', 'date', 'description', 'type', 'category', 'amount', 'relatedInventory', 'customer'
        ];
        
        const transactionsCSV = convertToCSV(transactionData, transactionMappings);
        
        if (format === 'csv-transactions') {
          csvContent = 'Financial Transactions\n' + headers.join(',') + '\n' + transactionsCSV;
          fileName = `transactions-export-${currentTime}.csv`;
        } else {
          csvContent += 'TRANSACTION DATA\n' + headers.join(',') + '\n' + transactionsCSV + '\n\n';
        }
      }
      
      if (format === 'csv-receipts' || format === 'csv-all') {
        const headers = ['ID', 'Date', 'Customer', 'Type', 'Items Count', 
          `Total Amount (${currencySymbol})`, 'Description'];
        
        const receiptData = unifiedReceipts.map(r => {
          return {
            id: r.id,
            date: r.date,
            customer: r.customerName,
            type: r.type,
            itemsCount: r.items.length,
            totalAmount: r.totalAmount,
            description: r.description || ""
          };
        });
        
        const receiptMappings = [
          'id', 'date', 'customer', 'type', 'itemsCount', 'totalAmount', 'description'
        ];
        
        const receiptsCSV = convertToCSV(receiptData, receiptMappings);
        
        if (format === 'csv-receipts') {
          csvContent = 'Receipts and Invoices\n' + headers.join(',') + '\n' + receiptsCSV;
          fileName = `receipts-export-${currentTime}.csv`;
        } else {
          csvContent += 'RECEIPT DATA\n' + headers.join(',') + '\n' + receiptsCSV + '\n\n';
        }
      }
      
      if (format === 'csv-customers' || format === 'csv-all') {
        const headers = ['ID', 'Name', 'Email', 'Phone', 'Address', 
          'Purchases Count', 'Created Date', 'Notes'];
        
        const customerMappings = [
          'id', 'name', 'email', 'phone', 'address', 'totalPurchases', 'createdAt', 'notes'
        ];
        
        const customersCSV = convertToCSV(customers, customerMappings);
        
        if (format === 'csv-customers') {
          csvContent = 'Customer Database\n' + headers.join(',') + '\n' + customersCSV;
          fileName = `customers-export-${currentTime}.csv`;
        } else {
          csvContent += 'CUSTOMER DATA\n' + headers.join(',') + '\n' + customersCSV;
        }
      }
      
      if (format === 'csv-all') {
        fileName = `bookkeep-all-data-${currentTime}.csv`;
      }
      
      if (format === 'csv-invoices' || format === 'csv-all') {
        const headers = ['Invoice Number', 'Date', 'Due Date', 'Customer Name', 
          `Total Amount (${currencySymbol})`, 'Status', 'Payment Date', 'Items Count', 'Notes'];
        
        const invoiceData = invoices.map(inv => ({
          id: inv.invoiceNumber,
          date: formatDate(inv.date),
          dueDate: formatDate(inv.dueDate),
          customerName: inv.customerName,
          totalAmount: formatCurrency(inv.totalAmount).replace(currencySymbol, '').trim(),
          status: inv.isPaid ? 'Paid' : 'Unpaid',
          paymentDate: inv.paidDate ? formatDate(inv.paidDate) : 'N/A',
          itemsCount: inv.items?.length || 0,
          notes: inv.notes || ''
        }));
        
        const invoiceMappings = [
          'id', 'date', 'dueDate', 'customerName', 'totalAmount', 'status', 'paymentDate', 'itemsCount', 'notes'
        ];
        
        const invoicesCSV = convertToCSV(invoiceData, invoiceMappings);
        
        if (format === 'csv-invoices') {
          csvContent = invoicesCSV;
          fileName = `bookkeep-invoices-${currentTime}.csv`;
        } else {
          csvContent += `\n\n--- INVOICES ---\n${invoicesCSV}\n\n`;
        }
      }
      
      if (format === 'csv-budgets' || format === 'csv-all') {
        const headers = ['Name', 'Period', 'Start Date', 'End Date', 
          `Target Amount (${currencySymbol})`, `Spent Amount (${currencySymbol})`,
          'Categories Count', 'Notes', 'Percent Used'];
        
        const budgetData = budgets.map(bud => {
          const percentUsed = bud.targetAmount > 0 ? 
            Math.round((bud.spentAmount || 0) / bud.targetAmount * 100) : 0;
            
          return {
            id: bud.name,
            period: bud.period,
            startDate: formatDate(bud.startDate),
            endDate: formatDate(bud.endDate),
            targetAmount: formatCurrency(bud.targetAmount).replace(currencySymbol, '').trim(),
            spentAmount: formatCurrency(bud.spentAmount || 0).replace(currencySymbol, '').trim(),
            categoriesCount: bud.categories?.length || 0,
            notes: bud.notes || '',
            percentUsed: `${percentUsed}%`
          };
        });
        
        const budgetMappings = [
          'id', 'period', 'startDate', 'endDate', 'targetAmount', 'spentAmount', 
          'categoriesCount', 'notes', 'percentUsed'
        ];
        
        const budgetsCSV = convertToCSV(budgetData, budgetMappings);
        
        if (format === 'csv-budgets') {
          csvContent = budgetsCSV;
          fileName = `bookkeep-budgets-${currentTime}.csv`;
        } else {
          csvContent += `\n\n--- BUDGETS ---\n${budgetsCSV}\n\n`;
        }
      }
      
      // Create and download the CSV file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const href = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = href;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      
      document.body.removeChild(link);
      URL.revokeObjectURL(href);
      
    } catch (error) {
      console.error('Failed to export data:', error);
      alert('Failed to export data. Please try again.');
    }
  };

  // Function to import data from a JSON file
  const importData = (event: React.ChangeEvent<HTMLInputElement>) => {
    try {
      const file = event.target.files?.[0];
      if (!file) return;
      
      const reader = new FileReader();
      
      reader.onload = (e) => {
        try {
          const importedData: AppData = JSON.parse(e.target?.result as string);
          
          // Validate imported data structure
          if (!importedData.inventory || !importedData.transactions) {
            throw new Error('Invalid data format');
          }
          
          // Confirm before overwriting existing data
          if (inventory.length > 0 || transactions.length > 0) {
            if (!window.confirm('Importing will replace your existing data. Continue?')) {
              return;
            }
          }
          
          // Convert date strings to Date objects
          const processedTransactions = importedData.transactions.map(transaction => ({
            ...transaction,
            date: new Date(transaction.date)
          }));
          
          const processedInventory = importedData.inventory.map(item => ({
            ...item,
            lastRestocked: new Date(item.lastRestocked)
          }));
          
          setInventory(processedInventory);
          setTransactions(processedTransactions);
          
          // Load receipts if they exist
          if (importedData.receipts) {
            const loadedReceipts = importedData.receipts.map(receipt => ({
              ...receipt,
              date: new Date(receipt.date)
            }));
            setReceipts(loadedReceipts);
          }
          
          // Set currency if available
          if (importedData.selectedCurrency) {
            const foundCurrency = currencies.find(c => c.code === importedData.selectedCurrency);
            if (foundCurrency) {
              setSelectedCurrency(foundCurrency);
            }
          }

          // Load theme if available
          if (importedData.selectedTheme) {
            const importedTheme = themes.find(theme => theme.id === importedData.selectedTheme);
            if (importedTheme) {
              setCurrentTheme(importedTheme);
            }
          }

          // Load categories if they exist
          if (importedData.categories) {
            setCategories(importedData.categories);
          }

          // Load customers if they exist
          if (importedData.customers) {
            const loadedCustomers = importedData.customers.map(customer => ({
              ...customer,
              createdAt: new Date(customer.createdAt)
            }));
            setCustomers(loadedCustomers);
          }

          // Load business info if it exists
          if (importedData.businessInfo) {
            setBusinessInfo(importedData.businessInfo);
          }
          
          // Load invoices if they exist
          if (importedData.invoices) {
            const loadedInvoices = importedData.invoices.map(invoice => ({
              ...invoice,
              date: new Date(invoice.date),
              dueDate: new Date(invoice.dueDate)
            }));
            setInvoices(loadedInvoices);
          }
          
          // Load budgets if they exist
          if (importedData.budgets) {
            const loadedBudgets = importedData.budgets.map(budget => ({
              ...budget,
              startDate: new Date(budget.startDate),
              endDate: new Date(budget.endDate),
              recentTransactions: budget.recentTransactions ? budget.recentTransactions.map(t => ({
                ...t,
                date: new Date(t.date)
              })) : []
            }));
            setBudgets(loadedBudgets);
          }
          
          toast.success('Data imported successfully!');
          
        } catch (error) {
          console.error('Failed to parse imported data:', error);
          toast.error('The selected file contains invalid data. Please try again with a valid export file.');
        }
      };
      
      reader.readAsText(file);
      
    } catch (error) {
      console.error('Failed to import data:', error);
      toast.error('Failed to import data. Please try again.');
    }
    
    // Reset input
    event.target.value = '';
  };

  // Function to add a new inventory item
  const addInventoryItem = () => {
    const newItem: InventoryItem = {
      ...inventoryFormData,
      id: `inv-${Date.now()}`,
      lastRestocked: new Date(),
      quantity: Number(inventoryFormData.quantity),
      costPrice: Number(inventoryFormData.costPrice),
      sellingPrice: Number(inventoryFormData.sellingPrice),
    };
    setInventory([...inventory, newItem]);
    setShowInventoryModal(false);
    
    // Reset form
    resetInventoryForm();
  };
  
  // Function to update an inventory item
  const updateInventoryItem = () => {
    if (!editingInventoryItem) return;
    
    const updatedItem: InventoryItem = {
      ...editingInventoryItem,
      name: inventoryFormData.name,
      category: inventoryFormData.category,
      quantity: Number(inventoryFormData.quantity),
      costPrice: Number(inventoryFormData.costPrice),
      sellingPrice: Number(inventoryFormData.sellingPrice),
      sku: inventoryFormData.sku,
    };
    
    setInventory(inventory.map(item => 
      item.id === updatedItem.id ? updatedItem : item
    ));
    
    setShowInventoryModal(false);
    setEditingInventoryItem(null);
    resetInventoryForm();
  };
  
  // Function to delete an inventory item
  const deleteInventoryItem = (id: string) => {
    if (window.confirm("Are you sure you want to delete this inventory item?")) {
      setInventory(inventory.filter(item => item.id !== id));
    }
  };
  
  // Function to reset inventory form
  const resetInventoryForm = () => {
    setInventoryFormData({
      name: "",
      category: "",
      quantity: 0,
      costPrice: 0,
      sellingPrice: 0,
      sku: "",
    });
  };

// Updated add transaction function to associate with customer and handle inventory
const addTransaction = () => {
  // Validate inventory quantities for sales transactions
  if (!validateInventoryTransaction()) {
    return;
  }
  
  const newTransaction: Transaction = {
    id: `txn-${Date.now()}`,
    description: transactionFormData.description,
    type: transactionFormData.type,
    category: transactionFormData.category,
    amount: Number(transactionFormData.amount),
    date: new Date(transactionFormData.date),
    relatedInventoryId: transactionFormData.relatedInventoryId,
    customerId: transactionFormData.customerId || undefined,
    quantity: Number(transactionFormData.quantity) || 1, // Ensure we have a quantity value
    relatedPayrollId: transactionFormData.relatedPayrollId
  };
  
  // Update customer purchase count if transaction is income and has a customer
  if (transactionFormData.type === "income" && transactionFormData.customerId) {
    setCustomers(customers.map(customer =>
      customer.id === transactionFormData.customerId
        ? { ...customer, totalPurchases: customer.totalPurchases + 1 }
        : customer
    ));
  }
  
  // Update inventory if this transaction relates to an inventory item
  if (newTransaction.relatedInventoryId) {
    // Find the inventory item
    const inventoryItemIndex = inventory.findIndex(item => item.id === newTransaction.relatedInventoryId);
    
    if (inventoryItemIndex >= 0) {
      // Create a copy of inventory for immutability
      const updatedInventory = [...inventory];
      const item = { ...updatedInventory[inventoryItemIndex] };
      
      // Update quantity based on transaction type
      if (newTransaction.type === "income") {
        // For sales (income), decrease inventory
        const quantityToDecrease = newTransaction.quantity || 1;
        if (item.quantity < quantityToDecrease) {
          toast.error(`Not enough inventory for ${item.name}. Only ${item.quantity} units available.`);
          return;
        }
        item.quantity = Math.max(0, item.quantity - quantityToDecrease);
      } else {
        // For purchases (expense), increase inventory
        item.quantity = item.quantity + (newTransaction.quantity || 1);
        // Update last restocked date
        item.lastRestocked = new Date();
      }
      
      // Update the inventory item
      updatedInventory[inventoryItemIndex] = item;
      setInventory(updatedInventory);
      
      // Show success message
      const actionType = newTransaction.type === "income" ? "decreased" : "increased";
      toast.success(`Inventory for "${item.name}" ${actionType} by ${newTransaction.quantity || 1} unit(s)`);
    }
  }
  
  setTransactions([...transactions, newTransaction]);
  setShowTransactionModal(false);
  resetTransactionForm();

  setDataChanged(true);
  toast.success('Transaction added successfully!');
};

// Updated update transaction function to handle customer association changes and inventory adjustments
const updateTransaction = () => {
  if (!editingTransaction) return;
  
  // Validate inventory quantities for sales transactions
  if (!validateInventoryTransaction()) {
    return;
  }
  
  const updatedTransaction: Transaction = {
    ...editingTransaction,
    description: transactionFormData.description,
    type: transactionFormData.type,
    category: transactionFormData.category,
    amount: Number(transactionFormData.amount),
    date: new Date(transactionFormData.date),
    relatedInventoryId: transactionFormData.relatedInventoryId,
    customerId: transactionFormData.customerId || undefined,
    quantity: Number(transactionFormData.quantity) || 1 // Ensure we have a quantity value
  };
  
  // Handle customer purchase count updates if the customer association changed
  if (transactionFormData.type === "income" && 
      transactionFormData.customerId && 
      transactionFormData.customerId !== editingTransaction.customerId) {
    // Increment new customer's purchase count
    setCustomers(customers.map(customer =>
      customer.id === transactionFormData.customerId
        ? { ...customer, totalPurchases: customer.totalPurchases + 1 }
        : customer
    ));
  }
  
  // FIRST: Reverse the original transaction's effect on inventory
  if (editingTransaction.relatedInventoryId) {
    const originalItemIndex = inventory.findIndex(item => item.id === editingTransaction.relatedInventoryId);
    
    if (originalItemIndex >= 0) {
      const updatedInventory = [...inventory];
      const originalItem = { ...updatedInventory[originalItemIndex] };
      
      // Reverse the original transaction's effect
      if (editingTransaction.type === "income") {
        // Original was a sale, so add back to inventory
        originalItem.quantity = originalItem.quantity + (editingTransaction.quantity || 1);
      } else {
        // Original was a purchase, so remove from inventory
        originalItem.quantity = Math.max(0, originalItem.quantity - (editingTransaction.quantity || 1));
      }
      
      // Update the inventory
      updatedInventory[originalItemIndex] = originalItem;
      setInventory(updatedInventory);
    }
  }
  
  // SECOND: Apply the updated transaction's effect on inventory
  if (updatedTransaction.relatedInventoryId) {
    const newItemIndex = inventory.findIndex(item => item.id === updatedTransaction.relatedInventoryId);
    
    if (newItemIndex >= 0) {
      const updatedInventory = [...inventory];
      const newItem = { ...updatedInventory[newItemIndex] };
      
      // Apply the new transaction's effect
      if (updatedTransaction.type === "income") {
        // For sales (income), decrease inventory
        const quantityToDecrease = updatedTransaction.quantity || 1;
        if (newItem.quantity < quantityToDecrease) {
          toast.error(`Not enough inventory for ${newItem.name}. Only ${newItem.quantity} units available.`);
          return;
        }
        newItem.quantity = Math.max(0, newItem.quantity - quantityToDecrease);
      } else {
        // For purchases (expense), increase inventory
        newItem.quantity = newItem.quantity + (updatedTransaction.quantity || 1);
        // Update last restocked date if this is a purchase
        newItem.lastRestocked = new Date();
      }
      
      // Update the inventory
      updatedInventory[newItemIndex] = newItem;
      setInventory(updatedInventory);
      
      // Show success message
      const actionType = updatedTransaction.type === "income" ? "decreased" : "increased";
      toast.success(`Inventory for "${newItem.name}" ${actionType} by ${updatedTransaction.quantity || 1} unit(s)`);
    }
  }
  
  // Update transactions array
  setTransactions(transactions.map(transaction => 
    transaction.id === updatedTransaction.id ? updatedTransaction : transaction
  ));
  
  setShowTransactionModal(false);
  setEditingTransaction(null);
  resetTransactionForm();
  
  setDataChanged(true);
  toast.success('Transaction updated successfully!');
};

// Function to delete a transaction
const deleteTransaction = (id: string) => {
  if (!window.confirm("Are you sure you want to delete this transaction?")) {
    return;
  }
  
  const transactionToDelete = transactions.find(t => t.id === id);
  
  if (!transactionToDelete) return;
  
  // If this transaction affected inventory, revert those changes
  if (transactionToDelete.relatedInventoryId) {
    const inventoryItemIndex = inventory.findIndex(item => item.id === transactionToDelete.relatedInventoryId);
    
    if (inventoryItemIndex >= 0) {
      const updatedInventory = [...inventory];
      const item = { ...updatedInventory[inventoryItemIndex] };
      
      // Reverse the transaction's effect on inventory
      if (transactionToDelete.type === "income") {
        // Original was a sale, so add back to inventory
        item.quantity = item.quantity + (transactionToDelete.quantity || 1);
      } else {
        // Original was a purchase, so remove from inventory
        item.quantity = Math.max(0, item.quantity - (transactionToDelete.quantity || 1));
      }
      
      updatedInventory[inventoryItemIndex] = item;
      setInventory(updatedInventory);
      
      const actionType = transactionToDelete.type === "income" ? "increased" : "decreased";
      toast.success(`Inventory for "${item.name}" ${actionType} by ${transactionToDelete.quantity || 1} unit(s)`);
    }
  }

  // Remove the transaction
  setTransactions(transactions.filter(t => t.id !== id));
  
  setDataChanged(true);
  toast.success('Transaction deleted successfully!');
};

// Add this check before submitting the form
const validateInventoryTransaction = () => {
  // Only validate for expenses related to inventory
  if (transactionFormData.type === "expense" && transactionFormData.relatedInventoryId) {
    return true; // Purchases always valid as they add to inventory
  }
  
  // For income (sales), validate we have enough in stock
  if (transactionFormData.type === "income" && transactionFormData.relatedInventoryId) {
    const item = inventory.find(i => i.id === transactionFormData.relatedInventoryId);
    
    // If editing, we need to account for the original quantity
    let availableQuantity = item?.quantity || 0;
    if (editingTransaction && 
        editingTransaction.relatedInventoryId === transactionFormData.relatedInventoryId &&
        editingTransaction.type === "income") {
      // Add back the original quantity for proper calculation
      availableQuantity += (editingTransaction.quantity || 1);
    }
    
    const requestedQuantity = Number(transactionFormData.quantity) || 1;
    if (availableQuantity < requestedQuantity) {
      toast.error(`Not enough inventory. Only ${availableQuantity} units of ${item?.name} available.`);
      return false;
    }
  }
  
  return true;
};

  
  // Function to reset transaction form
  const resetTransactionForm = () => {
    setTransactionFormData({
      description: "",
      type: "income",
      category: "",
      amount: 0,
      date: new Date().toISOString().split('T')[0],
      customerId: "",
  relatedInventoryId: undefined, // No inventory item selected by default
  quantity: 1      
    });
  };

  

  // New functions for receipts
  // Updated add receipt function to handle customer creation/selection
  const addReceipt = () => {
    // Validate inventory quantities first
    let validInventory = true;
    const updatedInventory = [...inventory];
    
    for (const item of receiptFormData.items) {
      const inventoryItem = inventory.find(invItem => invItem.id === item.id);
      if (!inventoryItem || inventoryItem.quantity < item.quantity) {
        const itemName = inventoryItem ? inventoryItem.name : "Unknown item";
        alert(`Error: Not enough inventory for ${itemName}`);
        validInventory = false;
        break;
      }
    }
    
    if (!validInventory) {
      return;
    }
    
    // Create new customer if needed
    let customerInfo = {
      id: receiptFormData.customerId || uuidv4(),
      name: receiptFormData.customerName
    };
    
    // If creating a new customer, add them to customers list
    if (receiptFormData.isNewCustomer && receiptFormData.customerName) {
      const newCustomer: Customer = {
        id: customerInfo.id,
        name: customerInfo.name,
        email: receiptFormData.newCustomerData?.email || "",
        phone: receiptFormData.newCustomerData?.phone || "",
        address: receiptFormData.newCustomerData?.address || "",
        notes: receiptFormData.newCustomerData?.notes || "",
        createdAt: new Date(),
        totalPurchases: 1 // First purchase
      };
      
      setCustomers([...customers, newCustomer]);
    } else if (receiptFormData.customerId) {
      // Update existing customer's purchase count
      setCustomers(customers.map(customer => 
        customer.id === receiptFormData.customerId
          ? { ...customer, totalPurchases: customer.totalPurchases + 1 }
          : customer
      ));
    }
    
    // Create the new receipt with a UUID for customerId
    const newReceipt: Receipt = {
      id: `rcp-${Date.now()}`,
      date: new Date(receiptFormData.date),
      customerId: receiptFormData.customerId || uuidv4(), // Generate UUID if not provided
      customerName: receiptFormData.customerName,
      items: receiptFormData.items,
      totalAmount: receiptFormData.totalAmount,
      type: "income" // Default to income for new receipts
    };
    
    // Create a corresponding income transaction
    const transactionId = `txn-${Date.now()}`;
    const newTransaction: Transaction = {
      id: transactionId,
      date: new Date(receiptFormData.date),
      description: `Sale to ${receiptFormData.customerName}`,
      type: "income",
      category: "Sales",
      amount: receiptFormData.totalAmount,
    };
    
    // Update the receipt with the transaction ID
    newReceipt.transactionId = transactionId;
    
    // Update inventory quantities
    receiptFormData.items.forEach(item => {
      const inventoryIndex = updatedInventory.findIndex(invItem => invItem.id === item.id);
      if (inventoryIndex !== -1) {
        updatedInventory[inventoryIndex] = {
          ...updatedInventory[inventoryIndex],
          quantity: updatedInventory[inventoryIndex].quantity - item.quantity
        };
      }
    });
    
    // Save all updates
    setReceipts([...receipts, newReceipt]);
    setTransactions([...transactions, newTransaction]);
    setInventory(updatedInventory);
    setShowReceiptModal(false);
    resetReceiptForm();
  };

  // Updated update receipt function to handle customer changes
  const updateReceipt = () => {
    if (!editingReceipt) return;
    
    // Find quantities that have changed to update inventory correctly
    const quantityDifferences = editingReceipt.items.map(oldItem => {
      const newItem = receiptFormData.items.find(item => item.id === oldItem.id);
      return {
        id: oldItem.id,
        difference: newItem ? newItem.quantity - oldItem.quantity : -oldItem.quantity
      };
    });
    
    // Add new items not in original receipt
    receiptFormData.items.forEach(item => {
      if (!editingReceipt.items.some(oldItem => oldItem.id === item.id)) {
        quantityDifferences.push({
          id: item.id,
          difference: item.quantity
        });
      }
    });
    
    // Handle customer updates
    let customerInfo = {
      id: editingReceipt.customerId,
      name: editingReceipt.customerName
    };
    
    // If customer was changed or new one created
    if (receiptFormData.isNewCustomer && receiptFormData.customerName) {
      // Create new customer
      const newCustomer: Customer = {
        id: uuidv4(),
        name: receiptFormData.customerName,
        email: receiptFormData.newCustomerData?.email || "",
        phone: receiptFormData.newCustomerData?.phone || "",
        address: receiptFormData.newCustomerData?.address || "",
        notes: receiptFormData.newCustomerData?.notes || "",
        createdAt: new Date(),
        totalPurchases: 1
      };
      
      customerInfo = {
        id: newCustomer.id,
        name: newCustomer.name
      };
      
      setCustomers([...customers, newCustomer]);
    } else if (receiptFormData.customerId && receiptFormData.customerId !== editingReceipt.customerId) {
      // Update the selected customer's purchase count
      const selectedCustomer = customers.find(c => c.id === receiptFormData.customerId);
      if (selectedCustomer) {
        customerInfo = {
          id: selectedCustomer.id,
          name: selectedCustomer.name
        };
        
        setCustomers(customers.map(customer =>
          customer.id === receiptFormData.customerId
            ? { ...customer, totalPurchases: customer.totalPurchases + 1 }
            : customer
        ));
      }
    }
    
    // Create the updated receipt
    const updatedReceipt: Receipt = {
      ...editingReceipt,
      date: new Date(receiptFormData.date),
      customerId: customerInfo.id,
      customerName: customerInfo.name,
      items: receiptFormData.items,
      totalAmount: receiptFormData.totalAmount,
      type: "income" // Default to income for updated receipts
    };
    
    // Find or create corresponding transaction
    let updatedTransaction: Transaction | null = null;
    let existingTransactionIndex = -1;
    
    if (editingReceipt.transactionId) {
      // Find existing transaction
      existingTransactionIndex = transactions.findIndex(t => t.id === editingReceipt.transactionId);
      
      if (existingTransactionIndex !== -1) {
        updatedTransaction = {
          ...transactions[existingTransactionIndex],
          date: new Date(receiptFormData.date),
          description: `Sale to ${receiptFormData.customerName}`,
          amount: receiptFormData.totalAmount,
        };
      }
    }
    
    // If no valid transaction found or linked, create a new one
    if (updatedTransaction === null) {
      const transactionId = `txn-${Date.now()}`;
      updatedTransaction = {
        id: transactionId,
        date: new Date(receiptFormData.date),
        description: `Sale to ${receiptFormData.customerName}`,
        type: "income",
        category: "Sales",
        amount: receiptFormData.totalAmount,
      };
      updatedReceipt.transactionId = transactionId;
    }
    
    // Update inventory quantities - check for valid inventory first
    const updatedInventory = [...inventory];
    let validInventoryChanges = true;

    // Verify all inventory changes are valid before applying
    quantityDifferences.forEach(diff => {
      const inventoryIndex = updatedInventory.findIndex(invItem => invItem.id === diff.id);
      if (inventoryIndex !== -1) {
        const newQuantity = updatedInventory[inventoryIndex].quantity - diff.difference;
        if (newQuantity < 0) {
          validInventoryChanges = false;
          alert(`Error: Not enough inventory for ${updatedInventory[inventoryIndex].name}`);
        }
      }
    });

    if (!validInventoryChanges) {
      return;
    }
    
    // Apply inventory updates if all changes are valid
    quantityDifferences.forEach(diff => {
      const inventoryIndex = updatedInventory.findIndex(invItem => invItem.id === diff.id);
      if (inventoryIndex !== -1 && diff.difference !== 0) {
        updatedInventory[inventoryIndex] = {
          ...updatedInventory[inventoryIndex],
          quantity: updatedInventory[inventoryIndex].quantity - diff.difference
        };
      }
    });
    
    // Save all updates
    setReceipts(receipts.map(receipt =>
      receipt.id === updatedReceipt.id ? updatedReceipt : receipt
    ));
    
    // Update transactions array based on whether we're updating or adding
    if (existingTransactionIndex !== -1) {
      const newTransactions = [...transactions];
      newTransactions[existingTransactionIndex] = updatedTransaction;
      setTransactions(newTransactions);
    } else {
      setTransactions([...transactions, updatedTransaction]);
    }
    
    setInventory(updatedInventory);
    setShowReceiptModal(false);
    setEditingReceipt(null);
    resetReceiptForm();
  };

  // Update the deleteReceipt function to handle linked transactions and restore inventory
  const deleteReceipt = (id: string) => {
    if (window.confirm("Are you sure you want to delete this receipt?")) {
      const receiptToDelete = receipts.find(receipt => receipt.id === id);
      
      if (receiptToDelete) {
        // Restore inventory quantities
        const updatedInventory = [...inventory];
        receiptToDelete.items.forEach(item => {
          const inventoryIndex = updatedInventory.findIndex(invItem => invItem.id === item.id);
          if (inventoryIndex !== -1) {
            updatedInventory[inventoryIndex] = {
              ...updatedInventory[inventoryIndex],
              quantity: updatedInventory[inventoryIndex].quantity + item.quantity
            };
          }
        });
        
        // Delete linked transaction if exists
        if (receiptToDelete.transactionId) {
          setTransactions(transactions.filter(
            transaction => transaction.id !== receiptToDelete.transactionId
          ));
        }
        
        // Delete receipt and update inventory
        setReceipts(receipts.filter(receipt => receipt.id !== id));
        setInventory(updatedInventory);
      } else {
        setReceipts(receipts.filter(receipt => receipt.id !== id));
      }
    }
  };

  // Update reset receipt form function
  const resetReceiptForm = () => {
    setReceiptFormData({
      date: new Date().toISOString().split('T')[0],
      customerName: "",
      items: [],
      totalAmount: 0,
      isNewCustomer: false,
      newCustomerData: {
        email: "",
        phone: "",
        address: "",
        notes: ""
      }
    });
  };

  // Handle inventory form changes
  const handleInventoryFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setInventoryFormData({
      ...inventoryFormData,
      [name]: value,
    });
  };
  
  // Handle transaction form changes
  const handleTransactionFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setTransactionFormData({
      ...transactionFormData,
      [name]: value,
    });
  };

  // Update handle receipt form changes
  const handleReceiptFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    // Handle customer selection dropdown
    if (name === "customerSelect") {
      if (value === "new") {
        // Creating new customer
        setReceiptFormData({
          ...receiptFormData,
          isNewCustomer: true,
          customerId: undefined,
          customerName: ""
        });
      } else if (value) {
        // Selected existing customer
        const selectedCustomer = customers.find(c => c.id === value);
        if (selectedCustomer) {
          setReceiptFormData({
            ...receiptFormData,
            isNewCustomer: false,
            customerId: selectedCustomer.id,
            customerName: selectedCustomer.name
          });
        }
      }
    } 
    // Handle nested new customer data fields
    else if (name.startsWith("newCustomer.")) {
      const field = name.split(".")[1];
      setReceiptFormData({
        ...receiptFormData,
        newCustomerData: {
          ...receiptFormData.newCustomerData!,
          [field]: value
        }
      });
    } 
    // Handle all other fields
    else {
      setReceiptFormData({
        ...receiptFormData,
        [name]: value,
      });
    }
  };

  // Calculate summary statistics
  const totalInventoryValue = inventory.reduce(
    (sum, item) => sum + item.costPrice * item.quantity,
    0
  );
  
  const totalSalesValue = transactions
    .filter(t => t.type === "income")
    .reduce((sum, t) => sum + t.amount, 0);
  
  const totalExpenses = transactions
    .filter(t => t.type === "expense")
    .reduce((sum, t) => sum + t.amount, 0);
  
  const profit = totalSalesValue - totalExpenses;

  // Format currency function
  const formatCurrency = (amount: number): string => {
    if (showUsdPrices || selectedCurrency.code === "USD") {
      return `${selectedCurrency.symbol}${amount.toFixed(2)}`;
    } else {
      // Convert from USD to selected currency
      const convertedAmount = amount * (selectedCurrency.rate || 1);
      return `${selectedCurrency.symbol}${convertedAmount.toFixed(2)}`;
    }
  };

  // useEffect to set form data when editing an inventory item
  useEffect(() => {
    if (editingInventoryItem) {
      setInventoryFormData({
        name: editingInventoryItem.name,
        category: editingInventoryItem.category,
        quantity: editingInventoryItem.quantity,
        costPrice: editingInventoryItem.costPrice,
        sellingPrice: editingInventoryItem.sellingPrice,
        sku: editingInventoryItem.sku,
      });
      setShowInventoryModal(true);
    }
  }, [editingInventoryItem]);
  
  // useEffect to set form data when editing a transaction
  useEffect(() => {
    if (editingTransaction) {
      setTransactionFormData({
        description: editingTransaction.description,
        type: editingTransaction.type,
        category: editingTransaction.category,
        amount: editingTransaction.amount,
        date: editingTransaction.date.toISOString().split('T')[0],
        relatedInventoryId: editingTransaction.relatedInventoryId,
        customerId: editingTransaction.customerId || "",
        quantity: editingTransaction.quantity || 1 // Add the quantity field with fallback to 1
        
      });
      setShowTransactionModal(true);
    }
  }, [editingTransaction]);

  // useEffect to set form data when editing a receipt
  useEffect(() => {
    if (editingReceipt) {
      setReceiptFormData({
        date: editingReceipt.date.toISOString().split('T')[0],
        customerId: editingReceipt.customerId,
        customerName: editingReceipt.customerName,
        items: editingReceipt.items,
        totalAmount: editingReceipt.totalAmount,
        isNewCustomer: false,
        newCustomerData: {
          email: "",
          phone: "",
          address: "",
          notes: ""
        }
      });
      setShowReceiptModal(true);
    }
  }, [editingReceipt]);

  // useEffect to set form data when editing a customer
  useEffect(() => {
    if (editingCustomer) {
      setCustomerFormData({
        name: editingCustomer.name,
        email: editingCustomer.email,
        phone: editingCustomer.phone,
        address: editingCustomer.address,
        notes: editingCustomer.notes
      });
      setShowCustomerModal(true);
    }
  }, [editingCustomer]);

  // useEffect to set form data when editing an invoice
  useEffect(() => {
    if (editingInvoice) {
      setInvoiceFormData({
        date: editingInvoice.date.toISOString().split('T')[0],
        dueDate: formatDateForInput(editingInvoice.dueDate) || 
        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        invoiceNumber: editingInvoice.invoiceNumber,
        customerId: editingInvoice.customerId,
        customerName: editingInvoice.customerName,
        items: editingInvoice.items,
        totalAmount: editingInvoice.totalAmount,
        notes: editingInvoice.notes,
        paymentTerms: editingInvoice.paymentTerms || "30 days", // Set default if none
        isNewCustomer: false,
        newCustomerData: {
          email: "",
          phone: "",
          address: "",
          notes: ""
        },
        isPaid: editingInvoice.isPaid || false,
        paidDate: editingInvoice.paidDate ? formatDateForInput(editingInvoice.paidDate) : ''
      });
      setShowInvoiceModal(true);
    }
  }, [editingInvoice]);

  // Close currency dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const dropdown = document.getElementById('currency-dropdown');
      if (dropdown && !dropdown.contains(event.target as Node)) {
        setShowCurrencyDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Add these filtered data states to keep the original data intact
  // Add near the beginning of the component after the other state declarations
  const [filteredInventory, setFilteredInventory] = useState<InventoryItem[]>([]);
  const [filteredTransactions, setFilteredTransactions] = useState<Transaction[]>([]);
  const [filteredReceipts, setFilteredReceipts] = useState<Receipt[]>([]);

  // Add filtered invoices state
  const [filteredInvoices, setFilteredInvoices] = useState<Invoice[]>([]);

  // Update useEffect to initialize filtered data when original data loads
  useEffect(() => {
    setFilteredInventory(inventory);
    setFilteredTransactions(transactions);
    setFilteredReceipts(receipts);
    setFilteredCategories(categories);
    setFilteredCustomers(customers);
    setFilteredInvoices(invoices);
  }, [inventory, transactions, receipts, categories, customers, invoices]);

  // Add this useEffect for search functionality
  useEffect(() => {
    if (searchQuery.trim() === '') {
      // If search is empty, show all data
      setFilteredInventory(inventory);
      setFilteredTransactions(transactions);
      setFilteredReceipts(receipts);
      setFilteredCategories(categories);
      setFilteredCustomers(customers);
      setFilteredInvoices(invoices);
      return;
    }
    
    const query = searchQuery.toLowerCase().trim();
    
    // Filter inventory items
    const matchedInventory = inventory.filter(item => 
      item.name.toLowerCase().includes(query) || 
      item.category.toLowerCase().includes(query) || 
      item.sku.toLowerCase().includes(query)
    );
    setFilteredInventory(matchedInventory);
    
    // Filter transactions
    const matchedTransactions = transactions.filter(transaction => 
      transaction.description.toLowerCase().includes(query) || 
      transaction.category.toLowerCase().includes(query) || 
      transaction.type.toLowerCase().includes(query) ||
      transaction.amount.toString().includes(query)
    );
    setFilteredTransactions(matchedTransactions);
    
    // Filter receipts
    const matchedReceipts = receipts.filter(receipt => 
      receipt.customerName.toLowerCase().includes(query) || 
      receipt.customerId.toLowerCase().includes(query) ||
      receipt.totalAmount.toString().includes(query) ||
      // Also search items within receipts
      receipt.items.some(item => 
        item.name.toLowerCase().includes(query) ||
        item.price.toString().includes(query)
      )
    );
    setFilteredReceipts(matchedReceipts);

    // Filter categories
    const matchedCategories = categories.filter(category => 
      category.name.toLowerCase().includes(query) || 
      category.description.toLowerCase().includes(query) ||
      category.type.toLowerCase().includes(query)
    );
    setFilteredCategories(matchedCategories);

    // Filter customers
    const matchedCustomers = customers.filter(customer => 
      customer.name.toLowerCase().includes(query) || 
      customer.email.toLowerCase().includes(query) || 
      customer.phone.toLowerCase().includes(query) ||
      customer.address.toLowerCase().includes(query)
    );
    setFilteredCustomers(matchedCustomers);

    // Filter invoices
    const matchedInvoices = invoices.filter(invoice =>
      invoice.invoiceNumber.toLowerCase().includes(query) ||
      invoice.customerName.toLowerCase().includes(query) ||
      invoice.notes.toLowerCase().includes(query) ||
      invoice.totalAmount.toString().includes(query) ||
      invoice.items.some(item =>
        item.name.toLowerCase().includes(query)
      )
    );
    setFilteredInvoices(matchedInvoices);
  }, [searchQuery, inventory, transactions, receipts, categories, customers, invoices]);

  // Add a stats object to display search results count 
  const searchStats = {
    inventory: searchQuery ? `${filteredInventory.length} of ${inventory.length}` : `${inventory.length} items`,
    transactions: searchQuery ? `${filteredTransactions.length} of ${transactions.length}` : `${transactions.length} records`,
    receipts: searchQuery ? `${filteredReceipts.length} of ${receipts.length}` : `${receipts.length} records`,
    categories: searchQuery ? `${filteredCategories.length} of ${categories.length}` : `${categories.length} categories`,
    customers: searchQuery ? `${filteredCustomers.length} of ${customers.length}` : `${customers.length} customers`,
    invoices: searchQuery ? `${filteredInvoices.length} of ${invoices.length}` : `${invoices.length} invoices`,
    budgets: searchQuery ? `${filteredBudgets.length} of ${budgets.length}` : `${budgets.length} budgets`
  };

  useEffect(() => {
    const filtered = employees.filter(e =>
      e.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      e.position.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setFilteredEmployees(filtered);
  }, [employees, searchQuery]);
  

  // Add functions to manage categories
  const addCategory = () => {
    const newCategory: Category = {
      id: `cat-${Date.now()}`,
      name: categoryFormData.name,
      description: categoryFormData.description,
      type: categoryFormData.type,
      color: categoryFormData.color
    };
    
    setCategories([...categories, newCategory]);
    setShowCategoryModal(false);
    resetCategoryForm();
  };

  const updateCategory = () => {
    if (!editingCategory) return;
    
    const updatedCategory: Category = {
      ...editingCategory,
      name: categoryFormData.name,
      description: categoryFormData.description,
      type: categoryFormData.type,
      color: categoryFormData.color
    };
    
    setCategories(categories.map(category => 
      category.id === updatedCategory.id ? updatedCategory : category
    ));
    
    setShowCategoryModal(false);
    setEditingCategory(null);
    resetCategoryForm();
  };

  const deleteCategory = (id: string) => {
    // Check if the category is in use before deleting
    const isUsedInInventory = inventory.some(item => item.category === id);
    const isUsedInTransactions = transactions.some(transaction => transaction.category === id);
    
    if (isUsedInInventory || isUsedInTransactions) {
      alert("This category is currently in use and cannot be deleted.");
      return;
    }
    
    if (window.confirm("Are you sure you want to delete this category?")) {
      setCategories(categories.filter(category => category.id !== id));
    }
  };

  const resetCategoryForm = () => {
    setCategoryFormData({
      name: "",
      description: "",
      type: "both",
      color: "blue-500"
    });
  };

  const handleCategoryFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setCategoryFormData({
      ...categoryFormData,
      [name]: value,
    });
  };

  const handleEmployeeFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setEmployeeFormData({ ...employeeFormData, [name]: value });
  };

  // Update useEffect for editingCategory
  useEffect(() => {
    if (editingCategory) {
      setCategoryFormData({
        name: editingCategory.name,
        description: editingCategory.description,
        type: editingCategory.type,
        color: editingCategory.color
      });
      setShowCategoryModal(true);
    }
  }, [editingCategory]);

  // Add functions to manage customers
  const addCustomer = () => {
    const newCustomer: Customer = {
      id: uuidv4(),
      name: customerFormData.name,
      email: customerFormData.email,
      phone: customerFormData.phone,
      address: customerFormData.address,
      notes: customerFormData.notes,
      createdAt: new Date(),
      totalPurchases: 0
    };
    
    setCustomers([...customers, newCustomer]);
    setShowCustomerModal(false);
    resetCustomerForm();
  };

  const updateCustomer = () => {
    if (!editingCustomer) return;
    
    const updatedCustomer: Customer = {
      ...editingCustomer,
      name: customerFormData.name,
      email: customerFormData.email,
      phone: customerFormData.phone,
      address: customerFormData.address,
      notes: customerFormData.notes
    };
    
    setCustomers(customers.map(customer => 
      customer.id === updatedCustomer.id ? updatedCustomer : customer
    ));
    
    setShowCustomerModal(false);
    setEditingCustomer(null);
    resetCustomerForm();
  };

  const deleteCustomer = (id: string) => {
    // Check if customer has receipts before deletion
    const hasReceipts = receipts.some(receipt => receipt.customerId === id);
    
    if (hasReceipts) {
      alert("This customer has associated receipts and cannot be deleted.");
      return;
    }
    
    if (window.confirm("Are you sure you want to delete this customer?")) {
      setCustomers(customers.filter(customer => customer.id !== id));
    }
  };

  const resetCustomerForm = () => {
    setCustomerFormData({
      name: "",
      email: "",
      phone: "",
      address: "",
      notes: ""
    });
  };

  const handleCustomerFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setCustomerFormData({
      ...customerFormData,
      [name]: value,
    });
  };

  // Add functions to manage invoices
  const addInvoice = () => {
    // Create new customer if needed
    if (invoiceFormData.isNewCustomer && invoiceFormData.customerName) {
      const newCustomerId = uuidv4();
      const newCustomer: Customer = {
        id: newCustomerId,
        name: invoiceFormData.customerName,
        email: invoiceFormData.newCustomerData?.email || "",
        phone: invoiceFormData.newCustomerData?.phone || "",
        address: invoiceFormData.newCustomerData?.address || "",
        notes: invoiceFormData.newCustomerData?.notes || "",
        createdAt: new Date(),
        totalPurchases: 0
      };
      
      // Update customers list
      setCustomers([...customers, newCustomer]);
      
      // Update invoice customer ID
      invoiceFormData.customerId = newCustomerId;
    }
    
    const newInvoice: Invoice = {
      ...invoiceFormData,
      id: uuidv4(),
      invoiceNumber: generateInvoiceNumber(businessInfo),
      date: new Date(invoiceFormData.date),
      dueDate: new Date(invoiceFormData.dueDate), // Convert string to Date
      totalAmount: Number(invoiceFormData.totalAmount),
      isPaid: invoiceFormData.isPaid,
      paidTimestamp: invoiceFormData.isPaid ? (invoiceFormData.paidTimestamp || new Date().toISOString()) : undefined,
      paidDate: invoiceFormData.isPaid && invoiceFormData.paidDate ? new Date(invoiceFormData.paidDate) : undefined,
      items: invoiceFormData.items.map(item => ({
        ...item,
        quantity: Number(item.quantity),
        price: Number(item.price)
      }))
    };
    
    setInvoices([...invoices, newInvoice]);

    // Create a transaction if the invoice is marked as paid
  if (invoiceFormData.isPaid) {
    const newTransaction: Transaction = {
      id: uuidv4(),
      date: new Date(invoiceFormData.paidDate),
      description: `Payment received for Invoice #${invoiceFormData.invoiceNumber}`,
      type: "income",
      category: "sales", // Default category - you might want to map this to a proper category ID
      amount: invoiceFormData.totalAmount,
      customerId: newInvoice.customerId,
      relatedInvoiceId: newInvoice.id // Link to the invoice
    };
    
    setTransactions([...transactions, newTransaction]);
  }
    setShowInvoiceModal(false);
    resetInvoiceForm();

    // Show success message
    toast.success(`Invoice ${invoiceFormData.invoiceNumber} created successfully`);
  };

  const updateInvoice = () => {
    if (!editingInvoice) return;
    
    // Check if invoice is payment-locked (paid and over 2 hours old)
    if (isInvoicePaymentLocked(editingInvoice)) {
      toast.error("This invoice was paid over 2 hours ago and can no longer be modified");
      setShowInvoiceModal(false);
      setEditingInvoice(null);
      return;
    }

    // Handle new customer creation if needed
    if (invoiceFormData.isNewCustomer && invoiceFormData.customerName) {
      const newCustomerId = uuidv4();
      const newCustomer: Customer = {
        id: newCustomerId,
        name: invoiceFormData.customerName,
        email: invoiceFormData.newCustomerData?.email || "",
        phone: invoiceFormData.newCustomerData?.phone || "",
        address: invoiceFormData.newCustomerData?.address || "",
        notes: invoiceFormData.newCustomerData?.notes || "",
        createdAt: new Date(),
        totalPurchases: 0
      };
      
      // Update customers list
      setCustomers([...customers, newCustomer]);
      
      // Update invoice customer ID
      invoiceFormData.customerId = newCustomerId;
    }

    // Check if paid status changed from unpaid to paid
  const wasPaid = editingInvoice.isPaid;
  const isPaidNow = invoiceFormData.isPaid;
  const paidStatusChanged = !wasPaid && isPaidNow;

    const updatedInvoice: Invoice = {
      ...editingInvoice,
      date: new Date(invoiceFormData.date),
      dueDate: new Date(invoiceFormData.dueDate), // Convert string to Date
      invoiceNumber: editingInvoice.invoiceNumber || generateInvoiceNumber(businessInfo),
      customerId: invoiceFormData.customerId,
      customerName: invoiceFormData.customerName,
      items: invoiceFormData.items.map(item => ({
        ...item,
        quantity: Number(item.quantity),
        price: Number(item.price)
      })),
      totalAmount: Number(invoiceFormData.totalAmount),
      notes: invoiceFormData.notes,
      paymentTerms: invoiceFormData.paymentTerms, // Include payment terms
      isPaid: invoiceFormData.isPaid,
      paidTimestamp: (!editingInvoice.isPaid && invoiceFormData.isPaid) ? 
                 new Date().toISOString() : 
                 editingInvoice.paidTimestamp,
      paidDate: invoiceFormData.isPaid ? new Date(invoiceFormData.paidDate) : undefined
    };

    setInvoices(invoices.map(invoice =>
      invoice.id === updatedInvoice.id ? updatedInvoice : invoice
    ));

    if (paidStatusChanged) {
      const newTransaction: Transaction = {
        id: uuidv4(),
        date: new Date(invoiceFormData.paidDate),
        description: `Payment received for Invoice #${updatedInvoice.invoiceNumber}`,
        type: "income",
        category: "sales", // Default category
        amount: updatedInvoice.totalAmount,
        customerId: updatedInvoice.customerId,
        relatedInvoiceId: updatedInvoice.id
      };
      
      setTransactions([...transactions, newTransaction]);
    }

    setShowInvoiceModal(false);
    setEditingInvoice(null);
    resetInvoiceForm();

    // Show success notification
    toast.success(`Invoice ${updatedInvoice.invoiceNumber} updated successfully`);
  };

  const deleteInvoice = (id: string) => {
    const invoiceToDelete = invoices.find(invoice => invoice.id === id);
    
    if (invoiceToDelete && isInvoicePaymentLocked(invoiceToDelete)) {
      toast.error("This invoice was paid over 2 hours ago and can no longer be deleted");
      return;
    }
    
    if (window.confirm("Are you sure you want to delete this invoice?")) {
      setInvoices(invoices.filter(invoice => invoice.id !== id));
    }
  };

  const resetInvoiceForm = () => {
    setInvoiceFormData({
      date: new Date().toISOString().split('T')[0],
      dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // Default due date 30 days ahead
      invoiceNumber: "",
      customerId: "",
      customerName: "",
      items: [],
      totalAmount: 0,
      notes: "",
      paymentTerms: "30 days", // Default payment terms
      isNewCustomer: false,
      newCustomerData: {
        email: "",
        phone: "",
        address: "",
        notes: ""
      },
      isPaid: false, // Default to unpaid
    paidDate: ''    // Empty payment date
    });
    setTempInvoiceItem({ name: '', quantity: 1, price: 0 });
  };

  const handleInvoiceFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    // Handle customer selection dropdown
    if (name === "customerSelect") {
      if (value === "new") {
        // Creating new customer
        setInvoiceFormData({
          ...invoiceFormData,
          isNewCustomer: true,
          customerId: "",
          customerName: ""
        });
      } else if (value) {
        // Selected existing customer
        const selectedCustomer = customers.find(c => c.id === value);
        if (selectedCustomer) {
          setInvoiceFormData({
            ...invoiceFormData,
            isNewCustomer: false,
            customerId: selectedCustomer.id,
            customerName: selectedCustomer.name
          });
        }
      }
    } 
    // Handle nested new customer data fields
    else if (name.startsWith("newCustomer.")) {
      const field = name.split(".")[1];
      setInvoiceFormData({
        ...invoiceFormData,
        newCustomerData: {
          ...invoiceFormData.newCustomerData!,
          [field]: value
        }
      });
    } 
    // Handle all other fields
    else {
      setInvoiceFormData({
        ...invoiceFormData,
        [name]: value,
      });
    }
  };

  // Define animation variants for reuse
  const fadeIn = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { duration: 0.3 }
    },
    exit: { 
      opacity: 0,
      transition: { duration: 0.2 }
    }
  };

  const slideUp = {
    hidden: { y: 20, opacity: 0 },
    visible: { 
      y: 0, 
      opacity: 1,
      transition: { 
        type: "spring", 
        stiffness: 300, 
        damping: 24,
        duration: 0.3
      }
    },
    exit: { 
      y: 20, 
      opacity: 0,
      transition: { duration: 0.2 }
    }
  };

  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.05
      }
    }
  };

  const tableRowVariant = {
    hidden: { opacity: 0, y: 10 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { type: "spring", stiffness: 300, damping: 24 }
    }
  };

  const cardVariant = {
    hidden: { opacity: 0, y: 10 },
    visible: { 
      opacity: 1, 
      y: 0, 
      transition: { 
        type: "spring", 
        stiffness: 300, 
        damping: 24 
      }
    },
    hover: { 
      y: -4,
      boxShadow: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
      transition: { 
        type: "spring", 
        stiffness: 300, 
        damping: 20 
      }
    }
  };

const processPayroll = (payroll: Payroll) => {
  // Create transaction record
  const transaction: Transaction = {
    id: `txn-${Date.now()}`,
    type: 'expense',
    category: 'Salaries',
    amount: payroll.netPay,
    date: new Date(),
    description: `Salary payment for ${payroll.employeeName}`,
    relatedPayrollId: payroll.id
  };
  
  // Update payroll status with the correct union type
  const updatedPayroll: Payroll = {
    ...payroll,
    status: "paid" as "paid" | "pending", // Explicitly use the union type
    paymentDate: new Date(),
    transactionId: transaction.id
  };
  
  // Update state
  setTransactions([...transactions, transaction]);
  setPayrolls(payrolls.map(p => 
    p.id === payroll.id ? updatedPayroll : p
  ));
  
  // Show success message
  toast.success(`Payroll processed for ${payroll.employeeName}`);
};

const calculateNetPay = (formData: typeof payrollFormData) => {
  const gross = formData.baseSalary + formData.overtime;
  const deductions = formData.deductions;
  return gross - deductions;
};

// In form submission:
const netPay = calculateNetPay(payrollFormData);

  // Add state for receipt preview modal
  const [showReceiptPreview, setShowReceiptPreview] = useState(false);
  const [viewingReceipt, setViewingReceipt] = useState<Receipt | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // Add receipt card ref for generating image
  const cardRef = useRef<HTMLDivElement>(null);

  // Function to view receipt details
  const viewReceipt = (receipt: Receipt) => {
    setViewingReceipt(receipt);
    setShowReceiptPreview(true);
  };

  // Add this function in your component where other handler functions are defined


// Add this state to manage the visibility of the payroll detail modal
const [showPayrollDetailModal, setShowPayrollDetailModal] = useState(false);
const [selectedPayroll, setSelectedPayroll] = useState<Payroll | null>(null);
const payrollDetailRef = useRef<HTMLDivElement>(null);

// // Updated implementation of viewPayrollDetails function
const viewPayrollDetails = (payroll: Payroll) => {
  setSelectedPayroll(payroll);
  setShowPayrollDetailModal(true);
};

  // Function to generate and download receipt image
  const generateReceiptImage = async () => {
    if (!cardRef.current) return;
    setIsLoading(true);
    
    try {
      const content = cardRef.current;
      
      // First attempt with PNG
      let dataUrl;
      try {
        dataUrl = await toPng(content, {
          quality: 10,
          pixelRatio: 10,
          skipFonts: true, // Skip font embedding which causes issues
          fontEmbedCSS: "" // Empty string to avoid font embedding
        });
      } catch (pngError) {
        console.warn('PNG generation failed, falling back to JPEG:', pngError);
        // Fall back to JPEG if PNG fails
        dataUrl = await toJpeg(content, {
          quality: 10,
          pixelRatio: 10,
          skipFonts: true // Skip font embedding for JPEG as well
        });
      }
      
      const link = document.createElement('a');
      const receiptType = viewingReceipt?.type === "expense" ? "expense" : "receipt";
      const title = viewingReceipt?.customerName || receiptType;
      link.download = `${title}-${receiptType}-${Date.now()}.${dataUrl.startsWith('data:image/png') ? 'png' : 'jpg'}`;
      link.href = dataUrl;
      link.click();
    } catch (error) {
      console.error('Error generating image:', error);
      alert('Failed to generate image. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to generate and download payroll details as an image
const generatePayrollView = async () => {
  if (!payrollDetailRef.current) return;
  setIsLoading(true);
  
  try {
    const content = payrollDetailRef.current;
    
    // First attempt with PNG
    let dataUrl;
    try {
      dataUrl = await toPng(content, {
        quality: 10,
        pixelRatio: 10,
        skipFonts: true, // Skip font embedding which causes issues
        fontEmbedCSS: "" // Empty string to avoid font embedding
      });
    } catch (pngError) {
      console.warn('PNG generation failed, falling back to JPEG:', pngError);
      // Fall back to JPEG if PNG fails
      dataUrl = await toJpeg(content, {
        quality: 10,
        pixelRatio: 10,
        skipFonts: true // Skip font embedding for JPEG as well
      });
    }
    
    const link = document.createElement('a');
    const fileName = `payroll-${selectedPayroll?.employeeName.replace(/\s+/g, '-')}-${formatDate(selectedPayroll?.payPeriodEnd || new Date()).replace(/\s+/g, '-')}.${dataUrl.startsWith('data:image/png') ? 'png' : 'jpg'}`;
    link.download = fileName;
    link.href = dataUrl;
    link.click();
    
    toast.success('Payroll details downloaded successfully');
  } catch (error) {
    console.error('Error generating payroll image:', error);
    toast.error('Failed to generate payroll view. Please try again.');
  } finally {
    setIsLoading(false);
  }
};

  // Add this function to generate and download invoice image
const generateInvoiceImage = async (invoice: Invoice) => {
  // Get the card DOM element containing the invoice details
  const contentElement = invoiceCardRef.current;
  if (!contentElement) return;
  
  setIsLoading(true);
  
  try {
    // First attempt with PNG
    let dataUrl;
    try {
      dataUrl = await toPng(contentElement, {
        quality: 10,
        pixelRatio: 10,
        skipFonts: true,
        fontEmbedCSS: ""
      });
    } catch (pngError) {
      console.warn('PNG generation failed, falling back to JPEG:', pngError);
      // Fall back to JPEG if PNG fails
      dataUrl = await toJpeg(contentElement, {
        quality: 10,
        pixelRatio: 10,
        skipFonts: true
      });
    }
    
    // Create download link
    const link = document.createElement('a');
    const fileName = `Invoice-${invoice.invoiceNumber}-${invoice.customerName}-${Date.now()}.${dataUrl.startsWith('data:image/png') ? 'png' : 'jpg'}`;
    link.download = fileName;
    link.href = dataUrl;
    link.click();
  } catch (error) {
    console.error('Error generating invoice image:', error);
    alert('Failed to generate image. Please try again.');
  } finally {
    setIsLoading(false);
  }
};

// Add this ref to your state declarations
const budgetCardRef = useRef<HTMLDivElement>(null);

// Generate and download budget report as image
const generateBudgetReport = async (budget: Budget) => {
  // Get the card DOM element containing the budget details
  const contentElement = budgetCardRef.current;
  if (!contentElement) return;
  
  setIsLoading(true);
  
  try {
    // First attempt with PNG
    let dataUrl;
    try {
      dataUrl = await toPng(contentElement, {
        quality: 10,
        pixelRatio: 10,
        skipFonts: true,
        fontEmbedCSS: ""
      });
    } catch (pngError) {
      console.warn('PNG generation failed, falling back to JPEG:', pngError);
      // Fall back to JPEG if PNG fails
      dataUrl = await toJpeg(contentElement, {
        quality: 10,
        pixelRatio: 10,
        skipFonts: true
      });
    }
    
    // Create download link
    const link = document.createElement('a');
    const fileName = `Budget-${budget.name.replace(/\s+/g, '-')}-${formatDate(budget.startDate)}-${Date.now()}.${dataUrl.startsWith('data:image/png') ? 'png' : 'jpg'}`;
    link.download = fileName;
    link.href = dataUrl;
    link.click();
    
    toast.success('Budget report downloaded successfully');
  } catch (error) {
    console.error('Error generating budget image:', error);
    toast.error('Failed to generate budget report. Please try again.');
  } finally {
    setIsLoading(false);
  }
};

  // Update the state for receipts to include transaction-based receipts
  const [unifiedReceipts, setUnifiedReceipts] = useState<Receipt[]>([]);

  // Update useEffect to include transactions in the receipts tab
  useEffect(() => {
    // Combine actual receipts with transaction-based receipts
    const transactionReceipts = transactions
      .filter(transaction => !receipts.some(receipt => receipt.transactionId === transaction.id)) // Avoid duplicates
      .map(transaction => {
        // Create a receipt object from the transaction
        return {
          id: `auto-rcp-${transaction.id}`,
          date: transaction.date,
          customerId: transaction.customerId || "guest",
          customerName: transaction.customerId 
            ? customers.find(c => c.id === transaction.customerId)?.name || "Unknown Customer"
            : transaction.type === "income" ? "Walk-in Customer" : "Vendor",
          items: [], // Most transactions won't have items
          totalAmount: transaction.amount,
          transactionId: transaction.id,
          type: transaction.type,
          description: transaction.description,
          isAutoGenerated: true, // Mark as auto-generated for UI differentiation
        } as Receipt;
      });
    
    // Combine with regular receipts (which already have transactionId set)
    const allReceipts = [
      ...receipts.map(r => ({...r, type: "income" as const, isAutoGenerated: false})), 
      ...transactionReceipts
    ];
    
    // Sort by date, newest first
    const sortedReceipts = allReceipts.sort((a, b) => b.date.getTime() - a.date.getTime());
    
    setUnifiedReceipts(sortedReceipts);
  }, [transactions, receipts, customers]);

  // Update filtered receipts to use unifiedReceipts rather than just receipts
  useEffect(() => {
    setFilteredReceipts(unifiedReceipts);
  }, [inventory, transactions, unifiedReceipts, categories, customers]);

  // Add search functionality for unified receipts
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredReceipts(unifiedReceipts);
      return;
    }
    
    const query = searchQuery.toLowerCase().trim();
    
    // Filter unified receipts
    const matchedReceipts = unifiedReceipts.filter(receipt => 
      receipt.customerName.toLowerCase().includes(query) || 
      receipt.customerId.toLowerCase().includes(query) ||
      receipt.totalAmount.toString().includes(query) ||
      receipt.description?.toLowerCase().includes(query) ||
      // Also search items within receipts
      receipt.items.some(item => 
        item.name.toLowerCase().includes(query) ||
        item.price.toString().includes(query)
      )
    );
    setFilteredReceipts(matchedReceipts);
  }, [searchQuery, inventory, transactions, unifiedReceipts, categories, customers]);

  function checkPaidEditTimeLeft(paidTimestamp: string) {
    const paidDate = new Date(paidTimestamp);
    const currentDate = new Date();
    const timeDifference = currentDate.getTime() - paidDate.getTime();
    const daysDifference = timeDifference / (1000 * 3600 * 24);
    const editTimeLimit = 30; // Allow editing within 30 days of payment
    return editTimeLimit - daysDifference;
  }

  return (
    <div className={`min-h-screen bg-${currentTheme.background}`}>
      {/* Header - with gradient background */}
      <header className={`bg-gradient-to-r from-${currentTheme.background} to-${currentTheme.cardBackground} text-${currentTheme.text} shadow-lg border-b border-${currentTheme.border} sticky top-0 z-10`}>
        <div className="container mx-auto p-4 flex flex-col sm:flex-row justify-between items-center">
          <h1 className="text-2xl font-bold flex items-center mb-2 sm:mb-0">
            <FaBook className={`mr-2 text-${currentTheme.accent}`} />
            {businessInfo.name || "BookKeep Pro"}
          </h1>
          <div className="flex flex-col md:flex-row items-center space-x-0 space-y-2 sm:space-y-0 sm:space-x-4">
            {/* Data Actions */}
            <div className="flex space-x-2">
              {/* Theme Selector Button */}
              <div className="relative">
                <button
                  title="Change Theme"
                  onClick={() => setShowThemeSelector(!showThemeSelector)}
                  className={`px-2 py-1 rounded bg-${currentTheme.cardBackground} hover:bg-${currentTheme.background} text-${currentTheme.text} border border-${currentTheme.border} text-sm flex items-center`}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
                  </svg>
                  Theme
                </button>
                
                {showThemeSelector && (
                  <div className={`absolute left-0 md:right-0 mt-2 w-48 bg-${currentTheme.cardBackground} rounded-md shadow-lg z-10 py-1 border border-${currentTheme.border} overflow-hidden animate-fadeIn`}>
                    {themes.map((theme) => (
                      <button
                        key={theme.id}
                        className={`flex items-center justify-between w-full text-left px-4 py-3 text-sm hover:bg-${theme.background} transition-colors duration-150 ${
                          theme.id === currentTheme.id ? `bg-${theme.background} text-${theme.accent}` : `text-${theme.text}`
                        }`}
                        onClick={() => {
                          setCurrentTheme(theme);
                          setShowThemeSelector(false);
                          // Trigger save to persist theme choice
                          setTimeout(() => saveToLocalStorage(), 100);
                        }}
                      >
                        <span>{theme.name}</span>
                        <span className={`h-4 w-4 rounded-full bg-${theme.primary}`}></span>
                      </button>
                    ))}
                  </div>
                )}
              </div>
              
              <button
                title="Save Data"
                onClick={saveToLocalStorage}
                className={`px-2 py-1 rounded ${isSaving ? `bg-${currentTheme.success} text-${currentTheme.buttonText}` : `bg-${currentTheme.cardBackground} text-${currentTheme.text}`} hover:bg-${currentTheme.background} border border-${currentTheme.border} text-sm flex items-center`}
              >
                <FaSave className={`mr-1 ${isSaving ? 'animate-pulse' : ''}`} />
                {isSaving ? 'Saving...' : 'Save'}
              </button>
              
              <div className="relative" id="export-dropdown">
                <button
                  title="Export Data"
                  onClick={() => setShowExportDropdown(!showExportDropdown)}
                  className={`px-2 py-1 rounded bg-${currentTheme.cardBackground} hover:bg-${currentTheme.background} text-${currentTheme.text} border border-${currentTheme.border} text-sm flex items-center`}
                >
                  <FaDownload className="mr-1" /> Export
                  <FaChevronDown size={8} className="ml-1" />
                </button>
                
                {showExportDropdown && (
                  <div className={`absolute right-0 mt-1 w-48 bg-${currentTheme.cardBackground} rounded shadow-lg z-20 py-1 border border-${currentTheme.border}`}>
                    <h3 className={`px-3 py-1 text-xs text-${currentTheme.accent} font-semibold border-b border-${currentTheme.border}`}>
                      Export Options
                    </h3>
                    
                    {/* JSON option */}
                    <button
                      className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                      onClick={() => {
                        exportData('json');
                        setShowExportDropdown(false);
                      }}
                    >
                      <span className="mr-2">📄</span> Complete Backup (JSON)
                    </button>
                    
                    {/* Excel-ready options */}
                    <div className={`border-t border-${currentTheme.border} mt-1 pt-1`}>
                      <p className={`px-3 py-1 text-xs text-${currentTheme.text} opacity-70`}>Excel-Ready (CSV):</p>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-all');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.success}`} /> All Data
                      </button>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-inventory');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.primary}`} /> Inventory Only
                      </button>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-transactions');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.accent}`} /> Transactions Only
                      </button>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-receipts');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.secondary}`} /> Receipts Only
                      </button>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-customers');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.warning}`} /> Customers Only
                      </button>
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-invoices');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.buttonText}`} /> Invoices Only
                      </button>
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-budgets');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.secondary}`} /> Budgets Only
                      </button>
                    </div>
                  </div>
                )}
              </div>
              
              <label className={`px-2 py-1 rounded bg-${currentTheme.cardBackground} hover:bg-${currentTheme.background} text-${currentTheme.text} border border-${currentTheme.border} text-sm flex items-center cursor-pointer`}>
                <FaUpload className="mr-1" /> Import
                <input 
                  type="file"
                  accept=".json"
                  onChange={importData}
                  className="hidden"
                />
              </label>
            </div>
            
            {/* Currency Selector */}
            <div className="relative" id="currency-dropdown">
              <button 
                className={`flex items-center bg-${currentTheme.cardBackground} hover:bg-${currentTheme.background} text-${currentTheme.text} px-3 py-2 rounded transition-all duration-200 border border-${currentTheme.border} text-sm`}
                onClick={() => setShowCurrencyDropdown(!showCurrencyDropdown)}
              >
                <FaDollarSign className={`mr-1 text-${currentTheme.accent}`} />
                <span className="mr-1">{selectedCurrency.code}</span>
                <FaChevronDown size={12} className={`transform transition-transform duration-200 ${showCurrencyDropdown ? 'rotate-180' : ''}`} />
              </button>
              
              {showCurrencyDropdown && (
                <div className={`absolute right-0 mt-2 w-48 bg-${currentTheme.cardBackground} rounded-md shadow-lg z-10 py-1 border border-${currentTheme.border} overflow-hidden animate-fadeIn`}>
                  {currencies.map((currency) => (
                    <button
                      key={currency.code}
                      className={`flex items-center justify-between w-full text-left px-4 py-2 text-sm hover:bg-${currentTheme.background} transition-colors duration-150 ${
                        currency.code === selectedCurrency.code ? `bg-${currentTheme.background} text-${currentTheme.accent}` : `text-${currentTheme.text}`
                      }`}
                      onClick={() => {
                        setSelectedCurrency(currency);
                        setShowUsdPrices(currency.code === "USD"); // Only show raw USD prices for USD
                        setShowCurrencyDropdown(false);
                      }}
                    >
                      <span>{currency.name}</span>
                      <span className="text-gray-400 font-medium">{currency.symbol}</span>
                    </button>
                  ))}
                  <div className={`px-4 py-2 border-t border-${currentTheme.border} mt-1`}>
                    <label className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={showUsdPrices}
                        onChange={(e) => setShowUsdPrices(e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className={`relative w-10 h-5 bg-${currentTheme.border} peer-checked:bg-${currentTheme.primary} rounded-full peer-focus:outline-none transition-colors duration-200`}>
                        <div className={`absolute left-0.5 top-0.5 bg-white w-4 h-4 rounded-full transition-transform duration-200 ${showUsdPrices ? 'translate-x-0' : 'translate-x-5'}`}></div>
                      </div>
                      <span className="ml-2 text-xs">
                        {showUsdPrices ? 'Show USD values' : 'Show converted values'}
                      </span>
                    </label>
                  </div>
                </div>
              )}
            </div>

            <div className="relative w-full sm:w-auto">
              <FaSearch className={`absolute left-3 top-3 ${searchQuery ? `text-${currentTheme.accent}` : 'text-gray-400'}`} />
              <input
                type="text"
                placeholder="Search..."
                className={`pl-10 pr-10 py-2 rounded-md bg-${currentTheme.cardBackground} text-${currentTheme.text} placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary} border ${searchQuery ? `border-${currentTheme.accent}` : `border-${currentTheme.border}`} w-full sm:w-48 text-sm`}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              {searchQuery && (
                <button
                  className={`absolute right-2 top-2 text-${currentTheme.text} hover:text-${currentTheme.accent} rounded p-1`}
                  onClick={() => setSearchQuery('')}
                  title="Clear search"
                >
                  <FaTimes size={16} />
                </button>
              )}
            </div>
          </div>
        </div>
        
        {/* Data status indicator */}
        <div className={`bg-${currentTheme.background} text-xs text-gray-400 px-4 py-1 flex justify-between`}>
          <div>
            {lastSaved ? (
              <span>Last saved: {lastSaved.toLocaleTimeString()}</span>
            ) : (
              <span>Not saved yet</span>
            )}
          </div>
          <div className="flex items-center">
            {businessInfo.type && (
              <span className="mr-3">Business Type: {businessInfo.type}</span>
            )}
            {dataChanged && <span className="text-amber-400">Unsaved changes</span>}
          </div>
        </div>
      </header>

      {/* Main Content - wrap in AnimatePresence */}
      <AnimatePresence mode="wait">
        <motion.div 
          key={activeTab}
          initial="hidden"
          animate="visible"
          exit="exit"
          variants={fadeIn}
          className="container mx-auto px-4 py-8 flex flex-col lg:flex-row"
        >
          {/* Sidebar Navigation - animate it */}
          <motion.aside 
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ type: "spring", stiffness: 300, damping: 24 }}
            className={`w-full lg:w-64 bg-${currentTheme.cardBackground} rounded-lg shadow-md p-4 mb-6 lg:mb-0 lg:mr-8 border border-${currentTheme.border}`}
          >
            <nav>
              <ul className="space-y-2">
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "dashboard" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("dashboard")}
                  >
                    <FaHome className="mr-3" />
                    <span>Dashboard</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "inventory" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("inventory")}
                  >
                    <FaBoxOpen className="mr-3" />
                    <span>Inventory</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "transactions" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("transactions")}
                  >
                    <FaBook className="mr-3" />
                    <span>Transactions</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "receipts" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("receipts")}
                  >
                    <FaBook className="mr-3" />
                    <span>Receipts</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "categories" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("categories")}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                    <span>Categories</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "customers" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("customers")}
                  >
                    <FaUsers className="mr-3" />
                    <span>Customers</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "invoices" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("invoices")}
                  >
                    <FaDollarSign className="mr-3" />
                    <span>Invoices</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "budgets" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("budgets" as any)}
                  >
                    <FaChartPie className="mr-3" />
                    <span>Budgets</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "payrolls" 
                        ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` 
                        : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("payrolls")}
                  >
                    <FaMoneyBillWave className="mr-3" />
                    <span>Payroll</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${activeTab === "employees" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`}`}
                    onClick={() => setActiveTab("employees")}
                  >
                    <FaUsers className="mr-3" />
                    <span>Employees</span>
                  </button>
                </li>
              </ul>
            </nav>
          </motion.aside>

          {/* Main Content Area */}
          <motion.div 
            variants={slideUp}
            className={`flex-1 bg-${currentTheme.cardBackground} rounded-lg shadow-md p-6 border border-${currentTheme.border}`}
          >
            {/* Dashboard Tab */}
            {activeTab === "dashboard" && (
              <motion.div 
                variants={fadeIn} 
                className="space-y-6"
              >
                <h2 className={`text-2xl font-bold mb-4 flex items-center text-${currentTheme.text}`}>
                  <FaChartLine className={`mr-2 text-${currentTheme.accent}`} />
                  {businessInfo.name}'s Dashboard
                </h2>
              
                {/* Business Info Card */}
                <motion.div
  variants={cardVariant}
  whileHover="hover" 
  className={`bg-${currentTheme.background} rounded-lg shadow-md p-4 sm:p-6 border border-${currentTheme.border}`}
>
  <div className="flex flex-col sm:flex-row justify-between items-start gap-3">
    <div className="w-full">
      <div className="flex flex-col sm:flex-row sm:items-center justify-between w-full mb-2">
        <h3 className={`text-base sm:text-lg font-semibold text-${currentTheme.text}`}>{businessInfo.name}</h3>
        
        <button 
          onClick={() => {
            setBusinessFormData({
              ...businessInfo,
              established: businessInfo.established || new Date().getFullYear().toString(),
              baseCurrency: businessInfo.baseCurrency || ""
            });
            setShowBusinessOnboarding(true);
          }}
          className={`text-${currentTheme.accent} hover:text-${currentTheme.primary} text-xs sm:text-sm flex items-center mt-1 sm:mt-0`}
        >
          <FaEdit className="mr-1" size={12} /> Edit
        </button>
      </div>
      
      <p className="text-sm text-gray-400">{businessInfo.type}</p>
      
      {businessInfo.address && (
        <p className="text-xs sm:text-sm text-gray-400 mt-2 flex items-start">
          <FaMapMarkerAlt className="mr-1 mt-0.5 flex-shrink-0" size={12} />
          <span className="break-words">{businessInfo.address}</span>
        </p>
      )}
      
      <div className="flex flex-col sm:flex-row mt-2 sm:space-x-4 space-y-2 sm:space-y-0">
        {businessInfo.phone && (
          <p className="text-xs sm:text-sm text-gray-400 flex items-center">
            <FaPhone className="mr-1 flex-shrink-0" size={12} />
            <span className="break-words">{businessInfo.phone}</span>
          </p>
        )}
        
        {businessInfo.email && (
          <p className="text-xs sm:text-sm text-gray-400 flex items-center">
            <FaEnvelope className="mr-1 flex-shrink-0" size={12} />
            <span className="break-words">{businessInfo.email}</span>
          </p>
        )}
      </div>
    </div>
  </div>
</motion.div>
              
                {/* Summary Cards with staggered animation */}
                <motion.div 
  variants={staggerContainer}
  initial="hidden"
  animate="visible"
  className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6"
>
  {/* Inventory Value Card */}
  <motion.div
    variants={cardVariant}
    whileHover="hover"
    className={`bg-${currentTheme.background} rounded-lg shadow-md overflow-hidden`}
  >
    <div className={`p-4 md:p-6 relative`}>
      <div className={`absolute top-0 left-0 w-1.5 h-full bg-${currentTheme.primary}`}></div>
      
      <div className="flex flex-col h-full ml-2">
        <div className="flex items-center justify-between mb-1">
          <h3 className="text-xs sm:text-sm text-gray-400 font-medium">Inventory Value</h3>
          <div className={`p-1 rounded-full bg-${currentTheme.primary}/10`}>
            <svg xmlns="http://www.w3.org/2000/svg" className={`h-3.5 w-3.5 text-${currentTheme.primary}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
            </svg>
          </div>
        </div>
        
        <motion.p 
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.3 }}
          className={`text-xl sm:text-2xl md:text-3xl font-bold text-${currentTheme.text}`}
        >
          {formatCurrency(totalInventoryValue)}
        </motion.p>
        
        <div className="text-xs text-gray-400 mt-2 flex items-center">
          <span>Total value of {inventory.length} items</span>
        </div>
      </div>
    </div>
  </motion.div>
  
  {/* Total Sales Card */}
  <motion.div
    variants={cardVariant}
    whileHover="hover"
    className={`bg-${currentTheme.background} rounded-lg shadow-md overflow-hidden`}
  >
    <div className={`p-4 md:p-6 relative`}>
      <div className={`absolute top-0 left-0 w-1.5 h-full bg-${currentTheme.success}`}></div>
      
      <div className="flex flex-col h-full ml-2">
        <div className="flex items-center justify-between mb-1">
          <h3 className="text-xs sm:text-sm text-gray-400 font-medium">Total Sales</h3>
          <div className={`p-1 rounded-full bg-${currentTheme.success}/10`}>
            <svg xmlns="http://www.w3.org/2000/svg" className={`h-3.5 w-3.5 text-${currentTheme.success}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
        </div>
        
        <motion.p 
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.3 }}
          className={`text-xl sm:text-2xl md:text-3xl font-bold text-${currentTheme.text}`}
        >
          {formatCurrency(totalSalesValue)}
        </motion.p>
        
        <div className="text-xs text-gray-400 mt-2 flex items-center">
          <span>From {transactions.filter(t => t.type === "income").length} transactions</span>
        </div>
      </div>
    </div>
  </motion.div>
  
  {/* Expenses Card */}
  <motion.div
    variants={cardVariant}
    whileHover="hover"
    className={`bg-${currentTheme.background} rounded-lg shadow-md overflow-hidden`}
  >
    <div className={`p-4 md:p-6 relative`}>
      <div className={`absolute top-0 left-0 w-1.5 h-full bg-${currentTheme.danger}`}></div>
      
      <div className="flex flex-col h-full ml-2">
        <div className="flex items-center justify-between mb-1">
          <h3 className="text-xs sm:text-sm text-gray-400 font-medium">Total Expenses</h3>
          <div className={`p-1 rounded-full bg-${currentTheme.danger}/10`}>
            <svg xmlns="http://www.w3.org/2000/svg" className={`h-3.5 w-3.5 text-${currentTheme.danger}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
          </div>
        </div>
        
        <motion.p 
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.3 }}
          className={`text-xl sm:text-2xl md:text-3xl font-bold text-${currentTheme.text}`}
        >
          {formatCurrency(totalExpenses)}
        </motion.p>
        
        <div className="text-xs text-gray-400 mt-2 flex items-center">
          <span>From {transactions.filter(t => t.type === "expense").length} transactions</span>
        </div>
      </div>
    </div>
  </motion.div>
  
  {/* Profit Card */}
  <motion.div
    variants={cardVariant}
    whileHover="hover"
    className={`bg-${currentTheme.background} rounded-lg shadow-md overflow-hidden`}
  >
    <div className={`p-4 md:p-6 relative`}>
      <div className={`absolute top-0 left-0 w-1.5 h-full bg-${currentTheme.secondary}`}></div>
      
      <div className="flex flex-col h-full ml-2">
        <div className="flex items-center justify-between mb-1">
          <h3 className="text-xs sm:text-sm text-gray-400 font-medium">Net Profit</h3>
          <div className={`p-1 rounded-full ${profit >= 0 ? `bg-emerald-100` : `bg-rose-100`}`}>
            {profit >= 0 ? (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-emerald-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-rose-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6" />
              </svg>
            )}
          </div>
        </div>
        
        <motion.p 
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.3 }}
          className={`text-xl sm:text-2xl md:text-3xl font-bold ${profit >= 0 ? "text-emerald-400" : "text-rose-400"}`}
        >
          {formatCurrency(profit)}
        </motion.p>
        
        <div className={`text-xs mt-2 flex items-center ${profit >= 0 ? "text-emerald-400/70" : "text-rose-400/70"}`}>
          <span>
            {profit >= 0 
              ? `${Math.round((profit / totalSalesValue) * 100) || 0}% profit margin`
              : `${Math.round((Math.abs(profit) / totalExpenses) * 100) || 0}% loss ratio`}
          </span>
        </div>
      </div>
    </div>
  </motion.div>
</motion.div>
              
                {/* Recent Activity */}
                <div>
  <h3 className={`text-lg md:text-xl font-semibold mb-3 md:mb-4 text-${currentTheme.text} border-b border-${currentTheme.border} pb-2 flex items-center`}>
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
    </svg>
    Recent Activity
  </h3>
  
  {filteredTransactions.length === 0 ? (
    <div className={`flex flex-col items-center justify-center py-8 bg-${currentTheme.background}/30 rounded-lg border border-${currentTheme.border}`}>
      <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-gray-400 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
      </svg>
      <p className="text-gray-400 text-center">
        {searchQuery ? "No matching transactions found." : "No transactions recorded yet."}
      </p>
    </div>
  ) : (
    <div className="space-y-3">
      {/* Desktop view - traditional table for md screens and up */}
      <div className={`hidden md:block overflow-x-auto rounded-lg border border-${currentTheme.border}`}>
        <table className="w-full text-left">
          <thead>
            <tr className={`bg-${currentTheme.background}`}>
              <th className="p-3 text-xs text-gray-400 font-semibold uppercase tracking-wider">Date</th>
              <th className="p-3 text-xs text-gray-400 font-semibold uppercase tracking-wider">Description</th>
              <th className="p-3 text-xs text-gray-400 font-semibold uppercase tracking-wider">Category</th>
              <th className="p-3 text-xs text-gray-400 font-semibold uppercase tracking-wider text-right">Amount</th>
            </tr>
          </thead>
          <motion.tbody
            variants={staggerContainer}
            initial="hidden"
            animate="visible"
          >
            {filteredTransactions.slice(0, 5).map((transaction) => (
              <motion.tr 
                key={transaction.id} 
                variants={tableRowVariant}
                className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/50`}
              >
                <td className="p-3 text-sm text-gray-300">{transaction.date.toLocaleDateString()}</td>
                <td className="p-3 text-sm text-gray-300">{transaction.description}</td>
                <td className="p-3 text-sm text-gray-300">
                  <span className={`px-2 py-1 inline-block rounded-full text-xs bg-${currentTheme.background}/50`}>
                    {(() => {
                      const category = categories.find(c => c.id === transaction.category);
                      return category ? category.name : transaction.category;
                    })()}
                  </span>
                </td>
                <td className={`p-3 text-sm font-medium text-right ${transaction.type === "income" ? "text-emerald-400" : "text-rose-400"}`}>
                  {transaction.type === "income" ? "+" : "-"}{formatCurrency(transaction.amount)}
                </td>
              </motion.tr>
            ))}
          </motion.tbody>
        </table>
      </div>
      
      {/* Mobile view - card-based layout for sm screens and below */}
      <div className="md:hidden space-y-3">
        {filteredTransactions.slice(0, 5).map((transaction) => (
          <motion.div
            key={transaction.id}
            variants={tableRowVariant}
            className={`p-3 rounded-lg bg-${currentTheme.background}/30 border border-${currentTheme.border} hover:bg-${currentTheme.background}/50`}
          >
            <div className="flex justify-between items-start mb-2">
              <span className="text-xs text-gray-400">{transaction.date.toLocaleDateString()}</span>
              <span className={`text-sm font-medium ${transaction.type === "income" ? "text-emerald-400" : "text-rose-400"}`}>
                {transaction.type === "income" ? "+" : "-"}{formatCurrency(transaction.amount)}
              </span>
            </div>
            <div className="mb-2">
              <p className="text-sm text-gray-300 truncate">{transaction.description}</p>
            </div>
            <div>
              <span className={`px-2 py-0.5 inline-block rounded-full text-xs bg-${currentTheme.background}`}>
                {(() => {
                  const category = categories.find(c => c.id === transaction.category);
                  return category ? category.name : transaction.category;
                })()}
              </span>
            </div>
          </motion.div>
        ))}
      </div>
      
      {/* View all link */}
      <div className="flex justify-center md:justify-end pt-2">
        <button 
          onClick={() => setActiveTab("transactions")} 
          className={`text-xs text-${currentTheme.accent} hover:text-${currentTheme.primary} flex items-center`}
        >
          View all transactions
          <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>
  )}
</div>
              </motion.div>
            )}

            {/* Inventory tab */}
            {/* Inventory tab */}
{activeTab === "inventory" && (
  <motion.div variants={fadeIn}>
    <div className={`flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 border-b border-${currentTheme.border} pb-3 gap-4`}>
      <div>
        <h2 className={`text-xl sm:text-2xl font-bold text-${currentTheme.text}`}>Inventory Management</h2>
        {searchQuery && (
          <p className={`text-xs sm:text-sm text-${currentTheme.accent} mt-1`}>
            Showing {searchStats.inventory} {Number(searchStats.inventory) === 1 ? 'item' : 'items'}
          </p>
        )}
      </div>
      <button 
        className={`flex items-center justify-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm transition-colors duration-200 w-full sm:w-auto`}
        onClick={() => {
          setEditingInventoryItem(null);
          resetInventoryForm();
          setShowInventoryModal(true);
        }}
      >
        <FaPlus className="mr-2" /> Add Item
      </button>
    </div>
    
    {filteredInventory.length === 0 ? (
      <motion.div 
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
        className={`text-center py-8 sm:py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
      >
        {searchQuery ? (
          <>
            <FaSearch className="mx-auto text-3xl sm:text-4xl text-gray-500 mb-4" />
            <h3 className={`text-lg sm:text-xl font-medium text-${currentTheme.text}`}>No matching inventory items</h3>
            <p className="text-gray-400 mt-2 px-4 max-w-md mx-auto">Try different search terms or clear filters to see all items</p>
          </>
        ) : (
          <>
            <FaBoxOpen className="mx-auto text-3xl sm:text-4xl text-gray-500 mb-4" />
            <h3 className={`text-lg sm:text-xl font-medium text-${currentTheme.text}`}>No inventory items yet</h3>
            <p className="text-gray-400 mt-2 px-4 max-w-md mx-auto">Add your first inventory item to get started</p>
            <button 
              className={`mt-4 flex items-center justify-center mx-auto bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm transition-colors duration-200`}
              onClick={() => {
                setEditingInventoryItem(null);
                resetInventoryForm();
                setShowInventoryModal(true);
              }}
            >
              <FaPlus className="mr-2" /> Add First Item
            </button>
          </>
        )}
      </motion.div>
    ) : (
      <>
        {/* Stock Status Legend */}
        <div className="flex flex-wrap items-center gap-2 sm:gap-4 mb-3 text-xs">
          <span className="text-gray-400">Status indicators: </span>
          <div className="flex items-center">
            <span className={`inline-block w-3 h-3 rounded-full bg-${currentTheme.danger} mr-1`}></span>
            <span className="text-gray-300">Out of Stock</span>
          </div>
          <div className="flex items-center">
            <span className={`inline-block w-3 h-3 rounded-full bg-${currentTheme.warning} mr-1`}></span>
            <span className="text-gray-300">Low Stock (≤5)</span>
          </div>
          <div className="flex items-center">
            <span className={`inline-block w-3 h-3 rounded-full bg-${currentTheme.success} mr-1`}></span>
            <span className="text-gray-300">In Stock</span>
          </div>
        </div>
        
        {/* Desktop table view (hidden on small screens) */}
        <div className={`hidden md:block overflow-x-auto rounded-lg border border-${currentTheme.border}`}>
          <table className="w-full text-left">
            <thead>
              <tr className={`bg-${currentTheme.background}`}>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Item Name</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">SKU</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Category</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider text-center">Status</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider text-center">Quantity</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Cost Price</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Selling Price</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Actions</th>
              </tr>
            </thead>
            <motion.tbody
              variants={staggerContainer}
              initial="hidden"
              animate="visible"
              className={`divide-y divide-${currentTheme.border}`}
            >
              {filteredInventory.map((item) => {
                // Determine stock status
                const stockStatus = 
                  item.quantity <= 0 ? "out" :
                  item.quantity <= 5 ? "low" :
                  "in";
                
                const statusColor = 
                  stockStatus === "out" ? currentTheme.danger :
                  stockStatus === "low" ? currentTheme.warning :
                  currentTheme.success;
                
                const statusText = 
                  stockStatus === "out" ? "Out of Stock" :
                  stockStatus === "low" ? "Low Stock" :
                  "In Stock";
                
                return (
                  <motion.tr 
                    key={item.id} 
                    variants={tableRowVariant}
                    className={`hover:bg-${currentTheme.background}/50 transition-colors`}
                  >
                    <td className={`px-4 py-3 text-sm font-medium text-${currentTheme.text}`}>{item.name}</td>
                    <td className="px-4 py-3 text-sm text-gray-400">{item.sku}</td>
                    <td className="px-4 py-3">
                      <span className={`px-2 py-1 inline-flex items-center rounded-full text-xs ${
                        (() => {
                          const category = categories.find(c => c.id === item.category);
                          return category 
                            ? `bg-${category.color}/20 text-${category.color} border border-${category.color}/30` 
                            : `bg-${currentTheme.primary}/20 text-${currentTheme.accent} border border-${currentTheme.primary}/30`;
                        })()
                      }`}>
                        {(() => {
                          const category = categories.find(c => c.id === item.category);
                          return category ? category.name : item.category;
                        })()}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-center">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs bg-${statusColor}/20 text-${statusColor} border border-${statusColor}/30`}>
                        <span className={`mr-1.5 w-2 h-2 rounded-full bg-${statusColor}`}></span>
                        {statusText}
                      </span>
                    </td>
                    <td className={`px-4 py-3 text-center text-sm ${
                      stockStatus === "out" ? `text-${currentTheme.danger}` :
                      stockStatus === "low" ? `text-${currentTheme.warning}` :
                      `text-${currentTheme.text}`
                    } font-medium`}>
                      {item.quantity}
                    </td>
                    <td className={`px-4 py-3 text-sm text-${currentTheme.text}`}>{formatCurrency(item.costPrice)}</td>
                    <td className={`px-4 py-3 text-sm text-${currentTheme.text}`}>{formatCurrency(item.sellingPrice)}</td>
                    <td className="px-4 py-3">
                      <div className="flex space-x-2">
                        <button 
                          className={`p-1.5 text-${currentTheme.accent} hover:text-${currentTheme.primary} hover:bg-${currentTheme.background} rounded transition-colors`}
                          onClick={() => setEditingInventoryItem(item)}
                          title="Edit item"
                        >
                          <FaEdit className="h-4 w-4" />
                        </button>
                        <button 
                          className={`p-1.5 text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 hover:bg-${currentTheme.background} rounded transition-colors`}
                          onClick={() => deleteInventoryItem(item.id)}
                          title="Delete item"
                        >
                          <FaTrash className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </motion.tr>
                );
              })}
            </motion.tbody>
          </table>
        </div>

        {/* Mobile card view (visible only on small screens) */}
        <div className="md:hidden space-y-3">
          <motion.div 
            variants={staggerContainer}
            initial="hidden" 
            animate="visible" 
            className="grid gap-3"
          >
            {filteredInventory.map((item) => {
              // Determine stock status for mobile view
              const stockStatus = 
                item.quantity <= 0 ? "out" :
                item.quantity <= 5 ? "low" :
                "in";
              
              const statusColor = 
                stockStatus === "out" ? currentTheme.danger :
                stockStatus === "low" ? currentTheme.warning :
                currentTheme.success;
              
              const statusText = 
                stockStatus === "out" ? "Out of Stock" :
                stockStatus === "low" ? "Low Stock" :
                "In Stock";
              
              return (
                <motion.div 
                  key={item.id} 
                  variants={tableRowVariant}
                  className={`p-4 rounded-lg border border-${currentTheme.border} bg-${currentTheme.background}/50 ${
                    stockStatus === "out" ? `border-l-4 border-l-${currentTheme.danger}` :
                    stockStatus === "low" ? `border-l-4 border-l-${currentTheme.warning}` :
                    ""
                  }`}
                >
                  <div className="flex justify-between items-start mb-2">
                    <div className={`text-sm sm:text-base font-medium text-${currentTheme.text}`}>{item.name}</div>
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs bg-${statusColor}/20 text-${statusColor} border border-${statusColor}/30`}>
                      <span className={`mr-1.5 w-2 h-2 rounded-full bg-${statusColor}`}></span>
                      {statusText}
                    </span>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2 mb-3 text-xs sm:text-sm">
                    <div>
                      <span className="text-gray-400">SKU:</span>
                      <span className="ml-1 text-gray-300">{item.sku}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Quantity:</span>
                      <span className={`ml-1 font-medium ${
                        stockStatus === "out" ? `text-${currentTheme.danger}` :
                        stockStatus === "low" ? `text-${currentTheme.warning}` :
                        `text-${currentTheme.text}`
                      }`}>{item.quantity}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Cost:</span>
                      <span className="ml-1 text-gray-300">{formatCurrency(item.costPrice)}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Price:</span>
                      <span className="ml-1 text-gray-300">{formatCurrency(item.sellingPrice)}</span>
                    </div>
                  </div>
                  
                  <div className="flex flex-wrap gap-2 mb-3">
                    {(() => {
                      const category = categories.find(c => c.id === item.category);
                      if (category) {
                        return (
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs bg-${category.color}/20 text-${category.color} border border-${category.color}/30`}>
                            <FaTag className="mr-1 h-3 w-3" />
                            {category.name}
                          </span>
                        );
                      }
                      return null;
                    })()}
                  </div>
                  
                  <div className="flex justify-end pt-2 border-t border-gray-700/30">
                    <div className="flex space-x-2">
                      <button 
                        className={`p-2 text-${currentTheme.accent} hover:text-${currentTheme.primary} hover:bg-${currentTheme.background} rounded transition-colors`}
                        onClick={() => setEditingInventoryItem(item)}
                      >
                        <FaEdit className="h-4 w-4" />
                      </button>
                      <button 
                        className={`p-2 text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 hover:bg-${currentTheme.background} rounded transition-colors`}
                        onClick={() => deleteInventoryItem(item.id)}
                      >
                        <FaTrash className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </motion.div>
        </div>

        {/* Pagination for larger inventory lists */}
        {filteredInventory.length > 20 && (
          <div className="mt-4 flex justify-center">
            <button 
              className={`px-4 py-2 text-sm text-${currentTheme.accent} hover:text-${currentTheme.primary} border border-${currentTheme.border} rounded-lg flex items-center hover:bg-${currentTheme.background} transition-colors`}
            >
              <FaChevronDown className="mr-1.5 h-3 w-3" /> 
              Load More Items
            </button>
          </div>
        )}
      </>
    )}
  </motion.div>
)}

            {/* Transaction tab */}
            {/* Transaction tab */}
{activeTab === "transactions" && (
  <motion.div variants={fadeIn}>
    <div className={`flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 border-b border-${currentTheme.border} pb-3 gap-4`}>
      <div>
        <h2 className={`text-xl sm:text-2xl font-bold text-${currentTheme.text}`}>Financial Transactions</h2>
        {searchQuery && (
          <p className={`text-xs sm:text-sm text-${currentTheme.accent} mt-1`}>
            Showing {searchStats.transactions} {Number(searchStats.transactions) === 1 ? 'result' : 'results'}
          </p>
        )}
      </div>
      <button 
        className={`flex items-center justify-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm transition-colors duration-200 w-full sm:w-auto`}
        onClick={() => {
          setEditingTransaction(null);
          resetTransactionForm();
          setShowTransactionModal(true);
        }}
      >
        <FaPlus className="mr-2" /> Add Transaction
      </button>
    </div>
    
    {filteredTransactions.length === 0 ? (
      <motion.div 
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
        className={`text-center py-8 sm:py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
      >
        {searchQuery ? (
          <>
            <FaSearch className="mx-auto text-3xl sm:text-4xl text-gray-500 mb-4" />
            <h3 className={`text-lg sm:text-xl font-medium text-${currentTheme.text}`}>No matching transactions</h3>
            <p className="text-gray-400 mt-2 px-4 max-w-md mx-auto">Try different search terms or clear filters to see all transactions</p>
          </>
        ) : (
          <>
            <FaBook className="mx-auto text-3xl sm:text-4xl text-gray-500 mb-4" />
            <h3 className={`text-lg sm:text-xl font-medium text-${currentTheme.text}`}>No transactions recorded</h3>
            <p className="text-gray-400 mt-2 px-4 max-w-md mx-auto">Add your first transaction to start tracking finances</p>
            <button 
              className={`mt-4 flex items-center justify-center mx-auto bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm transition-colors duration-200`}
              onClick={() => {
                setEditingTransaction(null);
                resetTransactionForm();
                setShowTransactionModal(true);
              }}
            >
              <FaPlus className="mr-2" /> Add First Transaction
            </button>
          </>
        )}
      </motion.div>
    ) : (
      <>
        {/* Desktop table view (hidden on small screens) */}
        <div className={`hidden md:block overflow-x-auto rounded-lg border border-${currentTheme.border}`}>
          <table className="w-full text-left">
            <thead>
              <tr className={`bg-${currentTheme.background}`}>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Date</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Description</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Category</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Details</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Amount</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Actions</th>
              </tr>
            </thead>
            <motion.tbody
              variants={staggerContainer}
              initial="hidden"
              animate="visible"
            >
              {filteredTransactions.map((transaction) => {
                const relatedInventory = transaction.relatedInventoryId ? 
                  inventory.find(i => i.id === transaction.relatedInventoryId) : null;
                
                return (
                  <motion.tr 
                    key={transaction.id} 
                    variants={tableRowVariant}
                    className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/50 transition-colors`}
                  >
                    <td className={`px-4 py-3 text-sm text-${currentTheme.text}`}>
                      {new Date(transaction.date).toLocaleDateString()}
                    </td>
                    <td className={`px-4 py-3 text-sm text-${currentTheme.text}`}>{transaction.description}</td>
                    <td className="px-4 py-3">
                      <span className={`px-2 py-1 inline-flex items-center rounded-full text-xs ${
                        (() => {
                          const category = categories.find(c => c.id === transaction.category);
                          return category 
                            ? `bg-${category.color}/20 text-${category.color} border border-${category.color}/30` 
                            : transaction.type === "income"
                              ? `bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30`
                              : `bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`;
                        })()
                      }`}>
                        {(() => {
                          const category = categories.find(c => c.id === transaction.category);
                          return category ? category.name : transaction.category;
                        })()}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <div className="flex flex-col">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${
                          transaction.type === "income" 
                            ? `bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30` 
                            : `bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`
                        }`}>
                          {transaction.type === "income" ? <FaArrowUp className="mr-1 h-3 w-3" /> : <FaArrowDown className="mr-1 h-3 w-3" />}
                          {transaction.type === "income" ? "Income" : "Expense"}
                        </span>
                        
                        {relatedInventory && (
                          <span className={`mt-1 inline-flex items-center px-2 py-1 rounded-full text-xs bg-${currentTheme.accent}/20 text-${currentTheme.accent} border border-${currentTheme.accent}/30`}>
                            <FaBox className="mr-1 h-3 w-3" />
                            {transaction.quantity || 1} × {relatedInventory.name}
                          </span>
                        )}
                      </div>
                    </td>
                    <td className={`px-4 py-3 text-sm font-medium ${transaction.type === "income" ? `text-${currentTheme.success}` : `text-${currentTheme.danger}`}`}>
                      {transaction.type === "income" ? "+" : "-"}{formatCurrency(transaction.amount)}
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex space-x-1">
                        <button 
                          className={`p-1.5 text-${currentTheme.accent} hover:text-${currentTheme.primary} hover:bg-${currentTheme.background} rounded transition-colors`}
                          onClick={() => setEditingTransaction(transaction)}
                          title="Edit transaction"
                        >
                          <FaEdit className="h-4 w-4" />
                        </button>
                        <button 
                          className={`p-1.5 text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 hover:bg-${currentTheme.background} rounded transition-colors`}
                          onClick={() => deleteTransaction(transaction.id)}
                          title="Delete transaction"
                        >
                          <FaTrash className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </motion.tr>
                );
              })}
            </motion.tbody>
          </table>
        </div>

        {/* Mobile card view (visible only on small screens) */}
        <div className="md:hidden space-y-3">
          <motion.div 
            variants={staggerContainer}
            initial="hidden" 
            animate="visible" 
            className="grid gap-3"
          >
            {filteredTransactions.map((transaction) => {
              const relatedInventory = transaction.relatedInventoryId ? 
                inventory.find(i => i.id === transaction.relatedInventoryId) : null;
              const category = categories.find(c => c.id === transaction.category);
              
              return (
                <motion.div 
                  key={transaction.id} 
                  variants={tableRowVariant}
                  className={`p-3 rounded-lg border border-${currentTheme.border} bg-${currentTheme.background}/50`}
                >
                  <div className="flex justify-between items-start mb-2">
                    <div className={`px-2 py-1 rounded-full text-xs ${
                      transaction.type === "income" 
                        ? `bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30` 
                        : `bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`
                    }`}>
                      {transaction.type === "income" ? <FaArrowUp className="mr-1 inline h-3 w-3" /> : <FaArrowDown className="mr-1 inline h-3 w-3" />}
                      {transaction.type === "income" ? "Income" : "Expense"}
                    </div>
                    <span className="text-xs text-gray-400">{new Date(transaction.date).toLocaleDateString()}</span>
                  </div>
                  
                  <div className="mb-1">
                    <p className={`text-sm sm:text-base font-medium text-${currentTheme.text}`}>{transaction.description}</p>
                  </div>
                  
                  <div className="flex flex-wrap gap-2 mb-2">
                    {category && (
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        `bg-${category.color}/20 text-${category.color} border border-${category.color}/30`
                      }`}>
                        {category.name}
                      </span>
                    )}
                    
                    {relatedInventory && (
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs bg-${currentTheme.accent}/20 text-${currentTheme.accent} border border-${currentTheme.accent}/30`}>
                        <FaBox className="mr-1 h-3 w-3" />
                        {transaction.quantity || 1} × {relatedInventory.name}
                      </span>
                    )}
                  </div>
                  
                  <div className="flex justify-between items-center pt-2 border-t border-gray-700/30">
                    <div className={`text-sm font-medium ${transaction.type === "income" ? `text-${currentTheme.success}` : `text-${currentTheme.danger}`}`}>
                      {transaction.type === "income" ? "+" : "-"}{formatCurrency(transaction.amount)}
                    </div>
                    
                    <div className="flex space-x-1">
                      <button 
                        className={`p-1.5 text-${currentTheme.accent} hover:text-${currentTheme.primary} hover:bg-${currentTheme.background} rounded transition-colors`}
                        onClick={() => setEditingTransaction(transaction)}
                      >
                        <FaEdit className="h-3.5 w-3.5" />
                      </button>
                      <button 
                        className={`p-1.5 text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 hover:bg-${currentTheme.background} rounded transition-colors`}
                        onClick={() => deleteTransaction(transaction.id)}
                      >
                        <FaTrash className="h-3.5 w-3.5" />
                      </button>
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </motion.div>
        </div>

        {/* Pagination or "Load More" button if needed */}
        {filteredTransactions.length > 20 && (
          <div className="mt-4 flex justify-center">
            <button 
              className={`px-4 py-2 text-sm text-${currentTheme.accent} hover:text-${currentTheme.primary} border border-${currentTheme.border} rounded-lg flex items-center hover:bg-${currentTheme.background} transition-colors`}
            >
              <FaChevronDown className="mr-1.5 h-3 w-3" /> 
              Load More Transactions
            </button>
          </div>
        )}
      </>
    )}
  </motion.div>
)}

            {/* Receipts tab */}
            {activeTab === "receipts" && (
  <motion.div variants={fadeIn}>
    <div className={`flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 border-b border-${currentTheme.border} pb-3 gap-4`}>
      <div>
        <h2 className={`text-xl sm:text-2xl font-bold text-${currentTheme.text}`}>Receipts & Transactions</h2>
        {searchQuery && (
          <p className={`text-xs sm:text-sm text-${currentTheme.accent} mt-1`}>
            Showing {searchStats.receipts} {Number(searchStats.receipts) === 1 ? 'receipt' : 'receipts'}
          </p>
        )}
      </div>
      <button
        className={`flex items-center justify-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm transition-colors duration-200 w-full sm:w-auto`}
        onClick={() => {
          setEditingReceipt(null);
          resetReceiptForm();
          setShowReceiptModal(true);
        }}
      >
        <FaPlus className="mr-2" /> Add Receipt
      </button>
    </div>

    {filteredReceipts.length === 0 ? (
      <motion.div 
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
        className={`text-center py-8 sm:py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
      >
        {searchQuery ? (
          <>
            <FaSearch className="mx-auto text-3xl sm:text-4xl text-gray-500 mb-4" />
            <h3 className={`text-lg sm:text-xl font-medium text-${currentTheme.text}`}>No matching receipts</h3>
            <p className="text-gray-400 mt-2 px-4 max-w-md mx-auto">Try different search terms or clear filters to see all receipts</p>
          </>
        ) : (
          <>
            <FaBook className="mx-auto text-3xl sm:text-4xl text-gray-500 mb-4" />
            <h3 className={`text-lg sm:text-xl font-medium text-${currentTheme.text}`}>No receipts recorded</h3>
            <p className="text-gray-400 mt-2 px-4 max-w-md mx-auto">Add your first receipt to start tracking your sales</p>
            <button 
              className={`mt-4 flex items-center justify-center mx-auto bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm transition-colors duration-200`}
              onClick={() => {
                setEditingReceipt(null);
                resetReceiptForm();
                setShowReceiptModal(true);
              }}
            >
              <FaPlus className="mr-2" /> Add First Receipt
            </button>
          </>
        )}
      </motion.div>
    ) : (
      <>
        {/* Desktop table view (hidden on small screens) */}
        <div className={`hidden md:block overflow-x-auto rounded-lg border border-${currentTheme.border}`}>
          <table className="w-full text-left">
            <thead>
              <tr className={`bg-${currentTheme.background}`}>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Date</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Type</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Description</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Customer/Vendor</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Items</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Total Amount</th>
                <th className="px-4 py-3 text-xs uppercase font-semibold text-gray-400 tracking-wider">Actions</th>
              </tr>
            </thead>
            <motion.tbody
              variants={staggerContainer}
              initial="hidden"
              animate="visible"
              className={`divide-y divide-${currentTheme.border}`}
            >
              {filteredReceipts.map((receipt) => (
                <motion.tr 
                  key={receipt.id} 
                  variants={tableRowVariant}
                  className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/50 transition-colors`}
                >
                  <td className={`px-4 py-3 text-sm text-${currentTheme.text}`}>
                    {new Date(receipt.date).toLocaleDateString()}
                  </td>
                  <td className="px-4 py-3">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${
                      receipt.type === "income" 
                        ? `bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30` 
                        : `bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`
                    }`}>
                      {receipt.type === "income" ? (
                        <><FaArrowUp className="mr-1 h-3 w-3" /> Income</>
                      ) : (
                        <><FaArrowDown className="mr-1 h-3 w-3" /> Expense</>
                      )}
                    </span>
                  </td>
                  <td className={`px-4 py-3 text-sm text-${currentTheme.text} max-w-[200px] truncate`}>
                    {receipt.description || (receipt.items.length > 0 
                      ? `Sale (${receipt.items.length} items)` 
                      : receipt.type === "income" ? "Income" : "Expense")}
                  </td>
                  <td className={`px-4 py-3 text-sm text-${currentTheme.text}`}>
                    {receipt.customerName || "-"}
                  </td>
                  <td className="px-4 py-3">
                    {receipt.items && receipt.items.length > 0 ? (
                      <div className="flex items-center">
                        <span className={`w-5 h-5 rounded-full bg-${currentTheme.accent}/20 text-${currentTheme.accent} border border-${currentTheme.accent}/30 text-xs flex items-center justify-center mr-1.5 font-medium`}>
                          {receipt.items.length}
                        </span>
                        <span className={`text-xs text-${currentTheme.text}`}>
                          {receipt.items.reduce((sum, item) => sum + item.quantity, 0)} units
                        </span>
                      </div>
                    ) : (
                      <span className="text-xs text-gray-400">No items</span>
                    )}
                  </td>
                  <td className={`px-4 py-3 text-sm font-medium ${receipt.type === "income" ? `text-${currentTheme.success}` : `text-${currentTheme.danger}`}`}>
                    {receipt.type === "income" ? "" : "-"}{formatCurrency(receipt.totalAmount)}
                  </td>
                  <td className="px-4 py-3">
                    <div className="flex space-x-1">
                      <button
                        className={`p-1.5 text-${currentTheme.primary} hover:text-${currentTheme.accent} hover:bg-${currentTheme.background} rounded transition-colors`}
                        onClick={() => viewReceipt(receipt)}
                        title="View receipt"
                      >
                        <FaEye className="h-4 w-4" />
                      </button>
                      
                      {/* Only show edit button for manually created receipts */}
                      {!receipt.isAutoGenerated && (
                        <button
                          className={`p-1.5 text-${currentTheme.accent} hover:text-${currentTheme.primary} hover:bg-${currentTheme.background} rounded transition-colors`}
                          onClick={() => setEditingReceipt(receipt)}
                          title="Edit receipt"
                        >
                          <FaEdit className="h-4 w-4" />
                        </button>
                      )}
                      
                      {/* Allow deleting real receipts but not auto-generated ones */}
                      {!receipt.isAutoGenerated && (
                        <button
                          className={`p-1.5 text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 hover:bg-${currentTheme.background} rounded transition-colors`}
                          onClick={() => deleteReceipt(receipt.id)}
                          title="Delete receipt"
                        >
                          <FaTrash className="h-4 w-4" />
                        </button>
                      )}
                    </div>
                  </td>
                </motion.tr>
              ))}
            </motion.tbody>
          </table>
        </div>

        {/* Mobile card view (visible only on small screens) */}
        <div className="md:hidden space-y-3">
          <motion.div 
            variants={staggerContainer}
            initial="hidden" 
            animate="visible" 
            className="grid gap-3"
          >
            {filteredReceipts.map((receipt) => (
              <motion.div 
                key={receipt.id} 
                variants={tableRowVariant}
                className={`p-4 rounded-lg border border-${currentTheme.border} bg-${currentTheme.background}/50 ${
                  receipt.isAutoGenerated ? `border-l-4 border-l-${currentTheme.border}` :
                  receipt.type === "income" ? `border-l-4 border-l-${currentTheme.success}` :
                  `border-l-4 border-l-${currentTheme.danger}`
                }`}
              >
                <div className="flex justify-between items-start mb-2">
                  <div className={`text-sm sm:text-base font-medium text-${currentTheme.text} truncate max-w-[70%]`}>
                    {receipt.description || (receipt.items.length > 0 
                      ? `Sale (${receipt.items.length} items)` 
                      : receipt.type === "income" ? "Income" : "Expense")}
                  </div>
                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${
                    receipt.type === "income" 
                      ? `bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30` 
                      : `bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`
                  }`}>
                    {receipt.type === "income" ? "Income" : "Expense"}
                  </span>
                </div>
                
                <div className="grid grid-cols-2 gap-2 mb-3 text-xs sm:text-sm">
                  <div>
                    <span className="text-gray-400">Date:</span>
                    <span className="ml-1 text-gray-300">{new Date(receipt.date).toLocaleDateString()}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Customer:</span>
                    <span className="ml-1 text-gray-300">{receipt.customerName || "-"}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Amount:</span>
                    <span className={`ml-1 font-medium ${receipt.type === "income" ? `text-${currentTheme.success}` : `text-${currentTheme.danger}`}`}>
                      {receipt.type === "income" ? "" : "-"}{formatCurrency(receipt.totalAmount)}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-400">Items:</span>
                    {receipt.items && receipt.items.length > 0 ? (
                      <span className="ml-1 text-gray-300">
                        {receipt.items.length} ({receipt.items.reduce((sum, item) => sum + item.quantity, 0)} units)
                      </span>
                    ) : (
                      <span className="ml-1 text-gray-500">None</span>
                    )}
                  </div>
                </div>
                
                {receipt.items && receipt.items.length > 0 && (
                  <div className={`p-2 mb-3 rounded-lg bg-${currentTheme.background} border border-${currentTheme.border}`}>
                    <div className="flex justify-between items-center mb-1.5 text-xs font-medium">
                      <span className={`text-${currentTheme.accent}`}>Top Items</span>
                      <span className={`text-gray-400`}>Qty × Price</span>
                    </div>
                    <div className="space-y-1">
                      {receipt.items.slice(0, 2).map((item, idx) => (
                        <div key={idx} className="flex justify-between text-xs">
                          <span className="text-gray-300 truncate max-w-[60%]">{item.name}</span>
                          <span className="text-gray-400">
                            {item.quantity} × {formatCurrency(item.price)}
                          </span>
                        </div>
                      ))}
                      {receipt.items.length > 2 && (
                        <div className="text-xs text-center text-gray-500 mt-1">
                          + {receipt.items.length - 2} more items
                        </div>
                      )}
                    </div>
                  </div>
                )}
                
                <div className="flex justify-end pt-2 border-t border-gray-700/30">
                  <div className="flex space-x-2">
                    <button
                      className={`p-2 text-${currentTheme.primary} hover:text-${currentTheme.accent} hover:bg-${currentTheme.background} rounded transition-colors`}
                      onClick={() => viewReceipt(receipt)}
                    >
                      <FaEye className="h-4 w-4" />
                    </button>
                    
                    {/* Only show edit button for manually created receipts */}
                    {!receipt.isAutoGenerated && (
                      <button
                        className={`p-2 text-${currentTheme.accent} hover:text-${currentTheme.primary} hover:bg-${currentTheme.background} rounded transition-colors`}
                        onClick={() => setEditingReceipt(receipt)}
                      >
                        <FaEdit className="h-4 w-4" />
                      </button>
                    )}
                    
                    {/* Allow deleting real receipts but not auto-generated ones */}
                    {!receipt.isAutoGenerated && (
                      <button
                        className={`p-2 text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 hover:bg-${currentTheme.background} rounded transition-colors`}
                        onClick={() => deleteReceipt(receipt.id)}
                      >
                        <FaTrash className="h-4 w-4" />
                      </button>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </motion.div>
        </div>

        {/* Pagination for larger receipt lists */}
        {filteredReceipts.length > 20 && (
          <div className="mt-4 flex justify-center">
            <button 
              className={`px-4 py-2 text-sm text-${currentTheme.accent} hover:text-${currentTheme.primary} border border-${currentTheme.border} rounded-lg flex items-center hover:bg-${currentTheme.background} transition-colors`}
            >
              <FaChevronDown className="mr-1.5 h-3 w-3" /> 
              Load More Receipts
            </button>
          </div>
        )}
      </>
    )}
  </motion.div>
)}

            {/* Categories Tab */}
            {activeTab === "categories" && (
              <motion.div variants={fadeIn}>
                <div className={`flex justify-between items-center mb-6 border-b border-${currentTheme.border} pb-3`}>
                  <div>
                    <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Category Management</h2>
                    {searchQuery && (
                      <p className={`text-sm text-${currentTheme.accent} mt-1`}>
                        Showing {searchStats.categories}
                      </p>
                    )}
                  </div>
                  <button
                    className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
                    onClick={() => {
                      setEditingCategory(null);
                      resetCategoryForm();
                      setShowCategoryModal(true);
                    }}
                  >
                    <FaPlus className="mr-2" /> Add Category
                  </button>
                </div>

                {filteredCategories.length === 0 ? (
                  <motion.div 
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
                  >
                    {searchQuery ? (
                      <>
                        <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching categories</h3>
                        <p className="text-gray-400 mt-2">Try different search terms</p>
                      </>
                    ) : (
                      <>
                        <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-16 w-16 text-gray-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                        </svg>
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No categories defined</h3>
                        <p className="text-gray-400 mt-2">Add categories to organize your inventory and transactions</p>
                      </>
                    )}
                  </motion.div>
                ) : (
                  <motion.div 
                    variants={staggerContainer}
                    initial="hidden"
                    animate="visible"
                    className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"
                  >
                    {filteredCategories.map(category => (
                      <motion.div 
                        key={category.id}
                        variants={cardVariant}
                        whileHover="hover"
                        className={`bg-${currentTheme.background} rounded-lg border border-${currentTheme.border} overflow-hidden shadow-sm`}
                      >
                        <div className={`bg-${category.color} h-2 w-full`}></div>
                        <div className="p-4">
                          <div className="flex justify-between items-start">
                            <h3 className={`text-lg font-medium text-${currentTheme.text}`}>{category.name}</h3>
                            <span className={`px-2 py-1 bg-${currentTheme.background} text-xs rounded-full border border-${currentTheme.border} text-gray-400`}>
                              {category.type === "both" ? "Inventory & Transactions" : 
                               category.type === "inventory" ? "Inventory Only" : "Transactions Only"}
                            </span>
                          </div>
                          <p className="mt-2 text-gray-400 text-sm">{category.description}</p>
                          <div className="mt-4 flex justify-end space-x-2">
                            <button 
                              className={`text-${currentTheme.accent} hover:text-${currentTheme.primary} text-sm`}
                              onClick={() => setEditingCategory(category)}
                            >
                              Edit
                            </button>
                            <button 
                              className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 text-sm`}
                              onClick={() => deleteCategory(category.id)}
                            >
                              Delete
                            </button>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </motion.div>
                )}
              </motion.div>
            )}

            {/* Customers Tab */}
            {activeTab === "customers" && (
              <motion.div variants={fadeIn}>
                <div className={`flex justify-between items-center mb-6 border-b border-${currentTheme.border} pb-3`}>
                  <div>
                    <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Customer Management</h2>
                    {searchQuery && (
                      <p className={`text-sm text-${currentTheme.accent} mt-1`}>
                        Showing {searchStats.customers}
                      </p>
                    )}
                  </div>
                  <button
                    className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
                    onClick={() => {
                      setEditingCustomer(null);
                      resetCustomerForm();
                      setShowCustomerModal(true);
                    }}
                  >
                    <FaPlus className="mr-2" /> Add Customer
                  </button>
                </div>

                {filteredCustomers.length === 0 ? (
                  <motion.div 
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
                  >
                    {searchQuery ? (
                      <>
                        <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching customers</h3>
                        <p className="text-gray-400 mt-2">Try different search terms</p>
                      </>
                    ) : (
                      <>
                        <FaUsers className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No customers yet</h3>
                        <p className="text-gray-400 mt-2">Add your first customer to get started</p>
                      </>
                    )}
                  </motion.div>
                ) : (
                  <div className={`grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3`}>
                    {filteredCustomers.map(customer => (
                      <motion.div
                        key={customer.id}
                        variants={cardVariant}
                        whileHover="hover"
                        className={`bg-${currentTheme.background} p-4 rounded-lg border border-${currentTheme.border} shadow-sm`}
                      >
                        <div className="flex justify-between items-start">
                          <h3 className={`text-lg font-medium text-${currentTheme.text}`}>{customer.name}</h3>
                          <div className="flex space-x-2">
                            <button
                              className={`p-1 text-${currentTheme.accent} hover:text-${currentTheme.primary} transition-colors duration-200`}
                              onClick={() => setEditingCustomer(customer)}
                              title="Edit customer"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                              </svg>
                            </button>
                            <button
                              className={`p-1 text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 transition-colors duration-200`}
                              onClick={() => deleteCustomer(customer.id)}
                              title="Delete customer"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                              </svg>
                            </button>
                          </div>
                        </div>
                        
                        <div className="mt-3 space-y-1 text-sm">
                          {customer.email && (
                            <p className="flex items-center text-gray-400">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a1 1 0 00-1-1H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                              </svg>
                              {customer.email}
                            </p>
                          )}
                          {customer.phone && (
                            <p className="flex items-center text-gray-400">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                              </svg>
                              {customer.phone}
                            </p>
                          )}
                          {customer.address && (
                            <p className="flex items-start text-gray-400">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                              </svg>
                              <span className="line-clamp-2">{customer.address}</span>
                            </p>
                          )}
                        </div>
                        
                        <div className={`mt-4 pt-3 border-t border-${currentTheme.border} flex justify-between items-center`}>
                          <span className={`text-xs text-gray-500`}>
                            Added: {customer.createdAt.toLocaleDateString()}
                          </span>
                          <span className={`text-xs bg-${currentTheme.primary}/20 text-${currentTheme.accent} px-2 py-1 rounded-full`}>
                            {customer.totalPurchases} purchases
                          </span>
                        </div>
                        
                        {customer.notes && (
                          <div className={`mt-3 p-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded text-xs text-gray-400`}>
                            <p className="line-clamp-2">{customer.notes}</p>
                          </div>
                        )}
                      </motion.div>
                    ))}
                  </div>
                )}
              </motion.div>
            )}

            {/* Invoices Tab */}
            {/* Invoices Tab */}
{activeTab === "invoices" && (
  <motion.div variants={fadeIn}>
    <div className={`flex justify-between items-center mb-6 border-b border-${currentTheme.border} pb-3`}>
      <div>
        <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Invoice Management</h2>
        {searchQuery && (
          <p className={`text-sm text-${currentTheme.accent} mt-1`}>
            Showing {searchStats.invoices}
          </p>
        )}
      </div>
      <button
        className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
        onClick={() => {
          setEditingInvoice(null);
          resetInvoiceForm();
          setShowInvoiceModal(true);
        }}
      >
        <FaPlus className="mr-2" /> Add Invoice
      </button>
    </div>

    {filteredInvoices.length === 0 ? (
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
        className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
      >
        {searchQuery ? (
          <>
            <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
            <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching invoices</h3>
            <p className="text-gray-400 mt-2">Try different search terms</p>
          </>
        ) : (
          <>
            <FaDollarSign className="mx-auto text-4xl text-gray-500 mb-4" />
            <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No invoices yet</h3>
            <p className="text-gray-400 mt-2">Add your first invoice to get started</p>
          </>
        )}
      </motion.div>
    ) : (
      <div className={`rounded-lg border border-${currentTheme.border} overflow-x-scroll`}>
        <table className="w-full text-left">
          <thead>
            <tr className={`bg-${currentTheme.background}`}>
              <th className="p-4 text-gray-400 font-semibold">Invoice Number</th>
              <th className="p-4 text-gray-400 font-semibold">Issue Date</th>
              <th className="p-4 text-gray-400 font-semibold">Due Date</th>
              <th className="p-4 text-gray-400 font-semibold">Customer</th>
              <th className="p-4 text-gray-400 font-semibold">Total Amount</th>
              <th className="p-4 text-gray-400 font-semibold">Status</th>
              <th className="p-4 text-gray-400 font-semibold">Actions</th>
            </tr>
          </thead>
          <motion.tbody
            variants={staggerContainer}
            initial="hidden"
            animate="visible"
          >
            {filteredInvoices.map((invoice) => (
              <React.Fragment key={invoice.id}>
                <motion.tr
                  variants={tableRowVariant}
                  className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/50 cursor-pointer`}
                  onClick={() => {
                    setExpandedInvoice(expandedInvoice === invoice.id ? null : invoice.id);
                  }}
                >
                  <td className={`p-4 text-${currentTheme.text} font-medium`}>
                    <div className="flex items-center">
                      <span className={`mr-2 ${expandedInvoice === invoice.id ? 'transform rotate-90' : ''} transition-transform duration-200`}>
                        <FaChevronRight size={10} />
                      </span>
                      {invoice.invoiceNumber}
                    </div>
                  </td>
                  <td className={`p-4 text-${currentTheme.text}`}>{formatDate(invoice.date)}</td>
                  <td className={`p-4 text-${currentTheme.text}`}>{formatDate(invoice.dueDate) || 'Not set'}</td>
                  <td className={`p-4 text-${currentTheme.text}`}>{invoice.customerName}</td>
                  <td className={`p-4 text-${currentTheme.text} font-semibold`}>{formatCurrency(invoice.totalAmount)}</td>
                  <td className="p-4">
                    {(() => {
                      // Calculate invoice status based on due date
                      const today = new Date();
                      const dueDate = new Date(invoice.dueDate);
                      
                      if (!invoice.dueDate) {
                        return (
                          <span className={`px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800`}>
                            No due date
                          </span>
                        );
                      } else if (today > dueDate) {
                        return (
                          <span className={`px-2 py-1 rounded-full text-xs bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`}>
                            Overdue
                          </span>
                        );
                      } else if ((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24) < 7) {
                        return (
                          <span className={`px-2 py-1 rounded-full text-xs bg-${currentTheme.warning}/20 text-${currentTheme.warning} border border-${currentTheme.warning}/30`}>
                            Due soon
                          </span>
                        );
                      } else {
                        return (
                          <span className={`px-2 py-1 rounded-full text-xs bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30`}>
                            Outstanding
                          </span>
                        );
                      }
                    })()}
                  </td>
                  <td className="p-4 space-x-2">
                    <button
                      className={`text-${currentTheme.accent} hover:text-${currentTheme.primary} text-sm`}
                      onClick={(e) => {
                        e.stopPropagation();
                        setEditingInvoice(invoice);
                      }}
                    >
                      Edit
                    </button>
                    <button
                      className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 text-sm`}
                      onClick={(e) => {
                        e.stopPropagation();
                        deleteInvoice(invoice.id);
                      }}
                    >
                      Delete
                    </button>
                  </td>
                </motion.tr>
                
                {/* Expanded details row */}
                {expandedInvoice === invoice.id && (
                  <motion.tr 
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className={`bg-${currentTheme.background}/30 border-b border-${currentTheme.border}`}
                  >
                    <td colSpan={7} className="p-0">
                      <motion.div 
                        initial={{ height: 0 }}
                        animate={{ height: 'auto' }}
                        exit={{ height: 0 }}
                        transition={{ duration: 0.2 }}
                        className="overflow-hidden"
                      >
                        <div className="p-3 md:p-6 space-y-4 md:space-y-6 bg-white text-black print:bg-white print:text-black" ref={invoiceCardRef}>
                          {/* Invoice Header - stacked on mobile, flex on desktop */}
                          <div className="flex flex-col md:flex-row justify-between items-center md:items-start pb-4 border-b-2 border-gray-200">
                            <div className="w-full md:w-auto mb-4 md:mb-0 text-center md:text-left">
                              <h1 className="text-xl md:text-2xl font-bold text-gray-800">INVOICE</h1>
                              <p className="text-gray-500 mt-1 text-sm md:text-base">{invoice.invoiceNumber}</p>
                            </div>
                            <div className="w-full md:w-auto text-center md:text-right">
                              <h2 className="font-bold text-lg md:text-xl text-gray-800">{businessInfo?.name || "Your Business"}</h2>
                              {businessInfo?.address && <p className="text-gray-600 text-xs md:text-sm">{businessInfo.address}</p>}
                              <div className="flex flex-col text-xs md:text-sm text-gray-600 mt-1">
                                {businessInfo?.email && <span>{businessInfo.email}</span>}
                                {businessInfo?.phone && <span>{businessInfo.phone}</span>}
                              </div>
                            </div>
                          </div>
                          
                          {/* Invoice Metadata - single column on mobile, 3 columns on desktop */}
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-3 md:gap-4 p-3 md:p-4 bg-gray-50 rounded-lg border border-gray-200">
                            <div className="border-b pb-2 md:border-b-0 md:pb-0 md:border-r md:border-gray-200 md:pr-4">
                              <p className="text-xs font-semibold text-gray-500 uppercase">Payment Terms</p>
                              <p className="text-sm font-medium text-gray-800 mt-1">{invoice.paymentTerms || 'Not specified'}</p>
                            </div>
                            <div className="border-b pb-2 md:border-b-0 md:pb-0 md:border-r md:border-gray-200 md:px-4">
                              <p className="text-xs font-semibold text-gray-500 uppercase">Issue Date</p>
                              <p className="text-sm font-medium text-gray-800 mt-1">{formatDate(invoice.date)}</p>
                            </div>
                            <div className="md:pl-4">
                              <p className="text-xs font-semibold text-gray-500 uppercase">Due Date</p>
                              <p className="text-sm font-medium text-gray-800 mt-1">{formatDate(invoice.dueDate) || 'Not set'}</p>
                            </div>
                          </div>
                          
                          {/* Bill To Section - stacks on mobile */}
                          <div className="p-3 md:p-4 bg-gray-50 rounded-lg border border-gray-200">
                            <h4 className="text-xs md:text-sm font-semibold text-gray-700 mb-2 md:mb-3 uppercase tracking-wider">Bill To</h4>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-4">
                              <div>
                                <p className="text-sm md:text-base font-bold text-gray-800">{invoice.customerName}</p>
                                
                                {/* Customer contact information */}
                                {(() => {
                                  const customer = customers.find(c => c.id === invoice.customerId);
                                  if (customer) {
                                    return (
                                      <div className="mt-2 text-xs md:text-sm text-gray-600">
                                        {customer.phone && (
                                          <div className="flex items-center mt-1">
                                            <FaPhone className="mr-2 text-gray-400" size={10} />
                                            <span>{customer.phone}</span>
                                          </div>
                                        )}
                                        {customer.email && (
                                          <div className="flex items-center mt-1">
                                            <FaEnvelope className="mr-2 text-gray-400" size={10} />
                                            <span className="break-all">{customer.email}</span>
                                          </div>
                                        )}
                                      </div>
                                    );
                                  }
                                  return null;
                                })()}
                              </div>
                              
                              {/* Customer shipping address */}
                              <div>
                                {(() => {
                                  const customer = customers.find(c => c.id === invoice.customerId);
                                  if (customer && customer.address) {
                                    return (
                                      <div>
                                        <p className="text-xs font-semibold text-gray-500 uppercase mb-1">Address</p>
                                        <p className="text-xs md:text-sm text-gray-700">{customer.address}</p>
                                      </div>
                                    );
                                  }
                                  return null;
                                })()}
                              </div>
                            </div>
                          </div>
                          
                          {/* Invoice Items - responsive table */}
                          <div className="overflow-x-auto rounded-lg border border-gray-200">
                            <table className="w-full text-left">
                              <thead className="bg-gray-100 border-b border-gray-200">
                                <tr>
                                  <th scope="col" className="px-2 md:px-4 py-2 md:py-3 text-xs font-semibold text-gray-600 uppercase">Description</th>
                                  <th scope="col" className="px-2 md:px-4 py-2 md:py-3 text-xs font-semibold text-gray-600 uppercase text-right">Qty</th>
                                  <th scope="col" className="px-2 md:px-4 py-2 md:py-3 text-xs font-semibold text-gray-600 uppercase text-right">Price</th>
                                  <th scope="col" className="px-2 md:px-4 py-2 md:py-3 text-xs font-semibold text-gray-600 uppercase text-right">Amount</th>
                                </tr>
                              </thead>
                              <tbody className="divide-y divide-gray-200">
                                {invoice.items && invoice.items.length > 0 ? (
                                  invoice.items.map((item, idx) => (
                                    <tr key={idx} className={idx % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                                      <td className="px-2 md:px-4 py-2 md:py-3 text-xs md:text-sm text-gray-800">{item.name}</td>
                                      <td className="px-2 md:px-4 py-2 md:py-3 text-xs md:text-sm text-gray-800 text-right">
                                        <span className={`inline-flex items-center justify-center px-2 py-0.5 rounded-full ${
                                          'inventoryId' in item 
                                            ? "bg-blue-50 text-blue-700 border border-blue-200" 
                                            : ""
                                        }`}>
                                          {item.quantity}
                                        </span>
                                        {'inventoryId' in item && (
                                          <div className="text-xs text-blue-600 mt-0.5">Inventory item</div>
                                        )}
                                      </td>
                                      <td className="px-2 md:px-4 py-2 md:py-3 text-xs md:text-sm text-gray-800 text-right">{formatCurrency(item.price)}</td>
                                      <td className="px-2 md:px-4 py-2 md:py-3 text-xs md:text-sm font-medium text-gray-800 text-right">
                                        {formatCurrency(item.price * item.quantity)}
                                      </td>
                                    </tr>
                                  ))
                                ) : (
                                  <tr>
                                    <td colSpan={4} className="px-2 md:px-4 py-3 text-center text-gray-500 text-xs md:text-sm">No items found</td>
                                  </tr>
                                )}
                              </tbody>
                              <tfoot className="bg-gray-50 border-t border-gray-200">
                                <tr>
                                  <td colSpan={3} className="px-2 md:px-4 py-2 md:py-3 text-xs md:text-sm font-semibold text-gray-700 text-right">Subtotal</td>
                                  <td className="px-2 md:px-4 py-2 md:py-3 text-xs md:text-sm font-semibold text-gray-800 text-right">{formatCurrency(invoice.totalAmount)}</td>
                                </tr>
                                <tr>
                                  <td colSpan={3} className="px-2 md:px-4 py-2 md:py-3 text-xs md:text-sm font-semibold text-gray-700 text-right">Tax</td>
                                  <td className="px-2 md:px-4 py-2 md:py-3 text-xs md:text-sm font-semibold text-gray-800 text-right">{formatCurrency(0)}</td>
                                </tr>
                                <tr className="border-t-2 border-gray-300">
                                  <td colSpan={3} className="px-2 md:px-4 py-2 md:py-3 text-sm md:text-base font-bold text-gray-700 text-right">Total</td>
                                  <td className="px-2 md:px-4 py-2 md:py-3 text-sm md:text-base font-bold text-green-700 text-right">{formatCurrency(invoice.totalAmount)}</td>
                                </tr>
                              </tfoot>
                            </table>
                          </div>

                          <div className="flex items-center justify-between">
                            {invoice.isPaid ? (
                              <span className={`px-2 py-1 rounded-full text-xs bg-green-100 text-green-800 flex items-center`}>
                                <FaCheck className="mr-1" size={8} />
                                Paid {invoice.paidDate && `• ${formatDate(invoice.paidDate)}`}
                                {invoice.paidTimestamp && checkPaidEditTimeLeft(invoice.paidTimestamp) <= 0 && (
                                  <FaLock className="ml-1" size={8} title="Payment status locked" />
                                )}
                              </span>
                            ) : (() => {
                                // Calculate invoice status based on due date
                                const today = new Date();
                                const dueDate = new Date(invoice.dueDate);
                                
                                if (!invoice.dueDate) {
                                  return (
                                    <span className={`px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800`}>
                                      No due date
                                    </span>
                                  );
                                } else if (today > dueDate) {
                                  return (
                                    <span className={`px-2 py-1 rounded-full text-xs bg-red-100 text-red-800`}>
                                      Overdue
                                    </span>
                                  );
                                } else if ((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24) < 7) {
                                  return (
                                    <span className={`px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-800`}>
                                      Due soon
                                    </span>
                                  );
                                } else {
                                  return (
                                    <span className={`px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800`}>
                                      Unpaid
                                    </span>
                                  );
                                }
                              })()}
                              
                              <span className="text-xs text-gray-500">Invoice #{invoice.id.slice(-8).toUpperCase()}</span>
                          </div>
                          
                          {/* Notes section */}
                          {invoice.notes && (
                            <div className="p-3 md:p-4 bg-gray-50 rounded-lg border border-gray-200">
                              <h4 className="text-xs font-semibold text-gray-700 uppercase tracking-wider mb-2">Notes</h4>
                              <p className="text-xs md:text-sm text-gray-700 whitespace-pre-wrap">{invoice.notes}</p>
                            </div>
                          )}
                          
                          {/* Payment Information and Footer with Barcode */}
                          <div className="mt-4 md:mt-6 pt-3 md:pt-4 border-t border-gray-200">
                            <div className="text-center">
                              {/* Receipt Barcode - real scannable barcode */}
                              <div className="flex justify-center mb-4">
                                <div className="flex flex-col items-center">
                                  <div className="relative bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                                    {/* Real scannable barcode */}
                                    <Barcode 
                                      value={invoice.id.toUpperCase()}
                                      width={1}
                                      height={50}
                                      format="CODE128"
                                      displayValue={true}
                                      font="Arial"
                                      fontSize={12}
                                      textAlign="center"
                                      textPosition="bottom"
                                      textMargin={6}
                                      background="#FFFFFF"
                                      lineColor="#000000"
                                    />
                                  </div>
                                  
                                  {/* Barcode caption */}
                                  <div className="mt-2 text-center">
                                    <p className="text-xs font-medium text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>
                                      Scan to verify invoice
                                    </p>
                                  </div>
                                </div>
                              </div>
                              
                              <p className="text-xs md:text-sm font-medium text-gray-700">Thank you for your business!</p>
                              <p className="text-xs text-gray-500 mt-1">This is a computer-generated document and requires no signature.</p>
                            </div>
                          </div>
                        </div>
                        
                        {/* Action buttons - stack on small screens */}
                        <div className="flex flex-col sm:flex-row justify-end p-2 space-y-2 sm:space-y-0 sm:space-x-2 mt-2 md:mt-3">
                          <button 
                            className="w-full sm:w-auto px-3 py-1.5 text-xs bg-gray-100 hover:bg-gray-200 text-gray-800 rounded border border-gray-300 flex items-center justify-center"
                            onClick={() => {
                              window.print();
                            }}
                          >
                            <FaPrint className="mr-1" size={12} /> Print
                          </button>
                          <button 
                            className={`w-full sm:w-auto px-3 py-1.5 text-xs ${
                              isLoading ? "bg-gray-300 cursor-wait" : "bg-blue-600 hover:bg-blue-700"
                            } text-white rounded flex items-center justify-center`}
                            onClick={() => generateInvoiceImage(invoice)}
                            disabled={isLoading}
                          >
                            {isLoading ? (
                              <>
                                <div className="w-3 h-3 border-2 border-t-transparent border-white rounded-full animate-spin mr-1"></div> 
                                Processing...
                              </>
                            ) : (
                              <>
                                <FaDownload className="mr-1" size={12} /> Download
                              </>
                            )}
                          </button>
                        </div>
                      </motion.div>
                    </td>
                  </motion.tr>
                )}
              </React.Fragment>
            ))}
          </motion.tbody>
        </table>
      </div>
    )}
  </motion.div>
)}

            {/* Budgets Tab */}
            {activeTab === "budgets" && (
    <motion.div variants={fadeIn}>
      <div
        className={`flex flex-col md:flex-row justify-between items-start md:items-center mb-6 border-b border-${currentTheme.border} pb-3 gap-3`}
      >
        <div>
          <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Budget Management</h2>
          {searchQuery && (
            <p className={`text-sm text-${currentTheme.accent} mt-1`}>
              Showing {filteredBudgets?.length || 0} {filteredBudgets?.length === 1 ? "budget" : "budgets"}
            </p>
          )}
        </div>
        <button
          className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
          onClick={() => {
            setEditingBudget(null)
            resetBudgetForm()
            setShowBudgetModal(true)
          }}
        >
          <FaPlus className="mr-2" /> Add Budget
        </button>
      </div>

      {!filteredBudgets || filteredBudgets.length === 0 ? (
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.3 }}
          className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
        >
          {searchQuery ? (
            <>
              <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
              <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching budgets</h3>
              <p className="text-gray-400 mt-2">Try different search terms</p>
            </>
          ) : (
            <>
              <FaChartPie className="mx-auto text-4xl text-gray-500 mb-4" />
              <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No budgets created</h3>
              <p className="text-gray-400 mt-2">Create your first budget to track income and expenses</p>
              <button
                className={`mt-4 flex items-center mx-auto bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm transition-colors duration-200`}
                onClick={() => {
                  setEditingBudget(null)
                  resetBudgetForm()
                  setShowBudgetModal(true)
                }}
              >
                <FaPlus className="mr-2" /> Create First Budget
              </button>
            </>
          )}
        </motion.div>
      ) : (
        <div className={`rounded-lg border border-${currentTheme.border} overflow-auto`}>
          <table className="w-full text-left">
            <thead className="sticky top-0">
              <tr className={`bg-${currentTheme.background}`}>
                <th className="p-4 text-gray-400 font-semibold whitespace-nowrap">Budget Name</th>
                <th className="p-4 text-gray-400 font-semibold hidden md:table-cell">Period</th>
                <th className="p-4 text-gray-400 font-semibold hidden md:table-cell">Date Range</th>
                <th className="p-4 text-gray-400 font-semibold">Target Amount</th>
                <th className="p-4 text-gray-400 font-semibold hidden md:table-cell">Status</th>
                <th className="p-4 text-gray-400 font-semibold hidden lg:table-cell">Time Remaining</th>
                <th className="p-4 text-gray-400 font-semibold text-right">Actions</th>
              </tr>
            </thead>
            <motion.tbody variants={staggerContainer} initial="hidden" animate="visible">
              {filteredBudgets.map((budget) => {
                // Calculate spent amount based on transactions that match budget categories and date range
                const budgetStart = new Date(budget.startDate)
                const budgetEnd = new Date(budget.endDate)

                // Get all transactions that fall within this budget's date range and match its categories
                const relevantTransactions = transactions.filter((transaction) => {
                  // Check if transaction is within date range
                  const transactionDate = new Date(transaction.date)
                  const inDateRange = transactionDate >= budgetStart && transactionDate <= budgetEnd

                  // Check if transaction category matches any budget category
                  const matchesCategory = (budget.categories || []).some(
                    (budgetCat) => budgetCat.name === categories.find((c) => c.id === transaction.category)?.name,
                  )

                  // Only count expenses towards budget spending
                  return inDateRange && matchesCategory && transaction.type === "expense"
                })

                // Calculate total spent amount from relevant transactions
                const calculatedSpent = relevantTransactions.reduce(
                  (total, transaction) => total + transaction.amount,
                  0,
                )

                // Update each category's spent amount
                const updatedCategories =
                  budget.categories?.map((category) => {
                    const categoryTransactions = relevantTransactions.filter(
                      (transaction) => categories.find((c) => c.id === transaction.category)?.name === category.name,
                    )

                    const categorySpent = categoryTransactions.reduce(
                      (total, transaction) => total + transaction.amount,
                      0,
                    )

                    return {
                      ...category,
                      spent: categorySpent,
                    }
                  }) || []

                // Use the calculated values or fallback to the stored values
                const spentAmount = calculatedSpent || budget.spentAmount
                const spentPercentage = (spentAmount / budget.targetAmount) * 100

                return (
                  <React.Fragment key={budget.id}>
                    <motion.tr
  variants={tableRowVariant}
  className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/70 transition-colors duration-200 cursor-pointer group`}
  onClick={() => {
    setExpandedBudget(expandedBudget === budget.id ? null : budget.id)
  }}
>
  {/* Budget Name Cell - Enhanced for mobile */}
  <td className={`p-3 sm:p-4 text-${currentTheme.text}`}>
    <div className="flex items-center space-x-2.5">
      <div className={`w-6 h-6 rounded-full flex items-center justify-center bg-${currentTheme.background} transition-colors group-hover:bg-${currentTheme.primary}/10`}>
        <span className={`transition-transform duration-300 ${expandedBudget === budget.id ? "transform rotate-90" : ""}`}>
          <FaChevronRight size={10} className={`text-${currentTheme.accent}`} />
        </span>
      </div>
      <div>
        <div className="font-medium text-sm sm:text-base">{budget.name}</div>
        <div className="text-xs text-gray-400 md:hidden flex items-center space-x-1 mt-0.5">
          <span className="px-1.5 py-0.5 bg-gray-700/30 rounded-md">{budget.period}</span>
          <span>•</span>
          <span>{formatDate(budget.startDate)}</span>
        </div>
      </div>
    </div>
  </td>

  {/* Period Cell - Refined styling */}
  <td className={`p-4 text-${currentTheme.text} hidden md:table-cell whitespace-nowrap`}>
    <span className="px-2 py-1 bg-gray-700/30 rounded-md text-sm">{budget.period}</span>
  </td>

  {/* Date Range Cell - Improved visibility */}
  <td className={`p-4 text-${currentTheme.text} hidden md:table-cell whitespace-nowrap`}>
    <div className="flex items-center">
      <span className="text-gray-400 text-sm"><FaCalendarAlt size={12} className="inline mr-1.5 text-gray-500" />{formatDate(budget.startDate)} - {formatDate(budget.endDate)}</span>
    </div>
  </td>

  {/* Target Amount Cell - Enhanced for all screen sizes */}
  <td className={`p-3 sm:p-4 text-${currentTheme.text}`}>
    <div>
      <div className="font-semibold text-sm sm:text-base">{formatCurrency(budget.targetAmount)}</div>
      <div className="flex items-center mt-1 md:hidden">
        <div className="w-12 h-1.5 bg-gray-700/30 rounded-full overflow-hidden mr-1.5">
          <div 
            className={`h-full ${
              spentPercentage >= 100 ? "bg-red-500" :
              spentPercentage >= 80 ? "bg-yellow-500" : "bg-green-500"
            }`}
            style={{ width: `${Math.min(spentPercentage, 100)}%` }}
          ></div>
        </div>
        <span className="text-xs text-gray-400">{`${spentPercentage.toFixed(0)}%`}</span>
      </div>
    </div>
  </td>

  {/* Status Cell - Enhanced with icon and better styling */}
  <td className="p-4 hidden md:table-cell">
    {(() => {
      if (spentPercentage >= 100) {
        return (
          <span className="inline-flex items-center px-2.5 py-1.5 rounded-full text-xs bg-red-200/20 text-red-400 border border-red-300/30">
            <span className="w-1.5 h-1.5 rounded-full bg-red-500 mr-1.5"></span>
            Over Budget ({spentPercentage.toFixed(0)}%)
          </span>
        )
      } else if (spentPercentage >= 80) {
        return (
          <span className="inline-flex items-center px-2.5 py-1.5 rounded-full text-xs bg-yellow-200/20 text-yellow-400 border border-yellow-300/30">
            <span className="w-1.5 h-1.5 rounded-full bg-yellow-500 mr-1.5"></span>
            Near Limit ({spentPercentage.toFixed(0)}%)
          </span>
        )
      } else {
        return (
          <span className="inline-flex items-center px-2.5 py-1.5 rounded-full text-xs bg-green-200/20 text-green-400 border border-green-300/30">
            <span className="w-1.5 h-1.5 rounded-full bg-green-500 mr-1.5"></span>
            On Track ({spentPercentage.toFixed(0)}%)
          </span>
        )
      }
    })()}
  </td>

  {/* Time Remaining Cell - Enhanced progress bar and styling */}
  <td className="p-4 hidden lg:table-cell">
    {(() => {
      const now = new Date()
      const start = new Date(budget.startDate)
      const end = new Date(budget.endDate)

      if (now > end) {
        return (
          <span className="inline-flex items-center px-2.5 py-1.5 rounded-full text-xs bg-gray-700/30 text-gray-400 border border-gray-600/40">
            <FaCheck size={10} className="mr-1.5" />
            Completed
          </span>
        )
      } else if (now < start) {
        const daysToStart = Math.ceil((start.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
        return (
          <span className="inline-flex items-center px-2.5 py-1.5 rounded-full text-xs bg-blue-200/20 text-blue-400 border border-blue-300/30">
            <FaCalendarAlt size={10} className="mr-1.5" />
            Starts in {daysToStart} {daysToStart === 1 ? "day" : "days"}
          </span>
        )
      } else {
        const totalDays = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))
        const daysElapsed = Math.ceil((now.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))
        const daysRemaining = Math.max(
          0,
          Math.ceil((end.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
        )
        const timePercentage = (daysElapsed / totalDays) * 100

        return (
          <div className="flex items-center">
            <div className="relative w-16 h-2.5 bg-gray-700/40 rounded-full overflow-hidden mr-2">
              <div
                className="h-full bg-blue-500"
                style={{ width: `${Math.min(timePercentage, 100)}%` }}
              ></div>
              <div className="absolute inset-0 border border-gray-600/20 rounded-full"></div>
            </div>
            <span className="text-xs text-gray-400 whitespace-nowrap">
              {daysRemaining} {daysRemaining === 1 ? "day" : "days"} left
            </span>
          </div>
        )
      }
    })()}
  </td>

  {/* Actions Cell - Touch-friendly buttons */}
  <td className="p-3 pr-4 sm:p-4 text-right">
    <div className="flex items-center justify-end space-x-1">
      <button
        className={`p-2 rounded-full bg-${currentTheme.background} hover:bg-${currentTheme.primary}/10 text-${currentTheme.accent} hover:text-${currentTheme.primary} transition-colors`}
        onClick={(e) => {
          e.stopPropagation()
          setEditingBudget(budget)
        }}
        aria-label="Edit budget"
      >
        <FaEdit size={14} />
      </button>
      <button
        className={`p-2 rounded-full bg-${currentTheme.background} hover:bg-${currentTheme.danger}/10 text-${currentTheme.danger}/80 hover:text-${currentTheme.danger} transition-colors`}
        onClick={(e) => {
          e.stopPropagation()
          deleteBudget(budget.id)
        }}
        aria-label="Delete budget"
      >
        <FaTrash size={14} />
      </button>
    </div>
  </td>
</motion.tr>

                    {/* Expanded budget details */}
                    {expandedBudget === budget.id && (
                      <motion.tr
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        className={`bg-${currentTheme.background}/30 border-b border-${currentTheme.border}`}
                      >
                        <td colSpan={7} className="p-0">
                          <motion.div
                            initial={{ height: 0 }}
                            animate={{ height: "auto" }}
                            exit={{ height: 0 }}
                            transition={{ duration: 0.2 }}
                            className="overflow-hidden"
                          >
                        <div className="p-4 sm:p-6 space-y-5 bg-white dark:bg-gray-800 rounded-xl shadow-lg" ref={budgetCardRef}>
                          {/* Header section with better mobile layout */}
                          <div className="flex flex-col space-y-4">
                            {/* Budget title and tags */}
                            <div className="flex flex-col space-y-2">
                              <h3 className="text-xl font-bold text-gray-800 dark:text-white">{budget.name}</h3>
                              <div className="flex flex-wrap items-center gap-2">
                                <span className="px-2 py-0.5 rounded-full text-xs bg-indigo-100 text-indigo-700 border border-indigo-300 dark:bg-indigo-900 dark:text-indigo-300 dark:border-indigo-700">
                                  {budget.period}
                                </span>
                                <span className="text-sm text-gray-600 dark:text-gray-300 flex items-center">
                                  <FaCalendarAlt className="mr-1" size={12} />
                                  {formatDate(budget.startDate)} - {formatDate(budget.endDate)}
                                </span>
                                {new Date() > new Date(budget.endDate) && (
                                  <span className="px-2 py-0.5 rounded-full text-xs bg-amber-100 text-amber-700 border border-amber-300 dark:bg-amber-900 dark:text-amber-300 dark:border-amber-700">
                                    Expired
                                  </span>
                                )}
                                {new Date() < new Date(budget.startDate) && (
                                  <span className="px-2 py-0.5 rounded-full text-xs bg-blue-100 text-blue-700 border border-blue-300 dark:bg-blue-900 dark:text-blue-300 dark:border-blue-700">
                                    Upcoming
                                  </span>
                                )}
                              </div>
                            </div>

                            {/* Budget progress card with enhanced mobile design */}
                            <div className="w-full p-4 rounded-lg bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 shadow-sm">
                              <div className="flex justify-between items-center mb-2">
                                <span className="text-sm font-medium text-gray-700 dark:text-gray-200">Budget Progress</span>
                                <div className="flex items-center gap-2">
                                  <span className={`text-sm font-medium ${
                                    spentPercentage > 100
                                      ? "text-red-600 dark:text-red-400"
                                      : spentPercentage > 80
                                        ? "text-yellow-600 dark:text-yellow-400"
                                        : "text-green-600 dark:text-green-400"
                                  }`}>
                                    {Math.round(spentPercentage)}%
                                  </span>
                                  <div className={`w-3 h-3 rounded-full ${
                                    spentPercentage > 100
                                      ? "bg-red-500"
                                      : spentPercentage > 80
                                        ? "bg-yellow-500"
                                        : "bg-green-500"
                                  }`}></div>
                                </div>
                              </div>
                              
                              {/* Progress bar */}
                              <div className="h-2.5 w-full bg-gray-300 dark:bg-gray-600 rounded-full overflow-hidden mb-3">
                                <div
                                  className={`h-full ${
                                    spentPercentage > 100
                                      ? "bg-red-500"
                                      : spentPercentage > 80
                                        ? "bg-yellow-500"
                                        : "bg-green-500"
                                  }`}
                                  style={{ width: `${Math.min(spentPercentage, 100)}%` }}
                                ></div>
                              </div>
                              
                              {/* Key budget stats - better for mobile */}
                              <div className="flex flex-col sm:flex-row gap-2">
                                <div className="flex-1 p-2.5 rounded bg-white dark:bg-gray-800 text-center">
                                  <div className="text-xs text-gray-500 dark:text-gray-400">Target</div>
                                  <div className="text-sm font-medium text-gray-800 dark:text-white">
                                    {formatCurrency(budget.targetAmount)}
                                  </div>
                                </div>
                                <div className="flex-1 p-2.5 rounded bg-white dark:bg-gray-800 text-center">
                                  <div className="text-xs text-gray-500 dark:text-gray-400">Spent</div>
                                  <div className={`text-sm font-medium ${spentPercentage > 100 ? "text-red-600 dark:text-red-400" : "text-gray-800 dark:text-white"}`}>
                                    {formatCurrency(spentAmount)}
                                  </div>
                                </div>
                                <div className="flex-1 p-2.5 rounded bg-white dark:bg-gray-800 text-center">
                                  <div className="text-xs text-gray-500 dark:text-gray-400">Remaining</div>
                                  <div className={`text-sm font-medium ${budget.targetAmount - spentAmount < 0 ? "text-red-600 dark:text-red-400" : "text-green-600 dark:text-green-400"}`}>
                                    {formatCurrency(Math.max(0, budget.targetAmount - spentAmount))}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Budget categories - improved mobile layout */}
                          <div className="pt-2">
                            <h4 className="text-sm font-bold text-gray-800 dark:text-white mb-3 uppercase tracking-wide">
                              Budget Categories
                            </h4>
                            <div className="grid grid-cols-1 gap-3">
                              {updatedCategories.map((category, idx) => {
                                const categoryPercentage = (category.spent / category.allocated) * 100;
                                return (
                                  <div
                                    key={idx}
                                    className={`p-3 rounded-lg bg-white dark:bg-gray-700 border shadow-sm ${
                                      category.spent > category.allocated
                                        ? "border-red-300 dark:border-red-700"
                                        : category.spent > category.allocated * 0.8
                                          ? "border-yellow-300 dark:border-yellow-700"
                                          : "border-gray-200 dark:border-gray-600"
                                    }`}
                                  >
                                    <div className="flex justify-between items-start mb-2">
                                      <div className="flex items-center">
                                        {/* Category icon */}
                                        <div className="w-6 h-6 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center mr-2">
                                          {category.name.toLowerCase().includes("food") ? (
                                            <FaUtensils size={12} className="text-indigo-600 dark:text-indigo-300" />
                                          ) : category.name.toLowerCase().includes("transport") ? (
                                            <FaCar size={12} className="text-indigo-600 dark:text-indigo-300" />
                                          ) : category.name.toLowerCase().includes("home") ||
                                            category.name.toLowerCase().includes("rent") ? (
                                            <FaHome size={12} className="text-indigo-600 dark:text-indigo-300" />
                                          ) : category.name.toLowerCase().includes("entertainment") ? (
                                            <FaFilm size={12} className="text-indigo-600 dark:text-indigo-300" />
                                          ) : category.name.toLowerCase().includes("health") ? (
                                            <FaMedkit size={12} className="text-indigo-600 dark:text-indigo-300" />
                                          ) : category.name.toLowerCase().includes("shopping") ? (
                                            <FaShoppingBag size={12} className="text-indigo-600 dark:text-indigo-300" />
                                          ) : category.name.toLowerCase().includes("bill") ||
                                            category.name.toLowerCase().includes("utility") ? (
                                            <FaFileInvoiceDollar size={12} className="text-indigo-600 dark:text-indigo-300" />
                                          ) : (
                                            <FaTags size={12} className="text-indigo-600 dark:text-indigo-300" />
                                          )}
                                        </div>
                                        <span className="text-sm font-medium text-gray-800 dark:text-white">{category.name}</span>
                                      </div>
                                      <span
                                        className={`text-xs px-2 py-0.5 rounded-full ${
                                          category.spent > category.allocated
                                            ? "bg-red-100 text-red-700 border border-red-300 dark:bg-red-900 dark:text-red-300 dark:border-red-700"
                                            : category.spent > category.allocated * 0.8
                                              ? "bg-yellow-100 text-yellow-700 border border-yellow-300 dark:bg-yellow-900 dark:text-yellow-300 dark:border-yellow-700"
                                              : "bg-green-100 text-green-700 border border-green-300 dark:bg-green-900 dark:text-green-300 dark:border-green-700"
                                        }`}
                                      >
                                        {Math.round(categoryPercentage)}%
                                      </span>
                                    </div>
                                    
                                    {/* Progress bar for category */}
                                    <div className="h-2 w-full bg-gray-200 dark:bg-gray-600 rounded-full overflow-hidden mb-2">
                                      <div
                                        className={`h-full ${
                                          category.spent > category.allocated
                                            ? "bg-red-500"
                                            : category.spent > category.allocated * 0.8
                                              ? "bg-yellow-500"
                                              : "bg-green-500"
                                        }`}
                                        style={{ width: `${Math.min(categoryPercentage, 100)}%` }}
                                      ></div>
                                    </div>
                                    
                                    {/* Category stats */}
                                    <div className="flex gap-2 text-xs mt-1">
                                      <div className="flex-1 p-2 rounded bg-gray-50 dark:bg-gray-800 text-center">
                                        <div className="text-gray-500 dark:text-gray-400 mb-0.5">Allocated</div>
                                        <div className="font-medium text-gray-800 dark:text-white">
                                          {formatCurrency(category.allocated)}
                                        </div>
                                      </div>
                                      <div className="flex-1 p-2 rounded bg-gray-50 dark:bg-gray-800 text-center">
                                        <div className="text-gray-500 dark:text-gray-400 mb-0.5">Spent</div>
                                        <div className={`font-medium ${
                                          category.spent > category.allocated
                                            ? "text-red-600 dark:text-red-400"
                                            : "text-gray-800 dark:text-white"
                                        }`}>
                                          {formatCurrency(category.spent)}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </div>

                          {/* Recent Transactions section - mobile optimized */}
                          <div className="pt-2">
                            <h4 className="text-sm font-bold text-gray-800 dark:text-white mb-3 uppercase tracking-wide flex justify-between items-center">
                              <span>Recent Transactions</span>
                              <button
                                onClick={() => {
                                  const categoryNames = budget.categories?.map((cat) => cat.name) || [];
                                  const categorySearchQuery = categoryNames.join(" OR ");
                                  setSearchQuery(categorySearchQuery);
                                  setActiveTab("transactions");
                                }}
                                className="text-xs text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300"
                              >
                                View All
                              </button>
                            </h4>
                            
                            {relevantTransactions.length > 0 ? (
                              <div className="rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
                                {/* Desktop view */}
                                <div className="hidden sm:block">
                                  <table className="w-full text-left text-sm">
                                    <thead className="bg-gray-100 dark:bg-gray-700">
                                      <tr>
                                        <th className="p-2 text-xs font-medium text-gray-600 dark:text-gray-300">Date</th>
                                        <th className="p-2 text-xs font-medium text-gray-600 dark:text-gray-300">Description</th>
                                        <th className="p-2 text-xs font-medium text-gray-600 dark:text-gray-300">Category</th>
                                        <th className="p-2 text-xs font-medium text-gray-600 dark:text-gray-300 text-right">Amount</th>
                                      </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-800">
                                      {relevantTransactions.slice(0, 5).map((transaction, idx) => (
                                        <tr key={idx} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                                          <td className="p-2 text-gray-600 dark:text-gray-400">{formatDate(transaction.date)}</td>
                                          <td className="p-2 text-gray-800 dark:text-gray-200">{transaction.description}</td>
                                          <td className="p-2">
                                            <span className="px-1.5 py-0.5 rounded-full text-xs bg-indigo-100 text-indigo-700 dark:bg-indigo-900 dark:text-indigo-300">
                                              {(() => {
                                                const category = categories.find((c) => c.id === transaction.category);
                                                return category ? category.name : transaction.category;
                                              })()}
                                            </span>
                                          </td>
                                          <td className="p-2 text-right text-red-600 dark:text-red-400 font-medium">
                                            -{formatCurrency(transaction.amount)}
                                          </td>
                                        </tr>
                                      ))}
                                    </tbody>
                                  </table>
                                </div>
                                
                                {/* Mobile cards view */}
                                <div className="sm:hidden divide-y divide-gray-200 dark:divide-gray-700">
                                  {relevantTransactions.slice(0, 5).map((transaction, idx) => (
                                    <div key={idx} className="p-3 bg-white dark:bg-gray-800">
                                      <div className="flex justify-between items-start">
                                        <div className="flex-1">
                                          <div className="text-sm font-medium text-gray-800 dark:text-gray-200">{transaction.description}</div>
                                          <div className="text-xs text-gray-500 dark:text-gray-400 mt-0.5">{formatDate(transaction.date)}</div>
                                        </div>
                                        <div className="text-right">
                                          <div className="text-sm font-medium text-red-600 dark:text-red-400">-{formatCurrency(transaction.amount)}</div>
                                          <div className="mt-1">
                                            <span className="px-1.5 py-0.5 rounded-full text-xs bg-indigo-100 text-indigo-700 dark:bg-indigo-900 dark:text-indigo-300">
                                              {(() => {
                                                const category = categories.find((c) => c.id === transaction.category);
                                                return category ? category.name : transaction.category;
                                              })()}
                                            </span>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            ) : (
                              <div className="py-4 text-center text-sm text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
                                No recent transactions for this budget period
                              </div>
                            )}
                          </div>

                          {/* Notes section - enhanced for mobile */}
                          {budget.notes && (
                            <div className="pt-2">
                              <div className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
                                <h4 className="text-xs font-semibold text-gray-500 dark:text-gray-300 uppercase tracking-wider mb-2">
                                  Notes
                                </h4>
                                <p className="text-sm text-gray-700 dark:text-gray-200 whitespace-pre-wrap">{budget.notes}</p>
                              </div>
                            </div>
                          )}
                        </div>
                              <div className=" p-2 flex flex-col justify-end gap-2">

                              <button
                                  className={`px-3 py-1.5 text-xs bg-${currentTheme.accent}/10 hover:bg-${currentTheme.accent}/20 text-${currentTheme.accent} rounded border border-${currentTheme.accent}/30 flex items-center`}
                                  onClick={() => generateBudgetReport(budget)}
                                >
                                  <FaDownload className="mr-1.5" size={12} /> Generate Report
                                </button>

                                <button
                                  className={`px-3 py-1.5 text-xs bg-${currentTheme.primary}/10 hover:bg-${currentTheme.primary}/20 text-${currentTheme.primary} rounded border border-${currentTheme.primary}/30 flex items-center`}
                                  onClick={() => {
                                    setEditingBudget(budget)
                                  }}
                                >
                                  <FaEdit className="mr-1.5" size={12} /> Edit Budget
                                </button>
                              </div>
                          </motion.div>
                        </td>
                      </motion.tr>
                    )}
                  </React.Fragment>
                )
              })}
            </motion.tbody>
          </table>
        </div>
      )}
    </motion.div>
  )}       
            
{/* Payrolls Tab */}
{activeTab === "payrolls" && (
  <motion.div variants={fadeIn}>
    <div className={`flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4`}>
      <div>
        <h2 className={`text-xl sm:text-2xl font-bold bg-gradient-to-r from-${currentTheme.accent} to-${currentTheme.primary} bg-clip-text text-transparent pb-1`}>
          Payroll Management
        </h2>
        <p className={`text-sm text-gray-400`}>
          {searchQuery ? (
            `Showing ${payrolls.filter(p => 
              p.employeeName.toLowerCase().includes(searchQuery.toLowerCase()) || 
              p.position.toLowerCase().includes(searchQuery.toLowerCase())
            ).length} payroll records`
          ) : (
            `Manage employee compensation and payment records`
          )}
        </p>
      </div>
      <button 
        className={`group flex items-center justify-center bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent} hover:from-${currentTheme.accent} hover:to-${currentTheme.primary} text-${currentTheme.buttonText} px-5 py-2.5 rounded-lg shadow-md text-sm font-medium transition-all duration-300 transform hover:scale-105 w-full sm:w-auto`}
        onClick={() => setShowPayrollModal(true)}
      >
        <span className={`absolute -inset-0.5 rounded-lg blur opacity-30 group-hover:opacity-50 transition duration-300 bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent}`}></span>
        <FaPlus className="mr-2" /> Add New Payroll
      </button>
    </div>

    <div className={`h-0.5 w-full bg-gradient-to-r from-${currentTheme.border} via-${currentTheme.accent}/20 to-${currentTheme.border} mb-6 rounded-full`}></div>
    
    {payrolls.length === 0 ? (
      <motion.div 
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5, type: "spring", stiffness: 100 }}
        className={`text-center py-12 sm:py-16 bg-${currentTheme.background}/50 rounded-2xl border border-${currentTheme.border} shadow-sm backdrop-blur-sm`}
      >
        <div className="relative mb-6 inline-flex">
          <div className={`absolute inset-0 rounded-full blur-md bg-${currentTheme.accent}/20`}></div>
          <div className={`relative z-10 w-20 h-20 flex items-center justify-center rounded-full bg-gradient-to-br from-${currentTheme.background} to-${currentTheme.cardBackground} border border-${currentTheme.border} shadow-inner`}>
            <FaMoneyBillWave className={`text-5xl text-${currentTheme.accent}/80`} />
          </div>
        </div>
        <h3 className={`text-xl sm:text-2xl font-bold text-${currentTheme.text} mb-3`}>No Payroll Records Yet</h3>
        <p className="text-gray-400 max-w-md mx-auto px-6">
          Track employee compensation, process payments, and manage payroll history from one centralized dashboard.
        </p>
        <button 
          className={`mt-6 group relative flex items-center justify-center mx-auto bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent} hover:from-${currentTheme.accent} hover:to-${currentTheme.primary} text-${currentTheme.buttonText} px-6 py-3 rounded-lg shadow-md font-medium transition-all duration-300 transform hover:scale-105`}
          onClick={() => setShowPayrollModal(true)}
        >
          <span className={`absolute -inset-0.5 rounded-lg blur opacity-30 group-hover:opacity-50 transition duration-300 bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent}`}></span>
          <span className="relative flex items-center">
            <FaPlus className="mr-2" /> Create First Payroll Record
          </span>
        </button>
      </motion.div>
    ) : (
      <>
        {/* Filter & Sort Controls */}
        <div className="flex flex-col sm:flex-row gap-3 mb-4">
          <div className={`flex items-center px-4 py-2 rounded-lg bg-${currentTheme.background}/50 border border-${currentTheme.border} w-full sm:w-auto`}>
            <FaFilter className={`mr-2 text-${currentTheme.accent}`} size={12} />
            <select 
              title="Filter by status"
              className={`bg-transparent text-${currentTheme.text} text-sm focus:outline-none w-full`}
              onChange={(e) => {/* implement filter handler */}}
            >
              <option value="all">All Records</option>
              <option value="paid">Paid Only</option>
              <option value="pending">Pending Only</option>
              <option value="recent">Last 30 Days</option>
            </select>
          </div>
          
          <div className={`flex items-center px-4 py-2 rounded-lg bg-${currentTheme.background}/50 border border-${currentTheme.border} w-full sm:w-auto`}>
            <FaSortAmountDown className={`mr-2 text-${currentTheme.accent}`} size={12} />
            <select 
              title="Sort by date or amount"
              className={`bg-transparent text-${currentTheme.text} text-sm focus:outline-none w-full`}
              onChange={(e) => {/* implement sort handler */}}
            >
              <option value="date-desc">Newest First</option>
              <option value="date-asc">Oldest First</option>
              <option value="amount-desc">Highest Amount</option>
              <option value="amount-asc">Lowest Amount</option>
            </select>
          </div>
          
          {payrolls.length > 0 && (
            <div className={`ml-auto text-sm text-${currentTheme.accent}`}>
              <span className="font-medium">{payrolls.length}</span> total records
            </div>
          )}
        </div>

        {/* Desktop table view (hidden on small screens) */}
        <div className={`hidden lg:block overflow-hidden rounded-xl border border-${currentTheme.border} shadow-sm`}>
          <table className="w-full text-left">
            <thead>
              <tr className={`bg-gradient-to-r from-${currentTheme.background} to-${currentTheme.cardBackground}`}>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider">Employee</th>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider">Contact Info</th>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider">Pay Period</th>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider">Compensation</th>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider text-center">Status</th>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider">Actions</th>
              </tr>
            </thead>
            <motion.tbody
              variants={staggerContainer}
              initial="hidden"
              animate="visible"
            >
              {payrolls.map((payroll) => (
                <motion.tr 
                  key={payroll.id} 
                  variants={tableRowVariant}
                  className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/70 transition-all duration-200`}
                >
                  <td className={`px-6 py-4`}>
                    <div className="flex items-center">
                      <div className={`w-9 h-9 rounded-full bg-gradient-to-br from-${currentTheme.primary}/20 to-${currentTheme.accent}/30 border border-${currentTheme.border} flex items-center justify-center mr-3 text-${currentTheme.accent}`}>
                        {payroll.employeeName.charAt(0).toUpperCase()}
                      </div>
                      <div>
                        <div className={`text-sm font-medium text-${currentTheme.text}`}>{payroll.employeeName}</div>
                        <div className="text-xs text-gray-400">{payroll.position}</div>
                      </div>
                    </div>
                  </td>
                  <td className={`px-6 py-4`}>
                    <div className="space-y-1">
                      {payroll.employeePhone && (
                        <div className="flex items-center text-xs text-gray-400">
                          <FaPhone className="mr-2 text-gray-500" size={10} />
                          <span>{payroll.employeePhone}</span>
                        </div>
                      )}
                      {payroll.employeeEmail && (
                        <div className="flex items-center text-xs text-gray-400">
                          <FaEnvelope className="mr-2 text-gray-500" size={10} />
                          <span>{payroll.employeeEmail}</span>
                        </div>
                      )}
                      {payroll.employeeAddress && (
                        <div className="flex items-start text-xs text-gray-400">
                          <FaMapMarkerAlt className="mr-2 mt-0.5 text-gray-500" size={10} />
                          <span className="truncate max-w-[200px]" title={payroll.employeeAddress}>
                            {payroll.employeeAddress}
                          </span>
                        </div>
                      )}
                    </div>
                  </td>
                  <td className={`px-6 py-4`}>
                    <div className="flex items-center">
                      <div className={`p-1.5 rounded-md bg-${currentTheme.background} mr-3 border border-${currentTheme.border}`}>
                        <FaCalendarAlt className="text-gray-400" size={14} />
                      </div>
                      <div className={`text-sm text-${currentTheme.text}`}>
                        <div className="flex items-center">
                          <span>{formatDate(payroll.payPeriodStart)}</span>
                          <span className="mx-2 text-gray-400">→</span>
                          <span>{formatDate(payroll.payPeriodEnd)}</span>
                        </div>
                        <div className="text-xs text-gray-400 mt-0.5">
                          {(() => {
                            // Calculate days in pay period
                            const start = new Date(payroll.payPeriodStart);
                            const end = new Date(payroll.payPeriodEnd);
                            const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
                            return `${days} day${days !== 1 ? 's' : ''} period`;
                          })()}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className={`px-6 py-4`}>
                    <div className="flex flex-col">
                      <div className={`text-sm font-semibold text-${currentTheme.text}`}>
                        {formatCurrency(payroll.netPay)}
                      </div>
                      <div className="flex items-center text-xs text-gray-400 mt-1 space-x-2">
                        <div className="flex items-center">
                          <FaArrowUp className={`text-${currentTheme.success} mr-1`} size={8} />
                          <span>Base: {formatCurrency(payroll.baseSalary)}</span>
                        </div>
                        {payroll.overtime > 0 && (
                          <div className="flex items-center">
                            <FaClock className={`text-${currentTheme.warning} mr-1`} size={8} />
                            <span>OT: {formatCurrency(payroll.overtime)}</span>
                          </div>
                        )}
                        {payroll.deductions > 0 && (
                          <div className="flex items-center">
                            <FaArrowDown className={`text-${currentTheme.danger} mr-1`} size={8} />
                            <span>Ded: {formatCurrency(payroll.deductions)}</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    {payroll.status === 'paid' ? (
                      <div className="flex flex-col items-center">
                        <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100/30 text-green-500 border border-green-200/30">
                          <FaCheckCircle className="mr-1.5" size={12} />
                          Paid
                        </span>
                        {payroll.paymentDate && (
                          <span className="text-xs text-gray-400 mt-1.5">
                            {formatDate(payroll.paymentDate)}
                          </span>
                        )}
                      </div>
                    ) : (
                      <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-yellow-100/30 text-yellow-500 border border-yellow-200/30">
                        <FaClock className="mr-1.5" size={12} />
                        Pending
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4">
                    {payroll.status === 'paid' ? (
                      <div className="flex space-x-2">
                        <button 
                          className={`px-3 py-1.5 text-xs bg-${currentTheme.accent}/10 hover:bg-${currentTheme.accent}/20 text-${currentTheme.accent} rounded-md transition-colors flex items-center`}
                          onClick={() => viewPayrollDetails(payroll)}
                        >
                          <FaEye className="mr-1.5" size={12} /> View Details
                        </button>
                      </div>
                    ) : (
                      <button 
                        className={`px-3 py-1.5 text-xs bg-${currentTheme.success}/10 hover:bg-${currentTheme.success}/20 text-${currentTheme.success} rounded-md transition-colors flex items-center`}
                        onClick={() => handlePayrollPayment(payroll)}
                      >
                        <FaMoneyBillWave className="mr-1.5" size={12} /> Process Payment
                      </button>
                    )}
                  </td>
                </motion.tr>
              ))}
            </motion.tbody>
          </table>
        </div>

        {/* Medium screen table view (hidden on small and large screens) */}
        <div className={`hidden md:block lg:hidden overflow-hidden rounded-xl border border-${currentTheme.border} shadow-sm`}>
          <table className="w-full text-left">
            <thead>
              <tr className={`bg-gradient-to-r from-${currentTheme.background} to-${currentTheme.cardBackground}`}>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider">Employee</th>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider">Pay Period</th>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider text-center">Status</th>
                <th className="px-6 py-4 text-xs uppercase font-semibold text-gray-400 tracking-wider">Actions</th>
              </tr>
            </thead>
            <motion.tbody
              variants={staggerContainer}
              initial="hidden"
              animate="visible"
            >
              {payrolls.map((payroll) => (
                <motion.tr 
                  key={payroll.id} 
                  variants={tableRowVariant}
                  className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/70 transition-all duration-200`}
                >
                  <td className={`px-6 py-4`}>
                    <div className="flex items-start gap-3">
                      <div className={`w-9 h-9 rounded-full bg-gradient-to-br from-${currentTheme.primary}/20 to-${currentTheme.accent}/30 border border-${currentTheme.border} flex items-center justify-center text-${currentTheme.accent} flex-shrink-0`}>
                        {payroll.employeeName.charAt(0).toUpperCase()}
                      </div>
                      <div>
                        <div className={`text-sm font-medium text-${currentTheme.text}`}>{payroll.employeeName}</div>
                        <div className="text-xs text-gray-400">{payroll.position}</div>
                        
                        <div className="mt-1.5 space-y-0.5">
                          {payroll.employeePhone && (
                            <div className="flex items-center text-xs text-gray-400">
                              <FaPhone className="mr-1.5 text-gray-500" size={10} />
                              <span>{payroll.employeePhone}</span>
                            </div>
                          )}
                          {payroll.employeeEmail && (
                            <div className="flex items-center text-xs text-gray-400">
                              <FaEnvelope className="mr-1.5 text-gray-500" size={10} />
                              <span className="truncate max-w-[150px]" title={payroll.employeeEmail}>{payroll.employeeEmail}</span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className={`px-6 py-4`}>
                    <div className="flex items-center">
                      <div className={`text-sm text-${currentTheme.text}`}>
                        <div className="flex items-center">
                          <span>{formatDate(payroll.payPeriodStart)}</span>
                          <span className="mx-1.5 text-gray-400">→</span>
                          <span>{formatDate(payroll.payPeriodEnd)}</span>
                        </div>
                        <div className="mt-1 flex justify-between items-center">
                          <div className="text-xs text-gray-400">
                            {(() => {
                              const start = new Date(payroll.payPeriodStart);
                              const end = new Date(payroll.payPeriodEnd);
                              const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
                              return `${days} day${days !== 1 ? 's' : ''}`;
                            })()}
                          </div>
                          <div className={`text-sm font-medium text-${currentTheme.accent}`}>
                            {formatCurrency(payroll.netPay)}
                          </div>
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    {payroll.status === 'paid' ? (
                      <div className="flex flex-col items-center">
                        <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100/30 text-green-500 border border-green-200/30">
                          <FaCheckCircle className="mr-1.5" size={12} />
                          Paid
                        </span>
                        {payroll.paymentDate && (
                          <span className="text-xs text-gray-400 mt-1.5">
                            {formatDate(payroll.paymentDate)}
                          </span>
                        )}
                      </div>
                    ) : (
                      <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-yellow-100/30 text-yellow-500 border border-yellow-200/30">
                        <FaClock className="mr-1.5" size={12} />
                        Pending
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4">
                    {payroll.status === 'paid' ? (
                      <div className="flex space-x-2">
                        <button 
                          className={`px-3 py-1.5 text-xs bg-${currentTheme.accent}/10 hover:bg-${currentTheme.accent}/20 text-${currentTheme.accent} rounded-md transition-colors flex items-center`}
                          onClick={() => viewPayrollDetails(payroll)}
                        >
                          <FaEye className="mr-1.5" size={12} /> View
                        </button>
                      </div>
                    ) : (
                      <button 
                        className={`px-3 py-1.5 text-xs bg-${currentTheme.success}/10 hover:bg-${currentTheme.success}/20 text-${currentTheme.success} rounded-md transition-colors flex items-center`}
                        onClick={() => handlePayrollPayment(payroll)}
                      >
                        <FaMoneyBillWave className="mr-1.5" size={12} /> Pay
                      </button>
                    )}
                  </td>
                </motion.tr>
              ))}
            </motion.tbody>
          </table>
        </div>

        {/* Mobile card view (visible only on small screens) */}
        <div className="md:hidden space-y-4">
          <motion.div 
            variants={staggerContainer}
            initial="hidden" 
            animate="visible" 
            className="grid gap-4"
          >
            {payrolls.map((payroll) => (
              <motion.div 
                key={payroll.id} 
                variants={tableRowVariant}
                className={`p-4 rounded-xl border shadow-sm bg-${currentTheme.cardBackground} ${
                  payroll.status === 'paid' 
                    ? `border-l-4 border-green-500/50` 
                    : `border-l-4 border-yellow-500/50`
                }`}
              >
                <div className="flex justify-between items-start mb-3">
                  <div className="flex items-center">
                    <div className={`w-9 h-9 rounded-full bg-gradient-to-br from-${currentTheme.primary}/20 to-${currentTheme.accent}/30 border border-${currentTheme.border} flex items-center justify-center mr-3 text-${currentTheme.accent}`}>
                      {payroll.employeeName.charAt(0).toUpperCase()}
                    </div>
                    <div>
                      <div className={`font-medium text-${currentTheme.text}`}>{payroll.employeeName}</div>
                      <div className="text-xs text-gray-400">{payroll.position}</div>
                    </div>
                  </div>
                  
                  {payroll.status === 'paid' ? (
                    <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100/30 text-green-500 border border-green-200/30">
                      <FaCheckCircle className="mr-1" size={10} />
                      Paid
                    </span>
                  ) : (
                    <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-yellow-100/30 text-yellow-500 border border-yellow-200/30">
                      <FaClock className="mr-1" size={10} />
                      Pending
                    </span>
                  )}
                </div>
                
                {/* Contact information */}
                <div className={`p-3 rounded-lg bg-${currentTheme.background}/70 mb-3 space-y-1.5`}>
                  {payroll.employeePhone && (
                    <div className="flex items-center text-xs text-gray-400">
                      <FaPhone className="mr-2 text-gray-500" size={10} />
                      <span>{payroll.employeePhone}</span>
                    </div>
                  )}
                  {payroll.employeeEmail && (
                    <div className="flex items-center text-xs text-gray-400">
                      <FaEnvelope className="mr-2 text-gray-500" size={10} />
                      <span className="truncate">{payroll.employeeEmail}</span>
                    </div>
                  )}
                  {payroll.employeeAddress && (
                    <div className="flex items-start text-xs text-gray-400">
                      <FaMapMarkerAlt className="mr-2 mt-0.5 text-gray-500" size={10} />
                      <span className="line-clamp-2">{payroll.employeeAddress}</span>
                    </div>
                  )}
                </div>
                
                {/* Pay period info */}
                <div className={`p-3 rounded-lg bg-${currentTheme.background}/70 mb-3`}>
                  <div className="flex justify-between mb-2">
                    <span className="text-xs text-gray-400">Pay Period</span>
                    <span className="text-xs text-gray-400">
                      {payroll.status === 'paid' && payroll.paymentDate ? `Paid on ${formatDate(payroll.paymentDate)}` : ''}
                    </span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <FaCalendarAlt className="text-gray-400" size={12} />
                    <span className={`text-sm text-${currentTheme.text}`}>
                      {formatDate(payroll.payPeriodStart)} - {formatDate(payroll.payPeriodEnd)}
                    </span>
                  </div>
                </div>
                
                {/* Compensation breakdown */}
                <div className={`mb-4 grid grid-cols-3 divide-x divide-${currentTheme.border}`}>
                  <div className="px-3 py-1 text-center">
                    <div className="text-xs text-gray-400 mb-1">Base</div>
                    <div className={`text-sm text-${currentTheme.text}`}>{formatCurrency(payroll.baseSalary)}</div>
                  </div>
                  <div className="px-3 py-1 text-center">
                    <div className="text-xs text-gray-400 mb-1">Net Pay</div>
                    <div className={`text-sm font-semibold text-${currentTheme.accent}`}>{formatCurrency(payroll.netPay)}</div>
                  </div>
                  <div className="px-3 py-1 text-center">
                    <div className="text-xs text-gray-400 mb-1">Deductions</div>
                    <div className={`text-sm text-${currentTheme.danger}`}>-{formatCurrency(payroll.deductions)}</div>
                  </div>
                </div>
                
                {/* Action buttons */}
                <div className="flex justify-end pt-2 border-t border-dashed border-gray-600/20">
                  {payroll.status === 'paid' ? (
                    <button 
                      className={`w-full px-3 py-2.5 text-sm bg-${currentTheme.accent}/10 hover:bg-${currentTheme.accent}/20 text-${currentTheme.accent} rounded-lg transition-colors flex items-center justify-center font-medium`}
                      onClick={() => viewPayrollDetails(payroll)}
                    >
                      <FaEye className="mr-1.5" size={14} /> View Payment Details
                    </button>
                  ) : (
                    <button 
                      className={`w-full px-3 py-2.5 text-sm bg-${currentTheme.success}/10 hover:bg-${currentTheme.success}/20 text-${currentTheme.success} rounded-lg transition-colors flex items-center justify-center font-medium`}
                      onClick={() => handlePayrollPayment(payroll)}
                    >
                      <FaMoneyBillWave className="mr-1.5" size={14} /> Process Payment
                    </button>
                  )}
                </div>
              </motion.div>
            ))}
          </motion.div>
        </div>

                {/* Pagination controls - show when there are multiple pages */}
                {payrolls.length > 10 && (
          <div className="flex justify-between items-center mt-6 py-3 border-t border-gray-700/30">
            <button 
              className={`flex items-center text-sm text-${currentTheme.accent} px-3 py-1.5 rounded-md bg-${currentTheme.background}/50 border border-${currentTheme.border} hover:bg-${currentTheme.background}/70 transition-colors disabled:opacity-50 disabled:cursor-not-allowed`}
              disabled={true}
            >
              <FaChevronLeft className="mr-1" size={12} /> Previous
            </button>
            
            <div className="flex items-center gap-2">
              {[1, 2, 3].map((page) => (
                <button
                  key={page}
                  className={`w-8 h-8 text-sm rounded-md ${
                    page === 1 
                      ? `bg-${currentTheme.accent} text-${currentTheme.buttonText}` 
                      : `text-${currentTheme.text} hover:bg-${currentTheme.background}/50`
                  }`}
                >
                  {page}
                </button>
              ))}
              <span className={`text-${currentTheme.text} mx-2`}>...</span>
              <button className={`text-${currentTheme.text} hover:bg-${currentTheme.background}/50 w-8 h-8 text-sm rounded-md`}>
                5
              </button>
            </div>
            
            <button 
              className={`flex items-center text-sm text-${currentTheme.accent} px-3 py-1.5 rounded-md bg-${currentTheme.background}/50 border border-${currentTheme.border} hover:bg-${currentTheme.background}/70 transition-colors`}
            >
              Next <FaChevronRight className="ml-1" size={12} />
            </button>
          </div>
        )}
      </>
    )}
  </motion.div>
)}


{activeTab === "employees" && (
  <motion.div 
    variants={fadeIn}
    className="space-y-6"
  >
    {/* Enhanced Header Section */}
    <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
      <div>
        <h2 className={`bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent} bg-clip-text text-transparent text-2xl font-bold pb-1`}>
          Employee Management
        </h2>
        <p className="text-sm text-gray-400">
          {searchQuery 
            ? `Showing ${filteredEmployees.length} employee${filteredEmployees.length !== 1 ? 's' : ''}`
            : 'Manage your team members and staff information'
          }
        </p>
      </div>
      
      <button
        className={`group relative flex items-center justify-center px-4 py-2.5 bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent} hover:from-${currentTheme.accent} hover:to-${currentTheme.primary} text-${currentTheme.buttonText} rounded-lg shadow-lg transition-all duration-300 transform hover:scale-[1.02] w-full sm:w-auto`}
        onClick={() => {
          setEditingEmployee(null);
          setShowEmployeeModal(true);
        }}
      >
        <span className={`absolute -inset-0.5 rounded-lg blur opacity-30 group-hover:opacity-50 transition duration-300 bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent}`}></span>
        <span className="relative flex items-center">
          <FaPlus className="mr-2 h-4 w-4" /> Add New Employee
        </span>
      </button>
    </div>
    
    {/* Divider with gradient */}
    <div className={`h-0.5 w-full bg-gradient-to-r from-${currentTheme.border} via-${currentTheme.accent}/20 to-${currentTheme.border} rounded-full`}></div>
    
    {/* Search & Filter Section */}
    <div className="flex flex-col sm:flex-row gap-3">
      <div className={`relative flex-grow`}>
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <FaSearch className={`text-${currentTheme.accent} h-4 w-4`} />
        </div>
        <input
          type="text"
          className={`pl-10 pr-4 py-2.5 w-full rounded-lg bg-${currentTheme.background}/50 border border-${currentTheme.border} text-${currentTheme.text} focus:ring-2 focus:ring-${currentTheme.accent} focus:border-transparent transition-all duration-200`}
          placeholder="Search employees by name or position..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
      </div>
      
      <div className={`flex items-center px-4 py-2.5 rounded-lg bg-${currentTheme.background}/50 border border-${currentTheme.border} w-full sm:w-auto`}>
        <FaFilter className={`mr-2 text-${currentTheme.accent} h-3.5 w-3.5`} />
        <select
        title="Filter by department" 
          className={`bg-transparent text-${currentTheme.text} focus:outline-none w-full`}
          onChange={(e) => {/* implement department filter */}}
        >
          <option value="">All Departments</option>
          <option value="marketing">Marketing</option>
          <option value="engineering">Engineering</option>
          <option value="finance">Finance</option>
          <option value="operations">Operations</option>
        </select>
      </div>
    </div>
    
    {/* Employee Cards Grid */}
    {filteredEmployees.length === 0 ? (
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ type: "spring", stiffness: 300, damping: 25 }}
        className={`text-center py-14 bg-${currentTheme.background}/50 rounded-xl border border-${currentTheme.border} shadow-sm backdrop-blur-sm`}
      >
        <div className="relative mb-6 inline-flex">
          <div className={`absolute inset-0 rounded-full blur-md bg-${currentTheme.accent}/20`}></div>
          <div className={`relative z-10 w-20 h-20 flex items-center justify-center rounded-full bg-gradient-to-br from-${currentTheme.background} to-${currentTheme.cardBackground} border border-${currentTheme.border} shadow-inner`}>
            <FaUsers className={`text-5xl text-${currentTheme.accent}/80`} />
          </div>
        </div>
        <h3 className={`text-xl font-bold text-${currentTheme.text} mb-3`}>
          No employees yet
        </h3>
        <p className="text-gray-400 max-w-md mx-auto px-6">
          {searchQuery 
            ? "No employees match your search criteria. Try different keywords." 
            : "Add your first employee to start building your team roster."}
        </p>
        {!searchQuery && (
          <button
            className={`mt-6 group relative flex items-center justify-center mx-auto bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent} hover:from-${currentTheme.accent} hover:to-${currentTheme.primary} text-${currentTheme.buttonText} px-6 py-3 rounded-lg shadow-md font-medium transition-all duration-300 transform hover:scale-105`}
            onClick={() => {
              setEditingEmployee(null);
              setShowEmployeeModal(true);
            }}
          >
            <span className={`absolute -inset-0.5 rounded-lg blur opacity-30 group-hover:opacity-50 transition duration-300 bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent}`}></span>
            <span className="relative flex items-center">
              <FaPlus className="mr-2" /> Add First Employee
            </span>
          </button>
        )}
      </motion.div>
    ) : (
      <motion.div 
        variants={staggerContainer}
        initial="hidden"
        animate="visible"
        className="grid gap-5 grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
      >
        {filteredEmployees.map(employee => (
          <motion.div
            key={employee.id}
            variants={cardVariant}
            whileHover="hover"
            className={`relative group overflow-hidden bg-gradient-to-br from-${currentTheme.cardBackground} to-${currentTheme.background} rounded-xl border border-${currentTheme.border} shadow-sm hover:shadow-lg transition-all duration-300`}
          >
            {/* Card Header - Top Gradient */}
            <div className={`absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent} transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-300`}></div>
            
            <div className="flex p-5">
              {/* Employee Avatar */}
              <div className={`w-16 h-16 rounded-xl bg-gradient-to-br from-${currentTheme.primary}/20 to-${currentTheme.accent}/30 border border-${currentTheme.border} flex items-center justify-center text-${currentTheme.accent} font-bold text-lg mr-4`}>
                {employee.name.charAt(0).toUpperCase() + (employee.name.split(' ')[1]?.[0]?.toUpperCase() || '')}
              </div>
              
              {/* Employee Info */}
              <div className="flex-1">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className={`text-base font-semibold text-${currentTheme.text} group-hover:text-${currentTheme.accent} transition-colors duration-300`}>
                      {employee.name}
                    </h3>
                    <div className={`inline-flex items-center px-2.5 py-0.5 mt-1 rounded-full text-xs font-medium bg-${currentTheme.accent}/10 text-${currentTheme.accent} border border-${currentTheme.accent}/30`}>
                      {employee.position}
                    </div>
                  </div>
                  
                  {/* Quick Actions - Visible on Hover */}
                  <div className="flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <button
                      className={`p-2 rounded-full bg-${currentTheme.accent}/10 hover:bg-${currentTheme.accent}/20 text-${currentTheme.accent} hover:text-${currentTheme.primary} transition-colors`}
                      onClick={() => {
                        setEditingEmployee(employee);
                        setShowEmployeeModal(true);
                      }}
                      title="Edit employee"
                    >
                      <FaPen className="h-3.5 w-3.5" />
                    </button>
                    <button
                      className={`p-2 rounded-full bg-${currentTheme.danger}/10 hover:bg-${currentTheme.danger}/20 text-${currentTheme.danger}/80 hover:text-${currentTheme.danger} transition-colors`}
                      onClick={() => deleteEmployee(employee.id)}
                      title="Delete employee"
                    >
                      <FaTrash className="h-3.5 w-3.5" />
                    </button>
                  </div>
                </div>
                
                {/* Department Tag */}
                {employee.department && (
                  <div className="mt-2 flex items-center">
                    <span className={`mr-2 text-${currentTheme.accent}/50`}>
                      <FaSuitcase className="h-3 w-3" />
                    </span>
                    <span className="text-sm text-gray-400">{employee.department}</span>
                  </div>
                )}
              </div>
            </div>
            
            {/* Contact Info Section */}
            <div className={`p-4 border-t border-${currentTheme.border}/50 space-y-2.5`}>
              {employee.email && (
                <div className="flex items-center text-sm">
                  <div className={`w-8 h-8 rounded-full bg-${currentTheme.background} flex items-center justify-center mr-3`}>
                    <FaEnvelope className="h-3.5 w-3.5 text-gray-400" />
                  </div>
                  <div className="text-gray-400 truncate">{employee.email}</div>
                </div>
              )}
              
              {employee.phone && (
                <div className="flex items-center text-sm">
                  <div className={`w-8 h-8 rounded-full bg-${currentTheme.background} flex items-center justify-center mr-3`}>
                    <FaPhone className="h-3.5 w-3.5 text-gray-400" />
                  </div>
                  <div className="text-gray-400">{employee.phone}</div>
                </div>
              )}
              
              {employee.address && (
                <div className="flex items-start text-sm">
                  <div className={`w-8 h-8 rounded-full bg-${currentTheme.background} flex items-center justify-center mr-3 mt-0.5`}>
                    <FaMapMarkerAlt className="h-3.5 w-3.5 text-gray-400" />
                  </div>
                  <div className="text-gray-400 line-clamp-2">{employee.address}</div>
                </div>
              )}
            </div>
            
            {/* Card Footer */}
            <div className={`px-5 py-3 border-t border-${currentTheme.border}/50 flex justify-between items-center bg-${currentTheme.background}/30`}>
              <div className="text-xs text-gray-500">
                {employee.hireDate ? (
                  <span className="flex items-center">
                    <FaCalendarAlt className="mr-1.5 h-3 w-3" />
                    Hired: {new Date(employee.hireDate).toLocaleDateString()}
                  </span>
                ) : (
                  <span className="flex items-center">
                    <FaIdCard className="mr-1.5 h-3 w-3" />
                    ID: {employee.id.substring(0, 8)}
                  </span>
                )}
              </div>
              
              <button
                className={`text-${currentTheme.accent} hover:text-${currentTheme.primary} text-xs flex items-center transition-colors`}
                onClick={() => {
                  setEditingEmployee(employee);
                  setShowEmployeeModal(true);
                }}
              >
                Manage <FaChevronRight className="ml-1 h-2.5 w-2.5" />
              </button>
            </div>
          </motion.div>
        ))}
      </motion.div>
    )}
    
    {/* Show pagination if needed */}
    {filteredEmployees.length > 12 && (
      <div className="flex justify-center mt-6">
        <nav className={`inline-flex rounded-md shadow-sm -space-x-px bg-${currentTheme.background} border border-${currentTheme.border}`} aria-label="Pagination">
          <button className={`relative inline-flex items-center px-2 py-2 rounded-l-md border-r border-${currentTheme.border} text-sm font-medium text-${currentTheme.accent} hover:bg-${currentTheme.background}/80`}>
            <FaChevronLeft className="h-4 w-4" />
          </button>
          <button className={`relative inline-flex items-center px-4 py-2 border-r border-${currentTheme.border} text-sm font-medium bg-${currentTheme.accent}/20 text-${currentTheme.accent}`}>1</button>
          <button className={`relative inline-flex items-center px-4 py-2 border-r border-${currentTheme.border} text-sm font-medium text-${currentTheme.text} hover:bg-${currentTheme.background}/80`}>2</button>
          <button className={`relative inline-flex items-center px-4 py-2 text-sm font-medium text-${currentTheme.text} hover:bg-${currentTheme.background}/80`}>3</button>
          <button className={`relative inline-flex items-center px-2 py-2 rounded-r-md border-l border-${currentTheme.border} text-sm font-medium text-${currentTheme.accent} hover:bg-${currentTheme.background}/80`}>
            <FaChevronRight className="h-4 w-4" />
          </button>
        </nav>
      </div>
    )}
  </motion.div>
)}

   </motion.div>
        </motion.div>
      </AnimatePresence>

      {/* Modals - Animate them with Framer Motion */}
      
      {/* Inventory Modal */}
      <AnimatePresence>
        {showInventoryModal && (
          <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.2 }}
          className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50 p-4"
        >
          <motion.div 
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border} max-h-[90vh] overflow-y-auto`}
            onClick={(e) => e.stopPropagation()}
          >
            <div className={`flex justify-between items-center sticky top-0 px-6 py-4 border-b border-${currentTheme.border} bg-${currentTheme.cardBackground} z-10`}>
              <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                <FaBoxOpen className={`mr-2 text-${currentTheme.accent}`} />
                {editingInventoryItem ? 'Edit Inventory Item' : 'Add Inventory Item'}
              </h3>
              <button 
                onClick={() => {
                  setShowInventoryModal(false);
                  setEditingInventoryItem(null);
                }}
                className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                aria-label="Close modal"
              >
                <FaTimes />
              </button>
            </div>
            
            <div className="px-4 sm:px-6 py-4">
              <form onSubmit={(e) => { 
                e.preventDefault(); 
                editingInventoryItem ? updateInventoryItem() : addInventoryItem();
              }}>
                <div className="mb-4">
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Item Name</label>
                  <input 
                    type="text" 
                    name="name"
                    value={inventoryFormData.name}
                    onChange={handleInventoryFormChange}
                    className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    required
                    placeholder="Enter item name"
                  />
                </div>
                
                <div className="mb-4">
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>SKU</label>
                  <input 
                    type="text" 
                    name="sku"
                    value={inventoryFormData.sku}
                    onChange={handleInventoryFormChange}
                    className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    required
                    placeholder="Stock keeping unit"
                  />
                </div>
                
                <div className="mb-4">
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Category</label>
                  <select 
                    name="category"
                    title="Item category"
                    value={inventoryFormData.category}
                    onChange={handleInventoryFormChange}
                    className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    required
                  >
                    <option value="">Select a category</option>
                    {categories
                      .filter(cat => cat.type === "inventory" || cat.type === "both")
                      .map(category => (
                        <option key={category.id} value={category.id}>
                          {category.name}
                        </option>
                      ))
                    }
                  </select>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 mb-4">
                  {/* Quantity with increment/decrement controls */}
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Quantity</label>
                    <div className="flex rounded-lg overflow-hidden">
                      <button 
                        type="button"
                        onClick={() => {
                          if (inventoryFormData.quantity > 0) {
                            setInventoryFormData({
                              ...inventoryFormData, 
                              quantity: Number(inventoryFormData.quantity) - 1
                            });
                          }
                        }}
                        className={`px-2.5 py-2 bg-${currentTheme.background} border border-${currentTheme.border} border-r-0 text-${currentTheme.text} hover:bg-${currentTheme.background}/80 transition-colors duration-200 ${Number(inventoryFormData.quantity) <= 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
                        disabled={Number(inventoryFormData.quantity) <= 0}
                        aria-label="Decrease quantity"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                        </svg>
                      </button>
                      <input 
                        type="text" 
                        inputMode="numeric"
                        name="quantity"
                        title="Quantity"
                        value={inventoryFormData.quantity}
                        onChange={(e) => {
                          // Only allow numbers
                          const value = e.target.value.replace(/\D/g, '');
                          setInventoryFormData({
                            ...inventoryFormData, 
                            quantity: value === '' ? 0 : parseInt(value, 0)
                          });
                        }}
                        className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border-y border-${currentTheme.border} text-${currentTheme.text} text-center font-medium text-sm`}
                        required
                      />
                      <button 
                        type="button"
                        onClick={() => {
                          setInventoryFormData({
                            ...inventoryFormData, 
                            quantity: Number(inventoryFormData.quantity) + 1
                          });
                        }}
                        className={`px-2.5 py-2 bg-${currentTheme.background} border border-${currentTheme.border} border-l-0 text-${currentTheme.text} hover:bg-${currentTheme.background}/80 transition-colors duration-200`}
                        aria-label="Increase quantity"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                        </svg>
                      </button>
                    </div>
                  </div>
                  
                  {/* Cost Price */}
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Cost <span className="text-gray-500 text-xs">({selectedCurrency.symbol})</span>
                    </label>
                    <div className="flex rounded-lg overflow-hidden">
                      <div className={`flex items-center justify-center px-2.5 bg-${currentTheme.background} border border-${currentTheme.border} border-r-0 text-${currentTheme.text}`}>
                        <span className="text-sm">{selectedCurrency.symbol}</span>
                      </div>
                      <input 
                        type="text" 
                        inputMode="decimal"
                        name="costPrice"
                        title="Cost Price"
                        value={inventoryFormData.costPrice}
                        onChange={(e) => {
                          // Only allow decimal numbers
                          const value = e.target.value.replace(/[^\d.]/g, '');
                          // Only one decimal point
                          const decimalCount = (value.match(/\./g) || []).length;
                          if (decimalCount <= 1) {
                            setInventoryFormData({
                              ...inventoryFormData, 
                              costPrice: value === '' ? 0 : parseFloat(value)
                            });
                          }
                        }}
                        className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} text-sm`}
                        required
                      />
                    </div>
                  </div>
                  
                  {/* Selling Price */}
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Price <span className="text-gray-500 text-xs">({selectedCurrency.symbol})</span>
                    </label>
                    <div className="flex rounded-lg overflow-hidden">
                      <div className={`flex items-center justify-center px-2.5 bg-${currentTheme.background} border border-${currentTheme.border} border-r-0 text-${currentTheme.text}`}>
                        <span className="text-sm">{selectedCurrency.symbol}</span>
                      </div>
                      <input 
                        type="text" 
                        inputMode="decimal"
                        name="sellingPrice"
                        title="Selling Price"
                        value={inventoryFormData.sellingPrice}
                        onChange={(e) => {
                          // Only allow decimal numbers
                          const value = e.target.value.replace(/[^\d.]/g, '');
                          // Only one decimal point
                          const decimalCount = (value.match(/\./g) || []).length;
                          if (decimalCount <= 1) {
                            setInventoryFormData({
                              ...inventoryFormData, 
                              sellingPrice: value === '' ? 0 : parseFloat(value)
                            });
                          }
                        }}
                        className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} text-sm`}
                        required
                      />
                    </div>
                  </div>
                </div>
        
                {/* File Import Section */}
                <div className={`mb-4 p-3 border border-${currentTheme.border} rounded-lg bg-${currentTheme.background}/50`}>
                  <div className="flex items-center mb-2">
                    <FaUpload className={`mr-2 text-${currentTheme.accent}`} />
                    <h4 className={`text-sm font-medium text-${currentTheme.text}`}>Import Inventory Data</h4>
                  </div>
                  
                  <div className="flex flex-col sm:flex-row gap-2">
                    <label className={`flex-1 flex items-center justify-center p-2.5 rounded cursor-pointer bg-${currentTheme.accent}/10 hover:bg-${currentTheme.accent}/20 border border-${currentTheme.border} text-${currentTheme.accent} text-sm transition-colors`}>
                      <FaFileExcel className="mr-2" />
                      CSV Import
                      <input
                        type="file"
                        accept=".csv"
                        className="hidden"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            // Handle CSV file import
                            const reader = new FileReader();
                            reader.onload = (event) => {
                              const csvData = event.target?.result as string;
                              // Process CSV data here
                              toast.success(`CSV file "${file.name}" imported successfully`);
                            };
                            reader.readAsText(file);
                          }
                        }}
                      />
                    </label>
                    
                    <label className={`flex-1 flex items-center justify-center p-2.5 rounded cursor-pointer bg-${currentTheme.primary}/10 hover:bg-${currentTheme.primary}/20 border border-${currentTheme.border} text-${currentTheme.primary} text-sm transition-colors`}>
                      <FaUpload className="mr-2" />
                      JSON Import
                      <input
                        type="file"
                        accept=".json"
                        className="hidden"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            // Handle JSON file import
                            const reader = new FileReader();
                            reader.onload = (event) => {
                              try {
                                const jsonData = JSON.parse(event.target?.result as string);
                                // Process JSON data here
                                toast.success(`JSON file "${file.name}" imported successfully`);
                              } catch (error) {
                                toast.error("Invalid JSON file");
                              }
                            };
                            reader.readAsText(file);
                          }
                        }}
                      />
                    </label>
                  </div>
                  
                  <p className="mt-2 text-xs text-gray-400">
                    Import inventory items from CSV or JSON files. Columns should include name, sku, quantity, costPrice, and sellingPrice.
                  </p>
                </div>
                
                <div className={`flex flex-col sm:flex-row sm:justify-end space-y-2 sm:space-y-0 sm:space-x-3 mt-6 pt-4 border-t border-${currentTheme.border}`}>
                  <button 
                    type="button"
                    onClick={() => {
                      setShowInventoryModal(false);
                      setEditingInventoryItem(null);
                    }}
                    className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm w-full sm:w-auto`}
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit"
                    className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center justify-center text-sm w-full sm:w-auto`}
                  >
                    <FaPlus className="mr-2 h-4 w-4" /> 
                    {editingInventoryItem ? 'Update Item' : 'Save Item'}
                  </button>
                </div>
              </form>
            </div>
          </motion.div>
        </motion.div>
        )}
      </AnimatePresence>

      {/* Transaction Modal */}
      <AnimatePresence>
      {showTransactionModal && (
  <motion.div 
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    exit={{ opacity: 0 }}
    transition={{ duration: 0.2 }}
    className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50 p-4"
  >
    <motion.div 
      initial={{ scale: 0.9, opacity: 0 }}
      animate={{ scale: 1, opacity: 1 }}
      exit={{ scale: 0.9, opacity: 0 }}
      transition={{ type: "spring", damping: 25, stiffness: 300 }}
      className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border} max-h-[90vh] overflow-y-auto`}
      onClick={(e) => e.stopPropagation()}
    >
      <div className={`flex justify-between items-center sticky top-0 px-6 py-4 border-b border-${currentTheme.border} bg-${currentTheme.cardBackground} z-10`}>
        <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
          <FaBook className={`mr-2 text-${currentTheme.accent}`} />
          {editingTransaction ? 'Edit Transaction' : 'Add Transaction'}
        </h3>
        <button 
          onClick={() => {
            setShowTransactionModal(false);
            setEditingTransaction(null);
          }}
          className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
          aria-label="Close modal"
        >
          <FaTimes />
        </button>
      </div>
      
      <div className="px-4 sm:px-6 py-4">
        <form onSubmit={(e) => { 
          e.preventDefault(); 
          
          // Enhanced validation before submission
          if (transactionFormData.relatedInventoryId) {
            // For income transactions (selling items)
            if (transactionFormData.type === "income") {
              const item = inventory.find(i => i.id === transactionFormData.relatedInventoryId);
              if (!item) return;
              
              // Calculate max available quantity
              let availableQuantity = item.quantity;
              
              // If editing, add back the original quantity to available amount
              if (editingTransaction && 
                  editingTransaction.relatedInventoryId === transactionFormData.relatedInventoryId &&
                  editingTransaction.type === "income") {
                availableQuantity += editingTransaction.quantity || 0;
              }
              
              // Check if we have enough inventory
              if (availableQuantity < transactionFormData.quantity) {
                toast.error(`Not enough inventory. Only ${availableQuantity} units of "${item.name}" available.`);
                return;
              }
            }
          }
          
          editingTransaction ? updateTransaction() : addTransaction();
        }}>
          <div className="mb-4">
            <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Description</label>
            <input 
              type="text" 
              name="description"
              value={transactionFormData.description}
              onChange={handleTransactionFormChange}
              className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
              required
              placeholder="Transaction description"
            />
          </div>
          
          <div className="mb-4">
            <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Type</label>
            <div className="grid grid-cols-2 gap-2">
              <button
                type="button"
                aria-label="Income transaction type"
                className={`flex items-center justify-center py-3 px-4 rounded-lg font-medium border transition-colors duration-200 ${
                  transactionFormData.type === "income" 
                    ? `bg-${currentTheme.success}/30 text-${currentTheme.success} border-${currentTheme.success}/30`
                    : `bg-${currentTheme.background} text-${currentTheme.text} border-${currentTheme.border} hover:bg-${currentTheme.background}/80`
                }`}
                onClick={() => setTransactionFormData({...transactionFormData, type: "income"})}
              >
                <FaArrowUp className={`mr-2 ${transactionFormData.type === "income" ? `text-${currentTheme.success}` : 'text-gray-400'}`} />
                Income
              </button>
              <button
                type="button"
                aria-label="Expense transaction type"
                className={`flex items-center justify-center py-3 px-4 rounded-lg font-medium border transition-colors duration-200 ${
                  transactionFormData.type === "expense" 
                    ? `bg-${currentTheme.danger}/30 text-${currentTheme.danger} border-${currentTheme.danger}/30`
                    : `bg-${currentTheme.background} text-${currentTheme.text} border-${currentTheme.border} hover:bg-${currentTheme.background}/80`
                }`}
                onClick={() => setTransactionFormData({...transactionFormData, type: "expense"})}
              >
                <FaArrowDown className={`mr-2 ${transactionFormData.type === "expense" ? `text-${currentTheme.danger}` : 'text-gray-400'}`} />
                Expense
              </button>
            </div>
          </div>
          
          <div className="mb-4">
            <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Category</label>
            <div className="relative">
              <select 
                name="category"
                title="Transaction category"
                value={transactionFormData.category}
                onChange={handleTransactionFormChange}
                className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm appearance-none`}
                required
              >
                <option value="">Select a category</option>
                {categories
                  .filter(cat => cat.type === "transaction" || cat.type === "both")
                  .map(category => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))
                }
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                <FaChevronDown className="h-4 w-4 text-gray-400" />
              </div>
            </div>
          </div>
          
          {/* Inventory Item Section */}
          {inventory.length > 0 && (
            <div className="mb-4">
              <label className={`block text-sm font-medium text-${currentTheme.text} mb-1 flex items-center justify-between`}>
                <span>Related Inventory Item</span>
                <span className="text-xs text-gray-400">Optional</span>
              </label>
              <div className="relative">
                <select 
                  name="relatedInventoryId"
                  title="Related Inventory Item"
                  value={transactionFormData.relatedInventoryId || ""}
                  onChange={(e) => {
                    const selectedItemId = e.target.value;
                    const selectedItem = inventory.find(item => item.id === selectedItemId);
                    
                    // Reset quantity when changing items or clearing selection
                    setTransactionFormData({
                      ...transactionFormData, 
                      relatedInventoryId: selectedItemId,
                      quantity: selectedItem ? 1 : 0
                    });
                    
                    // If there's a selected item, update amount automatically
                    if (selectedItem) {
                      const priceToUse = transactionFormData.type === "income" 
                        ? selectedItem.sellingPrice 
                        : selectedItem.costPrice;
                        
                      setTransactionFormData(prev => ({
                        ...prev,
                        relatedInventoryId: selectedItemId,
                        quantity: 1,
                        // Set initial amount based on price
                        amount: priceToUse
                      }));
                    }
                  }}
                  className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm appearance-none`}
                >
                  <option value="">None (Manual Entry)</option>
                  {inventory.map(item => {
                    // Calculate display info for quantity available - only needed for income transactions
                    let availableQty = item.quantity;
                    let quantityText = "";
                    
                    if (transactionFormData.type === "income") {
                      // If editing, add back original quantity if this was the same item
                      if (editingTransaction && 
                          editingTransaction.relatedInventoryId === item.id && 
                          editingTransaction.type === "income") {
                        availableQty += editingTransaction.quantity ?? 0;
                      }
                      quantityText = ` (Available: ${availableQty})`;
                    }
                    
                    return (
                      <option key={item.id} value={item.id}>
                        {item.name} ({formatCurrency(transactionFormData.type === "income" ? item.sellingPrice : item.costPrice)} each){quantityText}
                      </option>
                    );
                  })}
                </select>
                <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                  <FaChevronDown className="h-4 w-4 text-gray-400" />
                </div>
              </div>
            </div>
          )}
          
          {/* Quantity control when inventory item is selected */}
          {transactionFormData.relatedInventoryId && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.2 }}
              className="mb-4"
            >
              <label className={`block text-sm font-medium text-${currentTheme.text} mb-1 flex justify-between`}>
                <span>Quantity</span>
                {(() => {
                  const item = inventory.find(item => item.id === transactionFormData.relatedInventoryId);
                  if (!item) return <span></span>;
                  
                  let availableText = "";
                  if (transactionFormData.type === "income") {
                    // Calculate available quantity for income transactions
                    let availableQty = item.quantity;
                    
                    // If editing, add back original quantity if this was the same item
                    if (editingTransaction && 
                        editingTransaction.relatedInventoryId === item.id && 
                        editingTransaction.type === "income") {
                      availableQty += editingTransaction.quantity ?? 0;
                    }
                    availableText = `Available: ${availableQty}`;
                  } else {
                    // For expense transactions, show current inventory
                    availableText = `Current Inventory: ${item.quantity}`;
                  }
                  return <span className="text-xs text-gray-400">{availableText}</span>;
                })()}
              </label>
              
              <div className="flex rounded-lg overflow-hidden">
                <button 
                  type="button"
                  onClick={() => {
                    if (transactionFormData.quantity > 1) {
                      const newQuantity = transactionFormData.quantity - 1;
                      const selectedItem = inventory.find(item => item.id === transactionFormData.relatedInventoryId);
                      
                      if (selectedItem) {
                        const pricePerItem = transactionFormData.type === "income" 
                          ? selectedItem.sellingPrice 
                          : selectedItem.costPrice;
                          
                        setTransactionFormData({
                          ...transactionFormData,
                          quantity: newQuantity,
                          amount: +(pricePerItem * newQuantity).toFixed(2)
                        });
                      }
                    }
                  }}
                  className={`px-3 py-2.5 bg-${currentTheme.background} border border-${currentTheme.border} border-r-0 text-${currentTheme.text} hover:bg-${currentTheme.background}/80 transition-colors duration-200 ${
                    transactionFormData.quantity <= 1 ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                  disabled={transactionFormData.quantity <= 1}
                >
                  <FaMinus className="h-3 w-3" />
                </button>
                
                <input 
                  type="text" 
                  inputMode="numeric"
                  name="quantity"
                  title="Item Quantity"
                  value={transactionFormData.quantity}
                  onChange={(e) => {
                    // Only allow numbers
                    const value = e.target.value.replace(/\D/g, '');
                    const newQuantity = value === '' ? 1 : parseInt(value);
                    
                    // Get the related inventory item
                    const selectedItem = inventory.find(item => item.id === transactionFormData.relatedInventoryId);
                    
                    if (selectedItem) {
                      const pricePerItem = transactionFormData.type === "income" 
                        ? selectedItem.sellingPrice 
                        : selectedItem.costPrice;
                      
                      // For income transactions (selling)
                      if (transactionFormData.type === "income") {
                        // Calculate max available with consideration for editing
                        let maxAvailable = selectedItem.quantity;
                        
                        // If editing, add back original quantity if this was the same item
                        if (editingTransaction && 
                            editingTransaction.relatedInventoryId === selectedItem.id && 
                            editingTransaction.type === "income") {
                          maxAvailable += editingTransaction.quantity ?? 0;
                        }
                        
                        // Check if we're exceeding available quantity
                        if (newQuantity > maxAvailable) {
                          toast.error(`Only ${maxAvailable} units of "${selectedItem.name}" available`);
                          return;
                        }
                      }
                      
                      setTransactionFormData({
                        ...transactionFormData, 
                        quantity: newQuantity,
                        amount: +(pricePerItem * newQuantity).toFixed(2)
                      });
                    }
                  }}
                  className={`w-16 p-2.5 sm:p-3 bg-${currentTheme.background} border-y border-${currentTheme.border} text-${currentTheme.text} text-center font-medium text-sm`}
                  required
                />
                
                <button 
                  type="button"
                  onClick={() => {
                    const newQuantity = transactionFormData.quantity + 1;
                    const selectedItem = inventory.find(item => item.id === transactionFormData.relatedInventoryId);
                    
                    if (selectedItem) {
                      // For income transactions (selling)
                      if (transactionFormData.type === "income") {
                        // Calculate max available with consideration for editing
                        let maxAvailable = selectedItem.quantity;
                        
                        // If editing, add back original quantity if this was the same item
                        if (editingTransaction && 
                            editingTransaction.relatedInventoryId === selectedItem.id && 
                            editingTransaction.type === "income") {
                          maxAvailable += editingTransaction.quantity ?? 0;
                        }
                        
                        // Check if we're exceeding available quantity
                        if (newQuantity > maxAvailable) {
                          toast.error(`Only ${maxAvailable} units of "${selectedItem.name}" available`);
                          return;
                        }
                      }
                      
                      const pricePerItem = transactionFormData.type === "income" 
                        ? selectedItem.sellingPrice 
                        : selectedItem.costPrice;
                      
                      setTransactionFormData({
                        ...transactionFormData, 
                        quantity: newQuantity,
                        amount: +(pricePerItem * newQuantity).toFixed(2)
                      });
                    }
                  }}
                  className={`px-3 py-2.5 bg-${currentTheme.background} border border-${currentTheme.border} border-l-0 text-${currentTheme.text} hover:bg-${currentTheme.background}/80 transition-colors duration-200 ${
                    transactionFormData.type === "income" && 
                    transactionFormData.relatedInventoryId && 
                    (() => {
                      // Calculate if the button should be disabled
                      const item = inventory.find(i => i.id === transactionFormData.relatedInventoryId);
                      if (!item) return true;
                      
                      // For income transactions (selling)
                      if (transactionFormData.type === "income") {
                        let maxAvailable = item.quantity;
                        
                        // If editing, add back original quantity
                        if (editingTransaction && 
                            editingTransaction.relatedInventoryId === item.id && 
                            editingTransaction.type === "income") {
                          maxAvailable += editingTransaction.quantity ?? 0;
                        }
                        
                        return transactionFormData.quantity >= maxAvailable;
                      }
                      
                      return false;
                    })()
                      ? 'opacity-50 cursor-not-allowed'
                      : ''
                  }`}
                  disabled={Boolean(
                    transactionFormData.type === "income" && 
                    transactionFormData.relatedInventoryId && 
                    (() => {
                      // Calculate if the button should be disabled
                      const item = inventory.find(i => i.id === transactionFormData.relatedInventoryId);
                      if (!item) return true;
                      
                      let maxAvailable = item.quantity;
                      
                      // If editing, add back original quantity
                      if (editingTransaction && 
                          editingTransaction.relatedInventoryId === item.id && 
                          editingTransaction.type === "income") {
                        maxAvailable += editingTransaction.quantity ?? 0;
                      }
                      
                      return transactionFormData.quantity >= maxAvailable;
                    })()
                  )}
                >
                  <FaPlus className="h-3 w-3" />
                </button>
                
                <div className={`flex items-center ml-3 text-xs text-${currentTheme.accent}`}>
                  {(() => {
                    const item = inventory.find(item => item.id === transactionFormData.relatedInventoryId);
                    if (item) {
                      const pricePerItem = transactionFormData.type === "income" 
                        ? item.sellingPrice 
                        : item.costPrice;
                      return `${formatCurrency(pricePerItem)} × ${transactionFormData.quantity} item(s)`;
                    }
                    return '';
                  })()}
                </div>
              </div>
              
              {/* Max quantity indicator */}
              {transactionFormData.type === "income" && (
                <div className="mt-1 text-xs">
                  {(() => {
                    const item = inventory.find(i => i.id === transactionFormData.relatedInventoryId);
                    if (!item) return null;
                    
                    let maxAvailable = item.quantity;
                    
                    // If editing, add back original quantity
                    if (editingTransaction && 
                        editingTransaction.relatedInventoryId === item.id && 
                        editingTransaction.type === "income") {
                      maxAvailable += editingTransaction.quantity ?? 0;
                    }
                    
                    return (
                      <div className="flex justify-between">
                        <span></span>
                        <span className={`text-${transactionFormData.quantity === maxAvailable ? 'amber-500' : 'gray-400'}`}>
                          {transactionFormData.quantity} of {maxAvailable} available
                        </span>
                      </div>
                    );
                  })()}
                </div>
              )}
            </motion.div>
          )}
          
          {/* Amount field - Disabled when inventory item is selected */}
          <div className={`grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 mb-4 ${transactionFormData.relatedInventoryId ? 'opacity-90' : ''}`}>
            <div>
              <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                Amount <span className="text-gray-500 text-xs">({selectedCurrency.symbol})</span>
                {transactionFormData.relatedInventoryId && (
                  <span className="ml-1 text-xs text-gray-400">(Auto-calculated)</span>
                )}
              </label>
              <div className="flex rounded-lg overflow-hidden">
                <div className={`flex items-center justify-center px-2.5 bg-${currentTheme.background} border border-${currentTheme.border} border-r-0 text-${currentTheme.text}`}>
                  <span className="text-sm">{selectedCurrency.symbol}</span>
                </div>
                <input 
                  type="text" 
                  inputMode="decimal"
                  name="amount"
                  title="Transaction amount"
                  value={transactionFormData.amount}
                  onChange={(e) => {
                    // Only allow decimal numbers
                    const value = e.target.value.replace(/[^\d.]/g, '');
                    // Only one decimal point
                    const decimalCount = (value.match(/\./g) || []).length;
                    if (decimalCount <= 1) {
                      setTransactionFormData({
                        ...transactionFormData, 
                        amount: value === '' ? 0 : parseFloat(value)
                      });
                    }
                  }}
                  className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} text-sm`}
                  required
                  readOnly={!!transactionFormData.relatedInventoryId} // Read-only when inventory item is selected
                />
              </div>
            </div>
            
            <div>
              <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Date</label>
              <div className="relative">
                <input 
                  type="date" 
                  name="date"
                  title="Transaction date"
                  value={transactionFormData.date}
                  onChange={handleTransactionFormChange}
                  className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                  required
                />
                <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <FaCalendarAlt className="h-4 w-4 text-gray-400" />
                </div>
              </div>
            </div>
          </div>
          
          {/* Only show customer selection for income transactions */}
          {transactionFormData.type === "income" && (
            <motion.div 
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.2 }}
              className="mb-4"
            >
              <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                Associated Customer (Optional)
              </label>
              <div className="relative">
                <select 
                  name="customerId"
                  title="Associated customer"
                  value={transactionFormData.customerId || ""}
                  onChange={handleTransactionFormChange}
                  className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm appearance-none`}
                >
                  <option value="">None</option>
                  {customers.map(customer => (
                    <option key={customer.id} value={customer.id}>
                      {customer.name} {customer.phone ? `(${customer.phone})` : ""}
                    </option>
                  ))}
                </select>
                <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                  <FaChevronDown className="h-4 w-4 text-gray-400" />
                </div>
              </div>
            </motion.div>
          )}

          {/* File Upload Section */}
          <div className={`mb-4 p-3 border border-${currentTheme.border} rounded-lg bg-${currentTheme.background}/50`}>
            <div className="flex items-center mb-2">
              <FaPaperclip className={`mr-2 text-${currentTheme.accent}`} />
              <h4 className={`text-sm font-medium text-${currentTheme.text}`}>Receipt or Document (Optional)</h4>
            </div>
            
            <label className={`flex items-center justify-center p-2.5 rounded cursor-pointer bg-${currentTheme.accent}/10 hover:bg-${currentTheme.accent}/20 border border-${currentTheme.border} text-${currentTheme.accent} text-sm transition-colors w-full`}>
              <FaUpload className="mr-2" />
              Attach Receipt
              <input
                type="file"
                accept="image/*,.pdf"
                className="hidden"
                onChange={(e) => {
                  const file = e.target.files?.[0];
                  if (file) {
                    // Handle file upload logic here
                    toast.success(`File "${file.name}" attached`);
                  }
                }}
              />
            </label>
          </div>
          
          {/* Display automatic inventory effects */}
          {transactionFormData.relatedInventoryId && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
              className={`mb-4 p-3 rounded-lg bg-${
                transactionFormData.type === "income" ? `${currentTheme.success}/10` : `${currentTheme.danger}/10`
              } border border-${
                transactionFormData.type === "income" ? `${currentTheme.success}/20` : `${currentTheme.danger}/20`
              }`}
            >
              <div className="flex items-center">
                <FaInfoCircle className={`mr-2 text-${
                  transactionFormData.type === "income" ? currentTheme.success : currentTheme.danger
                }`} />
                <p className={`text-xs text-${
                  transactionFormData.type === "income" ? currentTheme.success : currentTheme.danger
                }`}>
                  {(() => {
                    const item = inventory.find(i => i.id === transactionFormData.relatedInventoryId);
                    if (item) {
                      if (transactionFormData.type === "income") {
                        return `This will decrease inventory of "${item.name}" by ${transactionFormData.quantity} unit(s).`;
                      } else {
                        return `This will increase inventory of "${item.name}" by ${transactionFormData.quantity} unit(s).`;
                      }
                    }
                    return '';
                  })()}
                </p>
              </div>
            </motion.div>
          )}
          
          <div className={`flex flex-col sm:flex-row sm:justify-end space-y-2 sm:space-y-0 sm:space-x-3 mt-6 pt-4 border-t border-${currentTheme.border}`}>
            <button 
              type="button"
              onClick={() => {
                setShowTransactionModal(false);
                setEditingTransaction(null);
              }}
              className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm w-full sm:w-auto`}
            >
              Cancel
            </button>
            <button 
              type="submit"
              className={`px-5 py-2.5 ${
                transactionFormData.type === "income" 
                  ? `bg-${currentTheme.success} hover:bg-${currentTheme.success}/80` 
                  : `bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80`
              } text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center justify-center text-sm w-full sm:w-auto`}
            >
              <FaPlus className="mr-2 h-4 w-4" /> 
              {editingTransaction ? 'Update Transaction' : 'Save Transaction'}
            </button>
          </div>
        </form>
      </div>
    </motion.div>
  </motion.div>
)}
      </AnimatePresence>


      {/* // Budget Modal Component - Add this to the modals section of your render */}
<AnimatePresence>
{showBudgetModal && (
  <motion.div
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    exit={{ opacity: 0 }}
    className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
    onClick={() => setShowBudgetModal(false)}
  >
    <motion.div
      initial={{ scale: 0.9, opacity: 0 }}
      animate={{ scale: 1, opacity: 1 }}
      exit={{ scale: 0.9, opacity: 0 }}
      className={`bg-${currentTheme.cardBackground} rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto`}
      onClick={(e) => e.stopPropagation()}
    >
      <div className={`p-6 border-b border-${currentTheme.border}`}>
        <h3 className={`text-xl font-semibold text-${currentTheme.text}`}>
          {editingBudget ? 'Edit Budget' : 'Create New Budget'}
        </h3>
      </div>
      
      <div className="p-6 space-y-4">
        {/* Budget Name */}
        <div>
          <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
            Budget Name
          </label>
          <input
            type="text"
            name="name"
            value={budgetFormData.name}
            onChange={handleBudgetFormChange}
            className={`w-full px-3 py-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded-md text-${currentTheme.text} focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary}`}
            placeholder="e.g., Monthly Household Budget"
          />
        </div>
        
        {/* Period */}
        <div>
          <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
            Budget Period
          </label>
          <select
            name="period"
            title="Budget period"
            value={budgetFormData.period}
            onChange={(e) => {
              const newPeriod = e.target.value;
              handleBudgetFormChange(e);
              
              // Auto-calculate end date based on the period and start date
              if (newPeriod !== "Custom" && budgetFormData.startDate) {
                const startDate = new Date(budgetFormData.startDate);
                let endDate = new Date(startDate);
                
                switch(newPeriod) {
                  case "Weekly":
                    // Add 6 days to make it a 7-day week
                    endDate.setDate(startDate.getDate() + 6);
                    break;
                  case "Monthly":
                    // Last day of current month
                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);
                    break;
                  case "Quarterly":
                    // Add 3 months and get last day of that month
                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 3, 0);
                    break;
                  case "Yearly":
                    // Add 1 year minus 1 day
                    endDate = new Date(startDate.getFullYear() + 1, startDate.getMonth(), startDate.getDate() - 1);
                    break;
                }
                
                const formattedEndDate = endDate.toISOString().split('T')[0];
                
                setBudgetFormData(prev => ({
                  ...prev,
                  period: newPeriod,
                  endDate: formattedEndDate
                }));
              }
            }}
            className={`w-full px-3 py-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded-md text-${currentTheme.text} focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary}`}
          >
            <option value="Weekly">Weekly</option>
            <option value="Monthly">Monthly</option>
            <option value="Quarterly">Quarterly</option>
            <option value="Yearly">Yearly</option>
            <option value="Custom">Custom</option>
          </select>
        </div>
        
        {/* Date Range */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
              Start Date
            </label>
            <input
              type="date"
              title="Budget start date"
              name="startDate"
              value={budgetFormData.startDate}
              onChange={(e) => {
                handleBudgetFormChange(e);
                
                // Auto-recalculate end date if period is not Custom
                if (budgetFormData.period !== "Custom") {
                  const startDate = new Date(e.target.value);
                  let endDate = new Date(startDate);
                  
                  switch(budgetFormData.period) {
                    case "Weekly":
                      endDate.setDate(startDate.getDate() + 6);
                      break;
                    case "Monthly":
                      endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);
                      break;
                    case "Quarterly":
                      endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 3, 0);
                      break;
                    case "Yearly":
                      endDate = new Date(startDate.getFullYear() + 1, startDate.getMonth(), startDate.getDate() - 1);
                      break;
                  }
                  
                  const formattedEndDate = endDate.toISOString().split('T')[0];
                  
                  setBudgetFormData(prev => ({
                    ...prev,
                    endDate: formattedEndDate
                  }));
                }
              }}
              className={`w-full px-3 py-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded-md text-${currentTheme.text} focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary}`}
            />
          </div>
          <div>
            <label className={`flex justify-between text-sm font-medium text-${currentTheme.text} mb-1`}>
              <span>End Date</span>
              {budgetFormData.period !== "Custom" && (
                <span className="text-xs text-gray-400">(Auto-calculated)</span>
              )}
            </label>
            <input
              type="date"
              name="endDate"
              title="Budget end date"
              value={budgetFormData.endDate}
              onChange={handleBudgetFormChange}
              className={`w-full px-3 py-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded-md text-${currentTheme.text} ${
                budgetFormData.period !== "Custom" ? "opacity-75" : ""
              } focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary}`}
              disabled={budgetFormData.period !== "Custom"}
            />
          </div>
        </div>
        
        {/* Target Amount */}
        <div>
          <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
            Target Amount
          </label>
          <div className="relative">
            <span className={`absolute left-3 top-2 text-${currentTheme.text}`}>
              {selectedCurrency.symbol}
            </span>
            <input
              type="number"
              name="targetAmount"
              value={budgetFormData.targetAmount}
              onChange={handleBudgetFormChange}
              className={`w-full pl-7 pr-3 py-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded-md text-${currentTheme.text} focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary}`}
              placeholder="0.00"
              min="0"
              step="0.01"
            />
          </div>
        </div>
        
        {/* Categories - Enhanced Version */}
<div>
  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1 flex justify-between items-center`}>
    <span>Budget Categories</span>
    <span className="text-xs text-gray-400">
      {budgetFormData.categories.length} {budgetFormData.categories.length === 1 ? 'category' : 'categories'} added
    </span>
  </label>
  
  <div className={`mb-4 p-5 border border-${currentTheme.border} rounded-lg space-y-4 bg-${currentTheme.background}/30`}>
    {/* Add Category Form with enhanced dropdown */}
    <div>
      {tempBudgetCategory.name === "new" ? (
        <motion.div 
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: "auto" }}
          exit={{ opacity: 0, height: 0 }}
          className="mb-3 p-3 border border-dashed border-gray-300 rounded-lg bg-gray-50 dark:bg-gray-800/30"
        >
          <div className="flex items-center mb-2">
            <FaTags className={`mr-2 text-${currentTheme.accent}`} size={14} />
            <h4 className={`text-sm font-medium text-${currentTheme.text}`}>Create New Category</h4>
          </div>
          
          <div className="grid grid-cols-1 gap-2">
            <div>
              <input
                type="text"
                placeholder="Category name"
                value={tempBudgetCategory.customName || ''}
                onChange={(e) => setTempBudgetCategory({
                  ...tempBudgetCategory,
                  customName: e.target.value
                })}
                className={`w-full px-3 py-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded-md text-${currentTheme.text} focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary} text-sm`}
                autoFocus
              />
            </div>
            
            <div className="flex items-center">
              <span className="mr-2 text-xs text-gray-500">Color:</span>
              <div className="flex space-x-1">
                {['red', 'blue', 'green', 'purple', 'amber', 'emerald', 'fuchsia', 'indigo'].map(color => (
                  <button
                    key={color}
                    type="button"
                    onClick={() => setTempBudgetCategory({
                      ...tempBudgetCategory,
                      color: color
                    })}
                    className={`w-5 h-5 rounded-full bg-${color}-500 ${
                      tempBudgetCategory.color === color 
                        ? `ring-2 ring-${currentTheme.accent} ring-offset-1` 
                        : ''
                    }`}
                    aria-label={`Select ${color} color`}
                  />
                ))}
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-2 mt-1">
              <button
                type="button"
                onClick={() => setTempBudgetCategory({
                  ...tempBudgetCategory,
                  name: '',
                  customName: '',
                  color: ''
                })}
                className={`py-1.5 px-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-md text-xs`}
              >
                Cancel
              </button>
              <button
                type="button"
                onClick={() => {
                  if (!tempBudgetCategory.customName?.trim()) {
                    toast.error("Please enter a category name");
                    return;
                  }
                  
                  // Create a new category in the main category list
                  const newCategory = {
                    id: uuidv4(),
                    name: tempBudgetCategory.customName.trim(),
                    type: "transaction" as "inventory" | "transaction" | "both",
                    description: `Budget category created from ${budgetFormData.name || 'budget'}`,
                    color: tempBudgetCategory.color || "zinc-500"
                  };
                  
                  // Add to categories list
                  setCategories(prev => [...prev, newCategory]);
                  
                  // Update tempBudgetCategory to use the new category
                  setTempBudgetCategory({
                    ...tempBudgetCategory,
                    name: newCategory.name,
                    customName: ''
                  });
                  
                  toast.success(`Added new category: ${newCategory.name}`);
                }}
                className={`py-1.5 px-3 bg-${currentTheme.primary} text-${currentTheme.buttonText} rounded-md text-xs flex items-center justify-center`}
              >
                <FaSave className="mr-1" size={10} /> Save Category
              </button>
            </div>
          </div>
        </motion.div>
      ) : (
        <div className="grid grid-cols-3 gap-2">
          <div className="col-span-2">
            <div className="relative">
              <select
                name="name"
                title="Budget category"
                value={tempBudgetCategory.name === "new" ? "" : tempBudgetCategory.name}
                onChange={(e) => {
                  const value = e.target.value;
                  setTempBudgetCategory({
                    ...tempBudgetCategory,
                    name: value,
                    color: value === "new" ? (tempBudgetCategory.color || "zinc-500") : ""
                  });
                }}
                className={`w-full px-3 py-2.5 appearance-none bg-${currentTheme.background} border border-${currentTheme.border} rounded-lg text-${currentTheme.text} focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary} text-sm pr-9`}
              >
                <option value="">Select a category</option>
                {categories
                  .filter(cat => cat.type === "transaction" || cat.type === "both")
                  .map(category => (
                    <option key={category.id} value={category.name}>
                      {category.name}
                    </option>
                  ))}
                <option value="new" className={`text-${currentTheme.accent} font-medium`}>+ Create new category</option>
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <FaChevronDown className={`h-3.5 w-3.5 text-${currentTheme.text}/50`} />
              </div>
            </div>
          </div>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <span className={`text-${currentTheme.text}/70 text-sm font-medium`}>{selectedCurrency.symbol}</span>
            </div>
            <input
              type="number"
              name="allocated"
              value={tempBudgetCategory.allocated || ''}
              onChange={(e) => {
                const value = parseFloat(e.target.value);
                setTempBudgetCategory({
                  ...tempBudgetCategory,
                  allocated: isNaN(value) ? 0 : value
                });
              }}
              placeholder="Amount"
              min="0"
              step="0.01"
              className={`w-full pl-7 pr-3 py-2.5 bg-${currentTheme.background} border border-${currentTheme.border} rounded-lg text-${currentTheme.text} focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary} text-sm`}
            />
          </div>
        </div>
      )}
    </div>
    
    {/* Add button - only show when not creating a new category */}
    {tempBudgetCategory.name !== "new" && (
      <button
        type="button"
        disabled={!tempBudgetCategory.name || tempBudgetCategory.allocated <= 0}
        onClick={() => {
          if (!tempBudgetCategory.name || tempBudgetCategory.allocated <= 0) {
            toast.error("Please enter a valid category name and amount");
            return;
          }
          
          // Find the existing category to get its ID and color
          const existingCategory = categories.find(
            cat => cat.name.toLowerCase() === tempBudgetCategory.name.toLowerCase()
          );
          
          if (!existingCategory) {
            toast.error("Please select a valid category");
            return;
          }
          
          // Add to budget form categories
          addCategoryToForm();
        }}
        className={`w-full py-2.5 bg-${currentTheme.accent}/10 text-${currentTheme.accent} hover:bg-${currentTheme.accent}/20 rounded-lg transition-colors text-sm flex items-center justify-center ${
          !tempBudgetCategory.name || tempBudgetCategory.allocated <= 0
            ? 'opacity-50 cursor-not-allowed'
            : ''
        }`}
      >
        <FaPlus className="mr-1.5" size={12} /> Add Category to Budget
      </button>
    )}
    
    {/* Category List with improved visuals */}
    {budgetFormData.categories.length > 0 && (
      <div className={`mt-4 pt-4 border-t border-${currentTheme.border}`}>
        <div className="flex justify-between text-xs text-gray-500 mb-2 px-1">
          <span>Category</span>
          <span>Allocated Amount</span>
        </div>
        
        <div className="space-y-2 max-h-64 overflow-y-auto pr-1">
          {budgetFormData.categories.map((category, index) => {
            // Find the category in categories list to get its color
            const categoryInfo = categories.find(cat => cat.name === category.name);
            const categoryColor = categoryInfo?.color || "zinc";
            
            return (
              <motion.div
                key={category.id || index}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className={`flex justify-between items-center p-2 rounded-lg border border-${currentTheme.border} bg-${currentTheme.background} group hover:bg-${currentTheme.background}/80`}
              >
                <div className="flex items-center space-x-2">
                  <div className={`w-3 h-3 rounded-full bg-${categoryColor}-500`}></div>
                  <span className={`text-${currentTheme.text} text-sm font-medium`}>{category.name}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className={`text-${currentTheme.accent} text-sm font-mono`}>
                    {selectedCurrency.symbol}{category.allocated.toFixed(2)}
                  </span>
                  <button
                    type="button"
                    onClick={() => removeCategoryFromForm(category.id)}
                    className={`text-${currentTheme.danger}/0 group-hover:text-${currentTheme.danger}/80 hover:text-${currentTheme.danger} p-1 transition-colors`}
                    aria-label="Remove category"
                  >
                    <FaTrash size={12} />
                  </button>
                </div>
              </motion.div>
            );
          })}
        </div>
        
        {/* Total allocated display */}
        <div className={`flex justify-between items-center mt-3 pt-3 border-t border-${currentTheme.border} text-sm`}>
          <span className={`font-medium text-${currentTheme.text}`}>Total Allocated:</span>
          <span className={`font-bold text-${currentTheme.accent}`}>
            {selectedCurrency.symbol}
            {budgetFormData.categories.reduce((total, cat) => total + cat.allocated, 0).toFixed(2)}
          </span>
        </div>
        
        {/* Budget remaining indicator */}
        {budgetFormData.targetAmount > 0 && (
          <div className="mt-3">
            <div className="flex justify-between text-xs mb-1">
              <span className="text-gray-500">
                Budget remaining:
              </span>
              <span className={`${
                budgetFormData.targetAmount - budgetFormData.categories.reduce((total, cat) => total + cat.allocated, 0) < 0
                ? `text-${currentTheme.danger}` : `text-${currentTheme.success}`
              } font-medium`}>
                {selectedCurrency.symbol}
                {(budgetFormData.targetAmount - budgetFormData.categories.reduce((total, cat) => total + cat.allocated, 0)).toFixed(2)}
              </span>
            </div>
            <div className="relative h-1.5 w-full bg-gray-200 rounded-full overflow-hidden">
              <div 
                className={`absolute h-full ${
                  budgetFormData.categories.reduce((total, cat) => total + cat.allocated, 0) > budgetFormData.targetAmount
                  ? `bg-${currentTheme.danger}`
                  : `bg-${currentTheme.success}`
                }`}
                style={{
                  width: `${Math.min(
                    100,
                    (budgetFormData.categories.reduce((total, cat) => total + cat.allocated, 0) / budgetFormData.targetAmount) * 100
                  )}%`
                }}
              ></div>
            </div>
          </div>
        )}
      </div>
    )}
    
    {/* Empty state when no categories added */}
    {budgetFormData.categories.length === 0 && (
      <div className={`text-center py-3 text-sm text-gray-400 border border-dashed border-${currentTheme.border} rounded-lg mt-2`}>
        <FaFolder className="mx-auto mb-1 opacity-50" />
        No categories added yet
      </div>
    )}
  </div>
</div>
        
        {/* Notes */}
        <div>
          <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
            Notes
          </label>
          <textarea
            name="notes"
            value={budgetFormData.notes}
            onChange={handleBudgetFormChange}
            rows={3}
            className={`w-full px-3 py-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded-md text-${currentTheme.text} focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary}`}
            placeholder="Optional notes about this budget..."
          ></textarea>
        </div>
      </div>
      
      <div className={`p-6 border-t border-${currentTheme.border} flex justify-end space-x-3`}>
        <button
          type="button"
          onClick={() => {
            setShowBudgetModal(false);
            setEditingBudget(null);
            resetBudgetForm();
          }}
          className={`px-4 py-2 bg-${currentTheme.background} hover:bg-${currentTheme.border} text-${currentTheme.text} rounded-md transition-colors`}
        >
          Cancel
        </button>
        <button
          type="button"
          onClick={() => {
            // Validate the form
            if (!budgetFormData.name) {
              toast.error("Please enter a budget name");
              return;
            }
            
            if (budgetFormData.targetAmount <= 0) {
              toast.error("Target amount must be greater than zero");
              return;
            }
            
            if (new Date(budgetFormData.startDate) > new Date(budgetFormData.endDate)) {
              toast.error("Start date cannot be after end date");
              return;
            }
            
            if (budgetFormData.categories.length === 0) {
              toast.error("Please add at least one category");
              return;
            }
            
            // Save the budget
            saveBudget();
          }}
          className={`px-4 py-2 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-md transition-colors`}
        >
          {editingBudget ? 'Update Budget' : 'Create Budget'}
        </button>
      </div>
    </motion.div>
  </motion.div>
)}
</AnimatePresence>

<AnimatePresence>
  {showPayrollModal && (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.2 }}
      className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50 p-4"
      onClick={() => setShowPayrollModal(false)}
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        transition={{ type: "spring", damping: 25, stiffness: 300 }}
        className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-2xl border border-${currentTheme.border} max-h-[90vh] overflow-y-auto`}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header with gradient */}
        <div className={`sticky top-0 z-10 rounded-t-xl bg-gradient-to-r from-${currentTheme.primary}/90 to-${currentTheme.accent}/90 px-6 py-5 backdrop-blur-sm`}>
          <div className="flex justify-between items-center">
            <h3 className={`text-xl font-bold text-${currentTheme.buttonText} flex items-center`}>
              <div className={`p-2 rounded-full bg-white/20 mr-3`}>
                <FaMoneyBillWave className={`text-${currentTheme.buttonText}`} size={18} />
              </div>
              Process Employee Payroll
            </h3>
            <button
              onClick={() => setShowPayrollModal(false)}
              className={`text-${currentTheme.buttonText} hover:text-${currentTheme.buttonText}/70 transition-colors duration-200 p-2 rounded-full hover:bg-black/10`}
              aria-label="Close modal"
            >
              <FaTimes />
            </button>
          </div>
          <p className={`mt-1 text-sm text-${currentTheme.buttonText}/80 ml-11`}>
            Complete all required fields to process employee payment
          </p>
        </div>

        <div className="p-6">
          <form onSubmit={handlePayrollSubmit}>
            {/* Form sections with subtle separators */}
            <div className="space-y-6">
              {/* Employee Information Section */}
              <div>
                <h4 className={`text-sm uppercase tracking-wider text-${currentTheme.accent} font-medium mb-4 flex items-center`}>
                  <FaUser className="mr-2" size={14} />
                  Employee Details
                </h4>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-2">
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Employee Name*
                    </label>
                    <input
                      type="text"
                      placeholder="Full name"
                      value={payrollFormData.employeeName}
                      onChange={handlePayrollFormChange}
                      name="employeeName"
                      required
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    />
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Position*
                    </label>
                    <input
                      type="text"
                      placeholder="Job title"
                      value={payrollFormData.position}
                      onChange={handlePayrollFormChange}
                      name="position"
                      required
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    />
                  </div>
                </div>

                {/* Contact Fields */}
                <div className="mb-4">
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Phone Number*
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FaPhone className="text-gray-400" size={14} />
                    </div>
                    <input
                      type="tel"
                      placeholder="Employee contact number"
                      value={payrollFormData.employeePhone}
                      onChange={handlePayrollFormChange}
                      name="employeePhone"
                      required
                      className={`w-full pl-10 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    />
                  </div>
                </div>

                <div className="mb-4">
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Email Address
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FaEnvelope className="text-gray-400" size={14} />
                    </div>
                    <input
                      type="email"
                      placeholder="employee@example.com"
                      value={payrollFormData.employeeEmail}
                      onChange={handlePayrollFormChange}
                      name="employeeEmail"
                      className={`w-full pl-10 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    />
                  </div>
                </div>

                <div>
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Physical Address*
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 pt-3 pointer-events-none">
                      <FaMapMarkerAlt className="text-gray-400" size={14} />
                    </div>
                    <textarea
                      placeholder="Street address, city, state, zip code"
                      value={payrollFormData.employeeAddress}
                      onChange={(e) => setPayrollFormData({...payrollFormData, employeeAddress: e.target.value})}
                      name="employeeAddress"
                      required
                      rows={2}
                      className={`w-full pl-10 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    />
                  </div>
                </div>
              </div>

              {/* Divider */}
              <div className={`h-0.5 w-full bg-gradient-to-r from-transparent via-${currentTheme.border} to-transparent opacity-30`}></div>

              {/* Pay Period Section */}
              <div>
                <h4 className={`text-sm uppercase tracking-wider text-${currentTheme.accent} font-medium mb-4 flex items-center`}>
                  <FaCalendarAlt className="mr-2" size={14} />
                  Pay Period
                </h4>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-2">
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Start Date*
                    </label>
                    <div className="relative">
                      <input
                        type="date"
                        title="Pay period start date"
                        value={formatDateForInput(payrollFormData.payPeriodStart)}
                        onChange={(e) => setPayrollFormData({
                          ...payrollFormData,
                          payPeriodStart: new Date(e.target.value)
                        })}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        required
                      />
                      <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <FaCalendarAlt className="h-4 w-4 text-gray-400" />
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      End Date*
                    </label>
                    <div className="relative">
                      <input
                        type="date"
                        title="Pay period end date"
                        value={formatDateForInput(payrollFormData.payPeriodEnd)}
                        onChange={(e) => setPayrollFormData({
                          ...payrollFormData,
                          payPeriodEnd: new Date(e.target.value)
                        })}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        required
                      />
                      <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <FaCalendarCheck className="h-4 w-4 text-gray-400" />
                      </div>
                    </div>
                  </div>
                </div>

                <div className={`mt-3 p-2 rounded-lg bg-${currentTheme.background} text-xs text-gray-400`}>
                  <span className="flex items-center">
                    <FaInfoCircle className="mr-1.5" size={12} />
                    <span>Pay period represents the timeframe for which the employee is being compensated</span>
                  </span>
                </div>
              </div>

              {/* Divider */}
              <div className={`h-0.5 w-full bg-gradient-to-r from-transparent via-${currentTheme.border} to-transparent opacity-30`}></div>

              {/* Salary Components Section */}
              <div>
                <h4 className={`text-sm uppercase tracking-wider text-${currentTheme.accent} font-medium mb-4 flex items-center`}>
                  <FaMoneyCheckAlt className="mr-2" size={14} />
                  Compensation Details
                </h4>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Base Salary*
                    </label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <span className={`text-gray-500 font-medium`}>{selectedCurrency.symbol}</span>
                      </div>
                      <input
                        type="text"
                        inputMode="decimal"
                        placeholder="0.00"
                        value={payrollFormData.baseSalary || ''}
                        onChange={(e) => {
                          // Allow only numbers and a single decimal point
                          const value = e.target.value.replace(/[^\d.]/g, '');
                          const decimalCount = (value.match(/\./g) || []).length;
                          
                          if (decimalCount <= 1) {
                            const amount = parseFloat(value) || 0;
                            setPayrollFormData({
                              ...payrollFormData, 
                              baseSalary: amount
                            });
                          }
                        }}
                        className={`w-full pl-7 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        required
                      />
                    </div>
                    <p className="text-xs text-gray-400 mt-1 ml-1">Regular earnings for the pay period</p>
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Overtime Pay
                    </label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <span className={`text-gray-500 font-medium`}>{selectedCurrency.symbol}</span>
                      </div>
                      <input
                        type="text"
                        inputMode="decimal"
                        placeholder="0.00"
                        value={payrollFormData.overtime || ''}
                        onChange={(e) => {
                          const value = e.target.value.replace(/[^\d.]/g, '');
                          const decimalCount = (value.match(/\./g) || []).length;
                          
                          if (decimalCount <= 1) {
                            const amount = parseFloat(value) || 0;
                            setPayrollFormData({
                              ...payrollFormData, 
                              overtime: amount
                            });
                          }
                        }}
                        className={`w-full pl-7 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      />
                    </div>
                    <p className="text-xs text-gray-400 mt-1 ml-1">Additional compensation for extra hours</p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Deductions
                    </label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <span className={`text-gray-500 font-medium`}>{selectedCurrency.symbol}</span>
                      </div>
                      <input
                        type="text"
                        inputMode="decimal"
                        placeholder="0.00"
                        value={payrollFormData.deductions || ''}
                        onChange={(e) => {
                          const value = e.target.value.replace(/[^\d.]/g, '');
                          const decimalCount = (value.match(/\./g) || []).length;
                          
                          if (decimalCount <= 1) {
                            const amount = parseFloat(value) || 0;
                            setPayrollFormData({
                              ...payrollFormData, 
                              deductions: amount
                            });
                          }
                        }}
                        className={`w-full pl-7 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      />
                    </div>
                    <p className="text-xs text-gray-400 mt-1 ml-1">Taxes, insurance, and other withholdings</p>
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium text-${currentTheme.accent} mb-1`}>
                      Net Pay
                    </label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <span className={`text-${currentTheme.accent} font-medium`}>{selectedCurrency.symbol}</span>
                      </div>
                      <input
                        type="text"
                        readOnly
                        value={((payrollFormData.baseSalary || 0) + (payrollFormData.overtime || 0) - (payrollFormData.deductions || 0)).toFixed(2)}
                        className={`w-full pl-7 p-3 bg-gradient-to-r from-${currentTheme.accent}/10 to-${currentTheme.primary}/10 border border-${currentTheme.primary}/30 text-${currentTheme.accent} font-bold rounded-lg text-sm`}
                      />
                    </div>
                    <p className="text-xs text-gray-400 mt-1 ml-1">Final amount to be paid to employee</p>
                  </div>
                </div>
              </div>

              {/* Net Pay Summary Card */}
              <div className={`p-4 rounded-lg bg-gradient-to-r from-${currentTheme.primary}/10 to-${currentTheme.accent}/10 border border-${currentTheme.primary}/20`}>
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
                  <div>
                    <h5 className={`text-sm font-semibold text-${currentTheme.text}`}>Payment Summary</h5>
                    <p className="text-xs text-gray-400 mt-1">Review the final amount before processing</p>
                  </div>
                  
                  <div className="mt-3 sm:mt-0 flex flex-col items-end">
                    <div className={`text-sm font-medium text-${currentTheme.text}`}>Total Net Pay:</div>
                    <div className={`text-xl font-bold text-${currentTheme.accent}`}>
                      {formatCurrency((payrollFormData.baseSalary || 0) + (payrollFormData.overtime || 0) - (payrollFormData.deductions || 0))}
                    </div>
                  </div>
                </div>
                
                <div className="grid grid-cols-3 gap-2 mt-4 text-center text-xs">
                  <div className={`p-2 rounded bg-${currentTheme.background}/50 border border-${currentTheme.border}`}>
                    <div className="text-gray-400">Base Salary</div>
                    <div className="font-medium text-sm mt-1">{formatCurrency(payrollFormData.baseSalary || 0)}</div>
                  </div>
                  <div className={`p-2 rounded bg-${currentTheme.background}/50 border border-${currentTheme.border}`}>
                    <div className="text-gray-400">Overtime</div>
                    <div className="font-medium text-sm mt-1">{formatCurrency(payrollFormData.overtime || 0)}</div>
                  </div>
                  <div className={`p-2 rounded bg-${currentTheme.background}/50 border border-${currentTheme.border}`}>
                    <div className="text-gray-400">Deductions</div>
                    <div className="font-medium text-sm mt-1 text-red-400">-{formatCurrency(payrollFormData.deductions || 0)}</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className={`flex flex-col sm:flex-row sm:justify-end space-y-2 sm:space-y-0 sm:space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
              <button
                type="button"
                onClick={() => setShowPayrollModal(false)}
                className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm w-full sm:w-auto flex items-center justify-center`}
              >
                <FaTimes className="mr-1.5" size={12} /> Cancel
              </button>
              <button
                type="submit"
                className={`px-6 py-2.5 bg-gradient-to-r from-${currentTheme.primary} to-${currentTheme.accent} hover:from-${currentTheme.accent} hover:to-${currentTheme.primary} text-${currentTheme.buttonText} rounded-lg shadow-md font-medium transition-all duration-200 flex items-center justify-center text-sm w-full sm:w-auto`}
              >
                <FaMoneyBillWave className="mr-2" size={14} />
                Process Payroll
              </button>
            </div>
            
            <div className="text-center text-xs text-gray-400 mt-4">
              <p>Fields marked with * are required</p>
            </div>
          </form>
        </div>
      </motion.div>
    </motion.div>
  )}
</AnimatePresence>

      {/* Receipt Modal */}
      <AnimatePresence>
      {showReceiptModal && (
  <motion.div 
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    exit={{ opacity: 0 }}
    transition={{ duration: 0.2 }}
    className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50 p-4"
  >
    <motion.div 
      initial={{ scale: 0.9, opacity: 0 }}
      animate={{ scale: 1, opacity: 1 }}
      exit={{ scale: 0.9, opacity: 0 }}
      transition={{ type: "spring", damping: 25, stiffness: 300 }}
      className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border} max-h-[90vh] overflow-y-auto`}
      onClick={(e) => e.stopPropagation()}
    >
      <div className={`flex justify-between items-center sticky top-0 px-6 py-4 border-b border-${currentTheme.border} bg-${currentTheme.cardBackground} z-10`}>
        <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
          <FaBook className={`mr-2 text-${currentTheme.accent}`} />
          {editingReceipt ? 'Edit Receipt' : 'Add Receipt'}
        </h3>
        <button
          onClick={() => {
            setShowReceiptModal(false);
            setEditingReceipt(null);
          }}
          className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
          aria-label="Close modal"
        >
          <FaTimes />
        </button>
      </div>

      <div className="px-4 sm:px-6 py-4">
        <form onSubmit={(e) => {
          e.preventDefault();
          editingReceipt ? updateReceipt() : addReceipt();
        }}>
          <div className="mb-4">
            <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Date</label>
            <div className="relative">
              <input
                type="date"
                name="date"
                title="Receipt date"
                aria-label="Receipt date"
                value={receiptFormData.date}
                onChange={handleReceiptFormChange}
                className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                required
              />
              <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <FaCalendarAlt className="h-4 w-4 text-gray-400" />
              </div>
            </div>
          </div>

          {/* Customer Selection Section */}
          <div className="mb-4">
            <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Customer</label>
            <div className="relative">
              <select
                name="customerSelect"
                title="Select customer"
                value={receiptFormData.isNewCustomer ? "new" : (receiptFormData.customerId || "")}
                onChange={handleReceiptFormChange}
                className={`w-full p-2.5 sm:p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm appearance-none`}
              >
                <option value="">-- Select Customer --</option>
                {customers.map(customer => (
                  <option key={customer.id} value={customer.id}>
                    {customer.name} {customer.phone ? `(${customer.phone})` : ""}
                  </option>
                ))}
                <option value="new" className={`text-${currentTheme.accent} font-medium`}>+ Create New Customer</option>
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                <FaChevronDown className="h-4 w-4 text-gray-400" />
              </div>
            </div>
          </div>

          {/* New Customer Form */}
          {receiptFormData.isNewCustomer && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className={`mb-4 p-4 border border-${currentTheme.border} rounded-lg bg-${currentTheme.background}/50`}
            >
              <div className="flex items-center mb-3">
                <FaUserPlus className={`mr-2 text-${currentTheme.accent}`} />
                <h3 className={`text-sm font-medium text-${currentTheme.text}`}>New Customer Details</h3>
              </div>
              
              <div className="mb-3">
                <label className={`block text-xs text-gray-400 mb-1`}>Customer Name *</label>
                <input
                  type="text"
                  name="customerName"
                  value={receiptFormData.customerName}
                  onChange={handleReceiptFormChange}
                  className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                  placeholder="Enter customer name"
                  required
                />
              </div>
              
              <div className="grid grid-cols-2 gap-3 mb-3">
                <div>
                  <label className={`block text-xs text-gray-400 mb-1`}>Email</label>
                  <input
                    type="email"
                    name="newCustomer.email"
                    value={receiptFormData.newCustomerData?.email || ""}
                    onChange={handleReceiptFormChange}
                    className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                    placeholder="Email"
                  />
                </div>
                <div>
                  <label className={`block text-xs text-gray-400 mb-1`}>Phone</label>
                  <input
                    type="tel"
                    name="newCustomer.phone"
                    value={receiptFormData.newCustomerData?.phone || ""}
                    onChange={handleReceiptFormChange}
                    className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                    placeholder="Phone number"
                  />
                </div>
              </div>
              
              <div className="mb-3">
                <label className={`block text-xs text-gray-400 mb-1`}>Address</label>
                <input
                  type="text"
                  name="newCustomer.address"
                  value={receiptFormData.newCustomerData?.address || ""}
                  onChange={handleReceiptFormChange}
                  className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                  placeholder="Address"
                />
              </div>
              
              <div>
                <label className={`block text-xs text-gray-400 mb-1`}>Notes</label>
                <textarea
                  name="newCustomer.notes"
                  value={receiptFormData.newCustomerData?.notes || ""}
                  onChange={handleReceiptFormChange}
                  className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                  rows={2}
                  placeholder="Any additional notes"
                />
              </div>
            </motion.div>
          )}

          {/* Items Selection */}
          <div className="mb-4">
            <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Items</label>
            
            <div className={`bg-${currentTheme.background} rounded-lg border border-${currentTheme.border} p-4 mb-3`}>
              <div className="grid grid-cols-3 gap-2">
                <div className="col-span-2">
                  <label className="block text-xs text-gray-400 mb-1">Select Item</label>
                  <div className="relative">
                    <select
                      title="Select inventory item"
                      aria-label="Select inventory item"
                      className={`w-full p-2.5 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm appearance-none`}
                      value=""
                      onChange={(e) => {
                        if (e.target.value) {
                          const selectedItem = inventory.find(item => item.id === e.target.value);
                          if (selectedItem) {
                            const receiptItem = {
                              id: selectedItem.id,
                              name: selectedItem.name,
                              quantity: 1,
                              price: selectedItem.sellingPrice
                            };
                            setReceiptFormData({
                              ...receiptFormData,
                              items: [...receiptFormData.items, receiptItem],
                              totalAmount: receiptFormData.totalAmount + selectedItem.sellingPrice
                            });
                            e.target.value = ""; // Reset select
                          }
                        }
                      }}
                    >
                      <option value="">-- Select an item --</option>
                      {inventory
                        .filter(item => item.quantity > 0)
                        .filter(item => {
                          const existingItem = receiptFormData.items.find((receiptItem) => receiptItem.id === item.id);
                          
                          // If editing, we need to consider the original receipt quantities
                          if (editingReceipt && existingItem) {
                            const originalItem = editingReceipt.items.find((origItem) => origItem.id === item.id);
                            if (originalItem) {
                              // Only filter out if quantity in form exceeds available + original
                              return existingItem.quantity < item.quantity + originalItem.quantity;
                            }
                          }
                          
                          // For new receipts, just check if there's still available inventory
                          return !existingItem || existingItem.quantity < item.quantity;
                        })
                        .map((item) => {
                          // Calculate available quantity
                          const existingItem = receiptFormData.items.find((receiptItem) => receiptItem.id === item.id);
                          let availableQty = item.quantity;
                          
                          if (existingItem) {
                            if (editingReceipt) {
                              const originalItem = editingReceipt.items.find((origItem) => origItem.id === item.id);
                              if (originalItem) {
                                availableQty = item.quantity + originalItem.quantity - existingItem.quantity;
                              } else {
                                availableQty = item.quantity - existingItem.quantity;
                              }
                            } else {
                              availableQty = item.quantity - existingItem.quantity;
                            }
                          }
                          
                          return (
                            <option key={item.id} value={item.id}>
                              {item.name} - {formatCurrency(item.sellingPrice)} (Available: {availableQty})
                            </option>
                          );
                        })}
                    </select>
                    <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                      <FaChevronDown className="h-4 w-4 text-gray-400" />
                    </div>
                  </div>
                </div>
                
                <div>
                  <label className="block text-xs text-gray-400 mb-1">Quantity</label>
                  <input
                    type="text"
                    inputMode="numeric"
                    className={`w-full p-2.5 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm text-center`}
                    placeholder="1"
                    title="Item quantity"
                    aria-label="Item quantity"
                    disabled
                    value="1"
                  />
                </div>
              </div>
            </div>
            
            {/* Item List */}
            {receiptFormData.items.length > 0 ? (
              <div className={`bg-${currentTheme.background} rounded-lg border border-${currentTheme.border} overflow-x-auto`}>
                <table className="min-w-full divide-y divide-gray-700">
                  <thead>
                    <tr>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-400">Item</th>
                      <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Qty</th>
                      <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Price</th>
                      <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Total</th>
                      <th className="px-3 py-2 text-xs font-medium text-gray-400"></th>
                    </tr>
                  </thead>
                  <motion.tbody
                    variants={staggerContainer}
                    initial="hidden"
                    animate="visible"
                    className={`divide-y divide-${currentTheme.border}`}
                  >
                    {receiptFormData.items.map((item, index) => {
                      // Calculate max allowed quantity
                      const inventoryItem = inventory.find((invItem) => invItem.id === item.id);
                      let maxAllowed = inventoryItem?.quantity || 1;
                      
                      // If editing, account for original quantity
                      if (editingReceipt) {
                        const originalItem = editingReceipt.items.find((origItem) => origItem.id === item.id);
                        if (originalItem) {
                          maxAllowed += originalItem.quantity;
                        }
                      }
                      
                      return (
                        <motion.tr key={`${item.id}-${index}`} variants={tableRowVariant}>
                          <td className={`px-3 py-2 text-sm text-${currentTheme.text}`}>{item.name}</td>
                          <td className="px-3 py-2 text-right">
                            <div className="flex items-center justify-end">
                              <button
                                type="button"
                                title="Decrease quantity"
                                aria-label={`Decrease quantity for ${item.name}`}
                                onClick={() => {
                                  if (item.quantity <= 1) return;
                                  
                                  const newItems = [...receiptFormData.items];
                                  const oldTotal = item.quantity * item.price;
                                  const newQuantity = item.quantity - 1;
                                  const newTotal = newQuantity * item.price;
                                  
                                  newItems[index] = {
                                    ...item,
                                    quantity: newQuantity,
                                  };
                                  
                                  setReceiptFormData({
                                    ...receiptFormData,
                                    items: newItems,
                                    totalAmount: receiptFormData.totalAmount - oldTotal + newTotal,
                                  });
                                }}
                                className={`w-7 h-7 flex items-center justify-center rounded-l-md border border-${currentTheme.border} bg-${currentTheme.background} text-${currentTheme.text} ${item.quantity <= 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-700'}`}
                                disabled={item.quantity <= 1}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                                </svg>
                              </button>
                              <input
                                type="text"
                                title={`Quantity for ${item.name}`}
                                placeholder="Qty"
                                aria-label={`Quantity for ${item.name}`}
                                className={`w-10 p-1 bg-${currentTheme.background} border-y border-${currentTheme.border} text-${currentTheme.text} text-sm text-center focus:outline-none select-none`}
                                inputMode="numeric"
                                value={item.quantity}
                                onChange={(e) => {
                                  // Extract digits only
                                  const inputVal = e.target.value.replace(/\D/g, '');
                                  
                                  // Parse and apply limits
                                  const newValue = inputVal ? parseInt(inputVal) : 1;
                                  const newQuantity = Math.min(newValue, maxAllowed);
                                  
                                  if (newValue > maxAllowed) {
                                    toast.error(`Maximum available quantity for ${item.name} is ${maxAllowed}`);
                                  }
                                  
                                  const newItems = [...receiptFormData.items];
                                  const oldTotal = item.quantity * item.price;
                                  const newTotal = newQuantity * item.price;
                                  
                                  newItems[index] = {
                                    ...item,
                                    quantity: newQuantity,
                                  };
                                  
                                  setReceiptFormData({
                                    ...receiptFormData,
                                    items: newItems,
                                    totalAmount: receiptFormData.totalAmount - oldTotal + newTotal,
                                  });
                                }}
                              />
                              <button
                                type="button"
                                title="Increase quantity"
                                aria-label={`Increase quantity for ${item.name}`}
                                onClick={() => {
                                  if (item.quantity >= maxAllowed) {
                                    toast.error(`Maximum available quantity for ${item.name} is ${maxAllowed}`);
                                    return;
                                  }
                                  
                                  const newItems = [...receiptFormData.items];
                                  const oldTotal = item.quantity * item.price;
                                  const newQuantity = item.quantity + 1;
                                  const newTotal = newQuantity * item.price;
                                  
                                  newItems[index] = {
                                    ...item,
                                    quantity: newQuantity,
                                  };
                                  
                                  setReceiptFormData({
                                    ...receiptFormData,
                                    items: newItems,
                                    totalAmount: receiptFormData.totalAmount - oldTotal + newTotal,
                                  });
                                }}
                                className={`w-7 h-7 flex items-center justify-center rounded-r-md border border-${currentTheme.border} bg-${currentTheme.background} text-${currentTheme.text} ${item.quantity >= maxAllowed ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-700'}`}
                                disabled={item.quantity >= maxAllowed}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                                </svg>
                              </button>
                            </div>
                            <div className="text-xs text-gray-500 mt-1">
                              Max: {maxAllowed}
                            </div>
                          </td>
                          <td className={`px-3 py-2 text-right text-sm text-${currentTheme.text}`}>{formatCurrency(item.price)}</td>
                          <td className={`px-3 py-2 text-right text-sm text-${currentTheme.success}`}>
                            {formatCurrency(item.price * item.quantity)}
                          </td>
                          <td className="px-3 py-2 text-center">
                            <button
                              type="button"
                              title="Remove item"
                              aria-label="Remove item from receipt"
                              className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80`}
                              onClick={() => {
                                const newItems = receiptFormData.items.filter((_, i) => i !== index);
                                const itemTotal = item.price * item.quantity;
                                
                                setReceiptFormData({
                                  ...receiptFormData,
                                  items: newItems,
                                  totalAmount: receiptFormData.totalAmount - itemTotal,
                                });
                              }}
                            >
                              <FaTimes />
                            </button>
                          </td>
                        </motion.tr>
                      );
                    })}
                  </motion.tbody>
                  <tfoot>
                    <tr className={`border-t-2 border-${currentTheme.primary}/30`}>
                      <td className={`px-3 py-2 text-sm font-medium text-${currentTheme.text}`} colSpan={3}>
                        Total
                      </td>
                      <td className={`px-3 py-2 text-right text-sm font-bold text-${currentTheme.success}`}>
                        {formatCurrency(receiptFormData.totalAmount)}
                      </td>
                      <td></td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            ) : (
              <div className={`text-center py-4 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}>
                <p className="text-gray-400 text-sm">No items added to receipt</p>
              </div>
            )}
          </div>

          {/* File Upload Section - Added to match other modals */}
          <div className={`mb-4 p-3 border border-${currentTheme.border} rounded-lg bg-${currentTheme.background}/50`}>
            <div className="flex items-center mb-2">
              <FaFileInvoice className={`mr-2 text-${currentTheme.accent}`} />
              <h4 className={`text-sm font-medium text-${currentTheme.text}`}>Receipt Attachments (Optional)</h4>
            </div>
            
            <label className={`flex items-center justify-center p-2.5 rounded cursor-pointer bg-${currentTheme.accent}/10 hover:bg-${currentTheme.accent}/20 border border-${currentTheme.border} text-${currentTheme.accent} text-sm transition-colors w-full`}>
              <FaUpload className="mr-2" />
              Attach Receipt Image
              <input
                type="file"
                accept="image/*,.pdf"
                className="hidden"
                onChange={(e) => {
                  const file = e.target.files?.[0];
                  if (file) {
                    // Handle file upload logic here
                    toast.success(`File "${file.name}" attached`);
                  }
                }}
              />
            </label>
          </div>

          {/* Hidden input for total amount */}
          <input
            type="hidden"
            name="totalAmount"
            value={receiptFormData.totalAmount}
            title="Receipt Total Amount"
            placeholder="Receipt Total Amount"
          />

          <div className={`flex flex-col sm:flex-row sm:justify-end space-y-2 sm:space-y-0 sm:space-x-3 mt-6 pt-4 border-t border-${currentTheme.border}`}>
            <button
              type="button"
              onClick={() => {
                setShowReceiptModal(false);
                setEditingReceipt(null);
              }}
              className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm w-full sm:w-auto`}
            >
              Cancel
            </button>
            <button
              type="submit"
              className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center justify-center text-sm w-full sm:w-auto`}
            >
              <FaPlus className="mr-2 h-4 w-4" />
              {editingReceipt ? 'Update Receipt' : 'Save Receipt'}
            </button>
          </div>
        </form>
      </div>
    </motion.div>
  </motion.div>
)}

      </AnimatePresence>


{/* Payroll Detail Modal */}
<AnimatePresence>
  {showPayrollDetailModal && selectedPayroll && (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.3 }}
      className="fixed inset-0 bg-black/50 backdrop-blur-md flex items-center justify-center z-50 p-4"
      onClick={() => setShowPayrollDetailModal(false)}
    >
      <motion.div
        initial={{ scale: 0.95, y: 20 }}
        animate={{ scale: 1, y: 0 }}
        exit={{ scale: 0.95, y: 10 }}
        transition={{ type: "spring", stiffness: 300, damping: 25 }}
        className="bg-white p-0 rounded-2xl shadow-2xl w-full max-w-2xl border border-gray-200/50 max-h-[85vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Elegant Header */}
        <div className="relative overflow-hidden">
          {/* Background elements */}
          <div className="absolute inset-0 bg-gradient-to-br from-blue-600 to-indigo-900"></div>
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_top_right,rgba(255,255,255,0.15),transparent_60%)]"></div>
          <div className="absolute top-0 right-0 w-72 h-72 bg-white/10 rounded-full -translate-y-1/3 translate-x-1/3 blur-lg"></div>
          
          {/* Header content */}
          <div className="relative z-10 px-8 py-7">
            <div className="flex justify-between items-start">
              <div className="space-y-1">
                <div className="flex items-center gap-2">
                  <div className="p-1.5 bg-white/20 rounded-lg backdrop-blur-sm">
                    <FaBriefcase className="text-white w-5 h-5" />
                  </div>
                  <h1 className="text-white text-2xl font-bold font-serif tracking-tight">
                    {businessInfo.name || "Your Company"}
                  </h1>
                </div>
                <p className="text-blue-100/90 text-sm max-w-md pl-10">
                  {businessInfo.address || "123 Business Street, Financial City"}
                </p>
              </div>
              <div className="text-right">
                <div className="inline-block px-3 py-1 bg-white/10 backdrop-blur-sm rounded-full">
                  <span className="text-white/90 text-sm font-medium uppercase tracking-wider">
                    Payslip
                  </span>
                </div>
                <div className="text-blue-100/80 text-xs font-mono mt-2">
                  {formatDate(selectedPayroll.paymentDate || new Date())}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Main content */}
        <div className="p-6 md:p-8 bg-white" ref={payrollDetailRef}>
          {/* Employee & Payment Details - Redesigned grid layout */}
          <div className="grid md:grid-cols-2 gap-6">
            {/* Employee card */}
            <div className="bg-gradient-to-br from-gray-50 to-slate-50 p-5 rounded-xl border border-gray-100 shadow-sm">
              <div className="flex items-start">
                <div className="h-10 w-10 rounded-full bg-blue-100/50 border border-blue-200/50 flex items-center justify-center mr-3 shadow-sm">
                  <FaUser className="text-blue-600 w-5 h-5" />
                </div>
                <div>
                  <h2 className="text-slate-400 text-xs font-semibold uppercase tracking-wider mb-1">Employee</h2>
                  <h3 className="text-gray-900 text-lg font-bold">{selectedPayroll.employeeName}</h3>
                  <p className="text-gray-500 text-sm">{selectedPayroll.position}</p>
                  
                  <div className="mt-4 space-y-2 text-sm">
                    {selectedPayroll.employeePhone && (
                      <div className="flex items-center text-gray-600">
                        <div className="w-6 h-6 rounded-full bg-gray-100 flex items-center justify-center mr-2">
                          <FaPhone className="w-3 h-3 text-gray-600" />
                        </div>
                        {selectedPayroll.employeePhone}
                      </div>
                    )}
                    {selectedPayroll.employeeEmail && (
                      <div className="flex items-center text-gray-600">
                        <div className="w-6 h-6 rounded-full bg-gray-100 flex items-center justify-center mr-2">
                          <FaEnvelope className="w-3 h-3 text-gray-600" />
                        </div>
                        {selectedPayroll.employeeEmail}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Payment details card */}
            <div className="bg-gradient-to-br from-slate-50 to-gray-50 p-5 rounded-xl border border-gray-100 shadow-sm">
              <div className="flex items-start">
                <div className="h-10 w-10 rounded-full bg-indigo-100/50 border border-indigo-200/50 flex items-center justify-center mr-3 shadow-sm">
                  <FaCalendarAlt className="text-indigo-600 w-5 h-5" />
                </div>
                <div className="w-full">
                  <h2 className="text-slate-400 text-xs font-semibold uppercase tracking-wider mb-1">Payment Period</h2>
                  
                  <div className="flex items-center justify-between mb-3">
                    <span className="text-gray-500 text-xs">From:</span>
                    <span className="font-medium text-gray-900">{formatDate(selectedPayroll.payPeriodStart)}</span>
                  </div>
                  
                  <div className="flex items-center justify-between mb-3">
                    <span className="text-gray-500 text-xs">To:</span>
                    <span className="font-medium text-gray-900">{formatDate(selectedPayroll.payPeriodEnd)}</span>
                  </div>
                  
                  <div className="flex items-center justify-between mb-3">
                    <span className="text-gray-500 text-xs">Status:</span>
                    <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                      selectedPayroll.status === 'paid' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-amber-100 text-amber-800'
                    }`}>
                      {selectedPayroll.status === 'paid' ? (
                        <><FaCheckCircle className="mr-1 w-3 h-3" /> Paid</>
                      ) : (
                        <><FaClock className="mr-1 w-3 h-3" /> Pending</>
                      )}
                    </span>
                  </div>
                  
                  {selectedPayroll.paymentDate && (
                    <div className="flex items-center justify-between">
                      <span className="text-gray-500 text-xs">Payment Date:</span>
                      <span className="font-medium text-gray-900">{formatDate(selectedPayroll.paymentDate)}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Earnings Table - Beautifully styled */}
          <div className="mt-8">
            <h2 className="flex items-center text-gray-900 text-base font-semibold mb-4">
              <div className="w-8 h-8 rounded-lg bg-blue-100 flex items-center justify-center mr-2">
                <FaMoneyCheckAlt className="text-blue-600 w-4 h-4" />
              </div>
              Compensation Details
            </h2>
            
            <div className="overflow-hidden rounded-xl border border-gray-200 shadow-sm">
              <table className="w-full">
                <thead className="bg-slate-50">
                  <tr>
                    <th className="py-3 px-4 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Description</th>
                    <th className="py-3 px-4 text-right text-xs font-medium text-slate-500 uppercase tracking-wider">Amount</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  <tr className="bg-white hover:bg-gray-50 transition-colors duration-150">
                    <td className="py-3.5 px-4 text-sm font-medium text-gray-700 flex items-center">
                      <div className="w-6 h-6 rounded-full bg-blue-100/70 flex items-center justify-center mr-2">
                        <FaMoneyBill className="text-blue-700 w-3 h-3" />
                      </div>
                      Base Salary
                    </td>
                    <td className="py-3.5 px-4 text-right text-sm text-gray-900 font-medium">{formatCurrency(selectedPayroll.baseSalary)}</td>
                  </tr>
                  <tr className="bg-white hover:bg-gray-50 transition-colors duration-150">
                    <td className="py-3.5 px-4 text-sm font-medium text-gray-700 flex items-center">
                      <div className="w-6 h-6 rounded-full bg-green-100/70 flex items-center justify-center mr-2">
                        <FaClock className="text-green-700 w-3 h-3" />
                      </div>
                      Overtime Pay
                    </td>
                    <td className="py-3.5 px-4 text-right text-sm text-green-600 font-medium">+{formatCurrency(selectedPayroll.overtime)}</td>
                  </tr>
                  <tr className="bg-white hover:bg-gray-50 transition-colors duration-150">
                    <td className="py-3.5 px-4 text-sm font-medium text-gray-700 flex items-center">
                      <div className="w-6 h-6 rounded-full bg-red-100/70 flex items-center justify-center mr-2">
                        <FaMinus className="text-red-700 w-3 h-3" />
                      </div>
                      Deductions
                    </td>
                    <td className="py-3.5 px-4 text-right text-sm text-red-600 font-medium">-{formatCurrency(selectedPayroll.deductions)}</td>
                  </tr>
                  <tr className="bg-gradient-to-r from-blue-50 to-indigo-50">
                    <td className="py-4 px-4 text-sm font-semibold text-indigo-800">Net Pay</td>
                    <td className="py-4 px-4 text-right text-lg font-bold text-indigo-800">{formatCurrency(selectedPayroll.netPay)}</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          {/* Elegant Payment visualization */}
          <div className="mt-6 p-5 rounded-xl border border-gray-100 bg-white shadow-sm">
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center text-sm font-medium text-gray-700">
                <FaChartPie className="w-4 h-4 mr-2 text-blue-500" />
                Salary Breakdown
              </div>
              <div className="text-sm font-medium text-blue-600">
                {formatCurrency(selectedPayroll.netPay)}
              </div>
            </div>
            
            {/* Enhanced progress bar */}
            <div className="relative h-2 w-full rounded-full bg-gray-100 overflow-hidden">
              <div 
                className="absolute h-full bg-blue-500 transition-all duration-500 ease-out"
                style={{ width: `${(selectedPayroll.baseSalary / (selectedPayroll.baseSalary + selectedPayroll.overtime + selectedPayroll.deductions)) * 100}%` }}
              ></div>
              <div 
                className="absolute h-full bg-green-500 transition-all duration-500 ease-out"
                style={{ 
                  width: `${(selectedPayroll.overtime / (selectedPayroll.baseSalary + selectedPayroll.overtime + selectedPayroll.deductions)) * 100}%`,
                  left: `${(selectedPayroll.baseSalary / (selectedPayroll.baseSalary + selectedPayroll.overtime + selectedPayroll.deductions)) * 100}%`
                }}
              ></div>
              <div 
                className="absolute h-full bg-red-500 transition-all duration-500 ease-out"
                style={{ 
                  width: `${(selectedPayroll.deductions / (selectedPayroll.baseSalary + selectedPayroll.overtime + selectedPayroll.deductions)) * 100}%`,
                  left: `${((selectedPayroll.baseSalary + selectedPayroll.overtime) / (selectedPayroll.baseSalary + selectedPayroll.overtime + selectedPayroll.deductions)) * 100}%`
                }}
              ></div>
            </div>

            {/* Clean legend */}
            <div className="grid grid-cols-3 gap-4 mt-4">
              <div className="flex items-center">
                <span className="w-3 h-3 rounded bg-blue-500 mr-2"></span>
                <div>
                  <p className="text-xs font-medium text-gray-700">Base Salary</p>
                  <p className="text-xs text-gray-500">
                    {Math.round((selectedPayroll.baseSalary / selectedPayroll.netPay) * 100)}%
                  </p>
                </div>
              </div>
              
              <div className="flex items-center">
                <span className="w-3 h-3 rounded bg-green-500 mr-2"></span>
                <div>
                  <p className="text-xs font-medium text-gray-700">Overtime</p>
                  <p className="text-xs text-gray-500">
                    {Math.round((selectedPayroll.overtime / selectedPayroll.netPay) * 100)}%
                  </p>
                </div>
              </div>
              
              <div className="flex items-center">
                <span className="w-3 h-3 rounded bg-red-500 mr-2"></span>
                <div>
                  <p className="text-xs font-medium text-gray-700">Deductions</p>
                  <p className="text-xs text-gray-500">
                    {Math.round((selectedPayroll.deductions / selectedPayroll.netPay) * 100)}%
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Transaction Barcode with elegant styling */}
          <div className="mt-8 pt-6 border-t border-gray-100">
            <div className="flex flex-col items-center">
              <div className="bg-gray-50 p-5 rounded-xl border border-gray-200 shadow-sm inline-block">
                <Barcode
                  value={selectedPayroll.id?.slice(-8).toUpperCase() || "00000000"}
                  width={1.5}
                  height={40}
                  format="CODE128"
                  displayValue={true}
                  font="Inter"
                  fontSize={12}
                  textPosition="bottom"
                  textMargin={6}
                  background="#F9FAFB"
                  lineColor="#1f2937"
                />
              </div>
              <div className="text-center mt-3">
                <p className="text-xs font-medium text-gray-500">
                  Transaction ID: {selectedPayroll.id?.substring(0, 10)}...
                </p>
                <p className="text-[0.65rem] text-gray-400 uppercase tracking-wider mt-1">
                  Scan to verify payment authenticity
                </p>
              </div>
            </div>
          </div>

          {/* Footer Note */}
          <div className="mt-6 pt-4 text-center text-xs text-gray-500">
            <p>This is an official electronic payslip authorized by {businessInfo.name || "Your Company"}</p>
            <p className="mt-1">Generated on {formatDate(new Date())} • Valid without signature</p>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="sticky bottom-0 bg-white border-t border-gray-100 p-4 backdrop-blur-md bg-white/90">
          <div className="flex justify-end gap-3">
            <button
              onClick={() => setShowPayrollDetailModal(false)}
              className="px-4 py-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg border border-gray-200 text-sm font-medium transition-colors duration-150"
            >
              Close
            </button>
            <button
              onClick={generatePayrollView}
              className="px-5 py-2 bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white rounded-lg shadow-sm font-medium text-sm flex items-center gap-2 transition-all duration-300"
              disabled={isLoading}
            >
              {isLoading ? (
                <FaSpinner className="animate-spin" />
              ) : (
                <FaDownload />
              )}
              Download PDF
            </button>
            <button
              onClick={() => window.print()}
              className="px-5 py-2 bg-gray-800 hover:bg-gray-900 text-white rounded-lg shadow-sm font-medium text-sm flex items-center gap-2 transition-colors duration-150"
            >
              <FaPrint />
              Print
            </button>
          </div>
        </div>
      </motion.div>
    </motion.div>
  )}
</AnimatePresence>

      {/* Category Modal */}
      <AnimatePresence>
        {showCategoryModal && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border}`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-2 text-${currentTheme.accent}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  {editingCategory ? 'Edit Category' : 'Add Category'}
                </h3>
                <button 
                  onClick={() => {
                    setShowCategoryModal(false);
                    setEditingCategory(null);
                  }}
                  className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                >
                  <FaTimes />
                </button>
              </div>
              
              <div className="px-6 py-4">
                <form onSubmit={(e) => { 
                  e.preventDefault(); 
                  editingCategory ? updateCategory() : addCategory();
                }}>
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Category Name</label>
                    <input 
                      type="text" 
                      name="name"
                      value={categoryFormData.name}
                      onChange={handleCategoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                      placeholder="Enter category name"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Description</label>
                    <textarea 
                      name="description"
                      value={categoryFormData.description}
                      onChange={handleCategoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      rows={3}
                      placeholder="Category description (optional)"
                    ></textarea>
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Category Type</label>
                    <select
                      name="type"
                      title="Category Type"
                      value={categoryFormData.type}
                      onChange={handleCategoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                    >
                      <option value="both">Both Inventory & Transactions</option>
                      <option value="inventory">Inventory Only</option>
                      <option value="transaction">Transactions Only</option>
                    </select>
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Color</label>
                    <div className="grid grid-cols-5 gap-2">
                      {categoryColors.map(color => (
                        <div 
                          key={color} 
                          className={`w-full aspect-square rounded-md cursor-pointer border-2 ${categoryFormData.color === color ? `border-${currentTheme.text}` : 'border-transparent'}`}
                          onClick={() => setCategoryFormData({...categoryFormData, color})}
                        >
                          <div className={`w-full h-full rounded bg-${color} hover:opacity-80 transition-opacity`}></div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    <button 
                      type="button"
                      onClick={() => {
                        setShowCategoryModal(false);
                        setEditingCategory(null);
                      }}
                      className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                    >
                      Cancel
                    </button>
                    <button 
                      type="submit"
                      className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaPlus className="mr-2 h-4 w-4" /> 
                      {editingCategory ? 'Update Category' : 'Save Category'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Customer Modal */}
      <AnimatePresence>
        {showCustomerModal && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border}`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <FaUser className={`mr-2 text-${currentTheme.accent}`} />
                  {editingCustomer ? 'Edit Customer' : 'Add Customer'}
                </h3>
                <button 
                  onClick={() => {
                    setShowCustomerModal(false);
                    setEditingCustomer(null);
                  }}
                  className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                >
                  <FaTimes />
                </button>
              </div>
              
              <div className="px-6 py-4">
                <form onSubmit={(e) => { 
                  e.preventDefault(); 
                  editingCustomer ? updateCustomer() : addCustomer();
                }}>
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Full Name *</label>
                    <input 
                      type="text" 
                      name="name"
                      value={customerFormData.name}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                      placeholder="Enter customer name"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Email Address</label>
                    <input 
                      type="email" 
                      name="email"
                      value={customerFormData.email}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="email@example.com"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Phone Number</label>
                    <input 
                      type="tel" 
                      name="phone"
                      value={customerFormData.phone}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="+1 (555) 123-4567"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Address</label>
                    <input 
                      type="text" 
                      name="address"
                      value={customerFormData.address}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="123 Main St, City, Country"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Notes</label>
                    <textarea 
                      name="notes"
                      value={customerFormData.notes}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      rows={3}
                      placeholder="Additional notes about this customer"
                    ></textarea>
                  </div>
                  
                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    <button 
                      type="button"
                      onClick={() => {
                        setShowCustomerModal(false);
                        setEditingCustomer(null);
                      }}
                      className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                    >
                      Cancel
                    </button>
                    <button 
                      type="submit"
                      className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaPlus className="mr-2 h-4 w-4" /> 
                      {editingCustomer ? 'Update Customer' : 'Save Customer'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Invoice Modal */}
      <AnimatePresence>
        {showInvoiceModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border} max-h-[90vh] overflow-y-auto`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <FaDollarSign className={`mr-2 text-${currentTheme.accent}`} />
                  {editingInvoice ? 'Edit Invoice' : 'Create Invoice'}
                </h3>
                <button
                  onClick={() => {
                    setShowInvoiceModal(false);
                    setEditingInvoice(null);
                  }}
                  className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                >
                  <FaTimes />
                </button>
              </div>

              <div className="px-6 py-4">
                <form onSubmit={(e) => {
                  e.preventDefault();
                  editingInvoice ? updateInvoice() : addInvoice();
                }}>
                  {/* Dates section */}
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Issue Date</label>
                      <input
                        type="date"
                        name="date"
                        title="Invoice date"
                        value={invoiceFormData.date}
                        onChange={handleInvoiceFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        required
                      />
                    </div>
                    <div>
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Due Date</label>
                      <input
                        type="date"
                        name="dueDate"
                        title="Due date"
                        value={invoiceFormData.dueDate}
                        onChange={handleInvoiceFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        required
                      />
                    </div>
                  </div>
                  
                  {/* Payment Status */}
                    <div className="mb-4">
                      <label className={`flex justify-between items-center text-sm font-medium text-${currentTheme.text} mb-1`}>
                        <span>Payment Status</span>
                        <span className="text-xs text-gray-400">
                          {invoiceFormData.isPaid ? 'Paid' : 'Unpaid'}
                        </span>
                      </label>
                      <div 
                        className={`relative h-8 w-full rounded-full ${invoiceFormData.isPaid ? `bg-${currentTheme.success}/20` : `bg-${currentTheme.background}`} border border-${currentTheme.border} cursor-pointer transition-colors duration-200`}
                        onClick={() => setInvoiceFormData({
                          ...invoiceFormData, 
                          isPaid: !invoiceFormData.isPaid,
                          paidDate: !invoiceFormData.isPaid ? formatDateForInput(new Date()) : ''
                        })}
                      >
                        <div 
                          className={`absolute top-1 ${
                            invoiceFormData.isPaid ? 'right-1' : 'left-1'
                          } h-6 w-12 rounded-full transition-all duration-300 ${
                            invoiceFormData.isPaid ? `bg-${currentTheme.success}` : `bg-${currentTheme.border}`
                          } flex items-center justify-center text-xs font-medium`}
                        >
                          {invoiceFormData.isPaid ? (
                              <span className="text-white flex flec-col items-center">
                                <FaCheck size={10} className="mr-1" />
                                {editingInvoice && isInvoicePaymentLocked(editingInvoice) ? (
                                  <>
                                    Locked <FaLock size={8} className="ml-1" title="Payment status can no longer be changed" />
                                  </>
                                ) : (
                                  <>
                                    Paid <span className="text-xs opacity-70 flex  ml-1"></span>
                                  </>
                                )}
                              </span>
                            ) : (
                              <span className={`text-${currentTheme.text}`}>Unpaid</span>
                            )}
                        </div>
                      </div>
                      
                      {/* Payment date field (shows only when paid is selected) */}
                      {invoiceFormData.isPaid && (
                        <motion.div 
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          className="mt-2"
                        >
                          <label className={`block text-xs text-gray-400 mb-1`}>Payment Date</label>
                          <input
                            type="date"
                            name="paidDate"
                            title="Payment date"
                            value={invoiceFormData.paidDate}
                            onChange={handleInvoiceFormChange}
                            className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                            required={invoiceFormData.isPaid}
                          />
                        </motion.div>
                      )}
                      
                      {/* Optional note that appears when paid is selected */}
                      {invoiceFormData.isPaid && (
                        <motion.p 
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          className="text-xs text-gray-400 mt-2 flex items-center"
                        >
                          <FaInfoCircle className="mr-1 text-blue-400" size={12} />
                          A transaction will be automatically created when saved
                        </motion.p>
                      )}
                    </div>

                  {/* Payment Terms */}
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Payment Terms</label>
                    <select
                      name="paymentTerms"
                      title="Payment terms"
                      value={invoiceFormData.paymentTerms}
                      onChange={handleInvoiceFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    >
                      <option value="Due on receipt">Due on receipt</option>
                      <option value="Net 7">Net 7 days</option>
                      <option value="Net 15">Net 15 days</option>
                      <option value="Net 30">Net 30 days</option>
                      <option value="Net 60">Net 60 days</option>
                      <option value="End of month">End of month</option>
                      <option value="End of next month">End of next month</option>
                      <option value="Custom">Custom</option>
                    </select>
                  </div>

                  {/* Customer Selection Section */}
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Customer</label>
                    <select
                      name="customerSelect"
                      title="Select customer"
                      value={invoiceFormData.isNewCustomer ? "new" : (invoiceFormData.customerId || "")}
                      onChange={handleInvoiceFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                    >
                      <option value="">-- Select Customer --</option>
                      {customers.map(customer => (
                        <option key={customer.id} value={customer.id}>
                          {customer.name} {customer.phone ? `(${customer.phone})` : ""}
                        </option>
                      ))}
                      <option value="new" className={`text-${currentTheme.accent} font-medium`}>+ Create New Customer</option>
                    </select>
                  </div>

                  {/* New Customer Form */}
                  {invoiceFormData.isNewCustomer && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: "auto" }}
                      exit={{ opacity: 0, height: 0 }}
                      className={`mb-4 p-4 border border-${currentTheme.border} rounded-lg bg-${currentTheme.background}/50`}
                    >
                      <div className="flex items-center mb-3">
                        <FaUserPlus className={`mr-2 text-${currentTheme.accent}`} />
                        <h3 className={`text-sm font-medium text-${currentTheme.text}`}>New Customer Details</h3>
                      </div>
                      
                      <div className="mb-3">
                        <label className={`block text-xs text-gray-400 mb-1`}>Customer Name</label>
                        <input
                          type="text"
                          name="customerName"
                          value={invoiceFormData.customerName}
                          onChange={handleInvoiceFormChange}
                          className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                          placeholder="Enter customer name"
                          required
                        />
                      </div>
                      
                      <div className="grid grid-cols-2 gap-3 mb-3">
                        <div>
                          <label className={`block text-xs text-gray-400 mb-1`}>Email</label>
                          <input
                            type="email"
                            name="newCustomer.email"
                            value={invoiceFormData.newCustomerData?.email || ""}
                            onChange={handleInvoiceFormChange}
                            className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                            placeholder="Email"
                          />
                        </div>
                        <div>
                          <label className={`block text-xs text-gray-400 mb-1`}>Phone</label>
                          <input
                            type="text"
                            name="newCustomer.phone"
                            value={invoiceFormData.newCustomerData?.phone || ""}
                            onChange={handleInvoiceFormChange}
                            className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                            placeholder="Phone"
                          />
                        </div>
                      </div>
                      
                      <div className="mb-3">
                        <label className={`block text-xs text-gray-400 mb-1`}>Address</label>
                        <input
                          type="text"
                          name="newCustomer.address"
                          value={invoiceFormData.newCustomerData?.address || ""}
                          onChange={handleInvoiceFormChange}
                          className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                          placeholder="Address"
                        />
                      </div>
                      
                      <div>
                        <label className={`block text-xs text-gray-400 mb-1`}>Notes</label>
                        <textarea
                          name="newCustomer.notes"
                          value={invoiceFormData.newCustomerData?.notes || ""}
                          onChange={handleInvoiceFormChange}
                          className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                          rows={2}
                          placeholder="Any additional notes"
                        />
                      </div>
                    </motion.div>
                  )}

                  {/* Invoice Items */}
                  <div className="mb-4">
  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Invoice Items</label>
  
  <div className={`bg-${currentTheme.background} rounded-lg border border-${currentTheme.border} p-4 mb-3`}>
    {/* Inventory item selection dropdown - improved */}
    <div className="mb-4">
      <label className="block text-xs font-medium text-gray-400 mb-1">Select from Inventory</label>
      <div className="relative">
        <select
          title="Select inventory item"
          className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm appearance-none`}
          onChange={(e) => {
            const selectedItemId = e.target.value;
            if (!selectedItemId) return;
            
            const selectedItem = inventory.find(item => item.id === selectedItemId);
            if (selectedItem) {
              // Set default quantity to 1 or max available if less than 1
              const defaultQuantity = Math.min(1, selectedItem.quantity);
              // Add properly typed properties to the state
              setTempInvoiceItem({
                name: selectedItem.name,
                quantity: defaultQuantity,
                price: selectedItem.sellingPrice,
                inventoryId: selectedItem.id,
                maxQuantity: selectedItem.quantity
              } as any); // Use type assertion on the entire object instead
            }
            e.target.value = ""; // Reset selection after use
          }}
          value=""
        >
          <option value="">-- Select inventory item --</option>
          {inventory.map((item) => (
            <option 
              key={item.id} 
              value={item.id}
              disabled={item.quantity <= 0}
              className={item.quantity <= 0 ? "text-gray-400" : ""}
            >
              {item.name} - {formatCurrency(item.sellingPrice)} {" "}
              {item.quantity <= 0 ? "(Out of stock)" : 
               item.quantity < 5 ? `(Low stock: ${item.quantity})` : 
               `(${item.quantity} in stock)`}
            </option>
          ))}
        </select>
        <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
          <FaChevronDown className="h-4 w-4 text-gray-400" />
        </div>
      </div>
    </div>
    
    {/* Item input form - improved with validation */}
    <div className="grid md:grid-cols-2 grid-cols-1 gap-4 mb-4">
  <div className="col-span-2">
    <label className="block text-xs font-medium text-gray-400 mb-1">Item Name</label>
    <input
      type="text"
      placeholder="Item Name"
      value={tempInvoiceItem.name}
      onChange={(e) => setTempInvoiceItem({...tempInvoiceItem, name: e.target.value})}
      className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
      readOnly={(tempInvoiceItem as any).inventoryId ? true : false}
    />
  </div>
  <div>
    <label className="text-xs font-medium text-gray-400 mb-1 flex items-center justify-between">
      <span>Quantity</span>
      {(tempInvoiceItem as any).inventoryId && (
        <span className={`text-xs ${(tempInvoiceItem as any).maxQuantity < 5 ? "text-amber-500" : "text-gray-400"}`}>
          Max: {(tempInvoiceItem as any).maxQuantity}
        </span>
      )}
    </label>
    <div className="flex rounded-lg overflow-hidden shadow-sm">
      <button 
        type="button"
        onClick={() => {
          if (tempInvoiceItem.quantity > 1) {
            setTempInvoiceItem({
              ...tempInvoiceItem, 
              quantity: tempInvoiceItem.quantity - 1
            });
          }
        }}
        className={`px-2.5 py-1.5 bg-${currentTheme.background} border border-${currentTheme.border} border-r-0 text-${currentTheme.text} hover:bg-${currentTheme.border}/30 active:bg-${currentTheme.border}/50 transition-colors duration-200 ${
          tempInvoiceItem.quantity <= 1 ? 'opacity-50 cursor-not-allowed' : ''
        }`}
        disabled={tempInvoiceItem.quantity <= 1}
        aria-label="Decrease quantity"
      >
        <FaMinus className="h-3 w-3" />
      </button>
      <input
        type="text"
        inputMode="numeric"
        placeholder="Qty"
        value={tempInvoiceItem.quantity || ''}
        onChange={(e) => {
          const value = e.target.value.replace(/[^\d]/g, '');
          const newValue = parseInt(value) || 0;
          
          if ((tempInvoiceItem as any).inventoryId) {
            const maxQty = (tempInvoiceItem as any).maxQuantity || 0;
            setTempInvoiceItem({
              ...tempInvoiceItem,
              quantity: Math.min(Math.max(0, newValue), maxQty)
            });
          } else {
            setTempInvoiceItem({...tempInvoiceItem, quantity: Math.max(0, newValue)});
          }
        }}
        min="1"
        max={(tempInvoiceItem as any).maxQuantity}
        className="w-full p-2 border-y border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 text-center font-bold text-gray-900 dark:text-gray-100 appearance-none focus:outline-none focus:ring-1 focus:ring-blue-500 text-base"
        aria-label="Quantity"
      />
      <button
        type="button"
        onClick={() => {
          const newQty = tempInvoiceItem.quantity + 1;
          // Check if it's an inventory item and enforce max quantity
          if ((tempInvoiceItem as any).inventoryId && (tempInvoiceItem as any).maxQuantity) {
            if (newQty <= (tempInvoiceItem as any).maxQuantity) {
              setTempInvoiceItem({...tempInvoiceItem, quantity: newQty});
            }
          } else {
            setTempInvoiceItem({...tempInvoiceItem, quantity: newQty});
          }
        }}
        className={`px-2.5 py-1.5 bg-${currentTheme.background} border border-${currentTheme.border} border-l-0 text-${currentTheme.text} hover:bg-${currentTheme.border}/30 active:bg-${currentTheme.border}/50 transition-colors duration-200 ${
          (tempInvoiceItem as any).inventoryId && tempInvoiceItem.quantity >= (tempInvoiceItem as any).maxQuantity 
            ? 'opacity-50 cursor-not-allowed' : ''
        }`}
        disabled={(tempInvoiceItem as any).inventoryId && tempInvoiceItem.quantity >= (tempInvoiceItem as any).maxQuantity}
        aria-label="Increase quantity"
      >
        <FaPlus className="h-3 w-3" />
      </button>
    </div>
    {(tempInvoiceItem as any).inventoryId && (
      <div className="flex items-center mt-1">
        {tempInvoiceItem.quantity >= (tempInvoiceItem as any).maxQuantity ? (
          <p className="text-xs text-amber-500 flex items-center">
            <FaExclamationTriangle className="mr-1 h-3 w-3" /> Max stock reached
          </p>
        ) : (tempInvoiceItem as any).maxQuantity - tempInvoiceItem.quantity < 5 ? (
          <p className="text-xs text-blue-500">
            {(tempInvoiceItem as any).maxQuantity - tempInvoiceItem.quantity} more available
          </p>
        ) : null}
      </div>
    )}
  </div>
  <div>
    <label className="block text-xs font-medium text-gray-400 mb-1 flex items-center justify-between">
      <span>Price</span>
      {(tempInvoiceItem as any).inventoryId && (
        <span className="text-xs text-gray-400">Set by inventory</span>
      )}
    </label>
    <div className="relative">
      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <span className={`text-gray-500 font-medium`}>{selectedCurrency.symbol}</span>
      </div>
      <input
        type="text"
        inputMode="decimal"
        placeholder="0.00"
        value={tempInvoiceItem.price || ''}
        onChange={(e) => {
          // Allow only numbers and a single decimal point
          const value = e.target.value.replace(/[^\d.]/g, '');
          const decimalCount = (value.match(/\./g) || []).length;
          
          if (decimalCount <= 1) {
            const price = parseFloat(value) || 0;
            setTempInvoiceItem({...tempInvoiceItem, price});
          }
        }}
        min="0"
        step="0.01"
        className={`w-full pl-7 p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm ${
          (tempInvoiceItem as any).inventoryId ? 'opacity-75 cursor-not-allowed' : ''
        }`}
        aria-label="Price"
        readOnly={(tempInvoiceItem as any).inventoryId ? true : false}
        disabled={(tempInvoiceItem as any).inventoryId ? true : false}
      />
    </div>
    {(tempInvoiceItem as any).inventoryId && (
      <p className="text-xs text-gray-400 mt-1">
        Price automatically set from inventory item
      </p>
    )}
  </div>
</div>
    
    {/* Improved add item button */}
    <div className="text-right">
      <button
        type="button"
        onClick={() => {
          // Additional validation for inventory items
          if ((tempInvoiceItem as any).inventoryId) {
            // Check if this inventory item is already in the invoice
            const existingItemIndex = invoiceFormData.items.findIndex(
              item => (item as any).inventoryId === (tempInvoiceItem as any).inventoryId
            );
            
            if (existingItemIndex >= 0) {
              // Calculate total quantity including existing items
              const existingQty = invoiceFormData.items[existingItemIndex].quantity || 0;
              const totalQty = existingQty + tempInvoiceItem.quantity;
              
              // Check if total exceeds available inventory
              if (totalQty > (tempInvoiceItem as any).maxQuantity) {
                toast.error(`Cannot add more than ${(tempInvoiceItem as any).maxQuantity} units of this item`);
                return;
              }
            }
          }
          
          // Proceed with adding the item
          addInvoiceItem();
        }}
        disabled={!tempInvoiceItem.name || !tempInvoiceItem.quantity || !tempInvoiceItem.price}
        className={`px-4 py-2 ${
          !tempInvoiceItem.name || !tempInvoiceItem.quantity || !tempInvoiceItem.price
            ? `bg-${currentTheme.primary}/50 cursor-not-allowed`
            : `bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 cursor-pointer`
        } text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 text-sm`}
      >
        <span className="flex items-center">
          <FaPlus className="mr-2" size={12} /> 
          Add Item
        </span>
      </button>
    </div>
  </div>
  
  {/* Item list - Enhanced with inventory indicators */}
  <div className={`bg-${currentTheme.background} rounded-lg border border-${currentTheme.border} overflow-hidden`}>
    {invoiceFormData.items.length > 0 ? (
      <table className="min-w-full divide-y divide-gray-700">
        <thead>
          <tr>
            <th className="px-3 py-2 text-left text-xs font-medium text-gray-400">Item</th>
            <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Quantity</th>
            <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Price</th>
            <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Total</th>
            <th className="px-3 py-2 text-center text-xs font-medium text-gray-400">Action</th>
          </tr>
        </thead>
        <tbody className={`divide-y divide-${currentTheme.border}`}>
          {invoiceFormData.items.map((item, index) => (
            <motion.tr
              key={index}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.2 }}
            >
              <td className={`px-3 py-2 text-sm text-${currentTheme.text}`}>
                <div className="flex flex-col">
                  <span>{item.name}</span>
                  {(item as any).inventoryId && (
                    <span className="inline-flex items-center mt-1 px-1.5 py-0.5 rounded-full text-xs bg-blue-100 text-blue-800 border border-blue-200">
                      <FaBox className="mr-1" size={8} />
                      Inventory
                    </span>
                  )}
                </div>
              </td>
              <td className="px-3 py-2 text-right text-sm">
                {(item as any).inventoryId ? (
                  <span className="bg-blue-50 text-blue-700 border border-blue-200 px-1.5 py-0.5 rounded">
                    {item.quantity}
                  </span>
                ) : (
                  <span className="text-gray-400">{item.quantity}</span>
                )}
              </td>
              <td className="px-3 py-2 text-right text-sm text-gray-400">
                {formatCurrency(item.price)}
              </td>
              <td className="px-3 py-2 text-right text-sm text-green-500">
                {formatCurrency(item.price * item.quantity)}
              </td>
              <td className="px-3 py-2 text-center">
                <button
                  type="button"
                  onClick={() => removeInvoiceItem(index)}
                  className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 p-1`}
                  title="Remove item"
                >
                  <FaTrash size={14} />
                </button>
              </td>
            </motion.tr>
          ))}
          <tr className={`border-t-2 border-${currentTheme.primary}/30`}>
            <td colSpan={3} className={`px-3 py-2 text-right font-medium text-${currentTheme.text}`}>
              Total
            </td>
            <td className={`px-3 py-2 text-right font-bold text-${currentTheme.success}`}>
              {formatCurrency(invoiceFormData.totalAmount)}
            </td>
            <td></td>
          </tr>
        </tbody>
      </table>
    ) : (
      <div className="p-4 text-center text-gray-400">
        No items added to this invoice yet
      </div>
    )}
  </div>
</div>

                  {/* Notes */}
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Notes</label>
                    <textarea
                      name="notes"
                      value={invoiceFormData.notes}
                      onChange={handleInvoiceFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      rows={3}
                      placeholder="Additional notes for the invoice"
                    />
                  </div>

                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    <button
                      type="button"
                      onClick={() => {
                        setShowInvoiceModal(false);
                        setEditingInvoice(null);
                      }}
                      className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaPlus className="mr-2 h-4 w-4" />
                      {editingInvoice ? 'Update Invoice' : 'Create Invoice'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      <AnimatePresence>
  {showEmployeeModal && (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.2 }}
      className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50 p-4"
      onClick={() => {
        setShowEmployeeModal(false);
        setEditingEmployee(null);
      }}
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        transition={{ type: "spring", damping: 25, stiffness: 300 }}
        className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-lg border border-${currentTheme.border} max-h-[90vh] overflow-y-auto`}
        onClick={(e) => e.stopPropagation()}
      >
        <div className={`flex justify-between items-center sticky top-0 px-6 py-4 border-b border-${currentTheme.border} bg-${currentTheme.cardBackground} z-10`}>
          <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
            <FaUserTie className={`mr-2 text-${currentTheme.accent}`} />
            {editingEmployee ? 'Edit Employee' : 'Add New Employee'}
          </h3>
          <button
            onClick={() => {
              setShowEmployeeModal(false);
              setEditingEmployee(null);
            }}
            className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
            aria-label="Close modal"
          >
            <FaTimes />
          </button>
        </div>

        <div className="px-6 py-5">
          <form onSubmit={(e) => {
            e.preventDefault();
            editingEmployee ? updateEmployee() : addEmployee();
          }}>
            {/* Basic Information Section */}
            <div className="mb-5">
              <h4 className={`text-sm uppercase tracking-wider text-${currentTheme.accent} font-medium mb-3 flex items-center`}>
                <FaIdCard className="mr-2" size={14} />
                Basic Information
              </h4>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Full Name *
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={employeeFormData.name}
                    onChange={handleEmployeeFormChange}
                    className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    placeholder="Enter employee name"
                    required
                  />
                </div>
                
                <div>
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Position *
                  </label>
                  <input
                    type="text"
                    name="position"
                    value={employeeFormData.position}
                    onChange={handleEmployeeFormChange}
                    className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    placeholder="Job title"
                    required
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Department
                  </label>
                  <input
                    type="text"
                    name="department"
                    value={employeeFormData.department}
                    onChange={handleEmployeeFormChange}
                    className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    placeholder="Department name"
                  />
                </div>
                
                <div>
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Hire Date *
                  </label>
                  <input
                    title="Hire date"
                    type="date"
                    name="hireDate"
                    value={employeeFormData.hireDate}
                    onChange={handleEmployeeFormChange}
                    className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    required
                  />
                </div>
              </div>
            </div>
            
            {/* Contact Information Section */}
            <div className="mb-5">
              <h4 className={`text-sm uppercase tracking-wider text-${currentTheme.accent} font-medium mb-3 flex items-center`}>
                <FaAddressBook className="mr-2" size={14} />
                Contact Information
              </h4>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Email Address
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FaEnvelope className="text-gray-400 w-4 h-4" />
                    </div>
                    <input
                      type="email"
                      name="email"
                      value={employeeFormData.email}
                      onChange={handleEmployeeFormChange}
                      className={`w-full pl-10 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="email@example.com"
                    />
                  </div>
                </div>
                
                <div>
                  <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                    Phone Number
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FaPhone className="text-gray-400 w-4 h-4" />
                    </div>
                    <input
                      type="tel"
                      name="phone"
                      value={employeeFormData.phone}
                      onChange={handleEmployeeFormChange}
                      className={`w-full pl-10 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="+1 (555) 123-4567"
                    />
                  </div>
                </div>
              </div>
              
              <div>
                <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                  Address
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FaMapMarkerAlt className="text-gray-400 w-4 h-4" />
                  </div>
                  <input
                    type="text"
                    name="address"
                    value={employeeFormData.address}
                    onChange={handleEmployeeFormChange}
                    className={`w-full pl-10 p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    placeholder="123 Main St, City, Country"
                  />
                </div>
              </div>
            </div>
            
            {/* Additional Notes */}
            <div className="mb-5">
              <label className={`block text-sm font-medium text-${currentTheme.text} mb-1 flex items-center`}>
                <FaStickyNote className="mr-2" size={14} />
                Additional Notes
              </label>
              <textarea
                name="notes"
                value={employeeFormData.notes}
                onChange={handleEmployeeFormChange}
                className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                rows={3}
                placeholder="Any additional information about this employee..."
              />
            </div>
            
            <div className={`flex flex-col sm:flex-row sm:justify-end space-y-2 sm:space-y-0 sm:space-x-3 mt-6 pt-4 border-t border-${currentTheme.border}`}>
              <button
                type="button"
                onClick={() => {
                  setShowEmployeeModal(false);
                  setEditingEmployee(null);
                }}
                className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm w-full sm:w-auto`}
              >
                Cancel
              </button>
              <button
                type="submit"
                className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center justify-center text-sm w-full sm:w-auto`}
              >
                <FaUserPlus className="mr-2 h-4 w-4" />
                {editingEmployee ? 'Update Employee' : 'Save Employee'}
              </button>
            </div>
            
            <div className="text-center text-xs text-gray-400 mt-4">
              <p>Fields marked with * are required</p>
            </div>
          </form>
        </div>
      </motion.div>
    </motion.div>
  )}
</AnimatePresence>

      {/* Add this animation for saved notification */}
      <AnimatePresence>
        {isSaving && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className={`fixed bottom-4 right-4 bg-${currentTheme.success} text-${currentTheme.buttonText} px-4 py-2 rounded-lg shadow-lg flex items-center`}
          >
            <FaSave className="mr-2 animate-pulse" />
            Data saved successfully
          </motion.div>
        )}
      </AnimatePresence>

      {/* Animate theme switch */}
      <AnimatePresence>
        {/* {showThemeSelector && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: -10 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: -10 }}
            transition={{ duration: 0.2 }}
            className={`absolute right-0 mt-2 w-48 bg-${currentTheme.cardBackground} rounded-md shadow-lg z-10 py-1 border border-${currentTheme.border} overflow-hidden`}
          >
            {themes.map((theme) => (
              <button
                key={theme.id}
                className={`flex items-center justify-between w-full text-left px-4 py-3 text-sm hover:bg-${theme.background} transition-colors duration-150 ${
                  theme.id === currentTheme.id ? `bg-${theme.background} text-${theme.accent}` : `text-${theme.text}`
                }`}
                onClick={() => {
                  setCurrentTheme(theme);
                  setShowThemeSelector(false);
                  // Trigger save to persist theme choice
                  setTimeout(() => saveToLocalStorage(), 100);
                }}
              >
                <span>{theme.name}</span>
                <span className={`h-4 w-4 rounded-full bg-${theme.primary}`}></span>
              </button>
            ))}
          </motion.div>
        )} */}
      </AnimatePresence>

      {/* Receipt Preview Modal */}
<AnimatePresence>
  {showReceiptPreview && viewingReceipt && (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.2 }}
      className="fixed inset-0 bg-black/80 backdrop-blur-md flex items-center justify-center z-50 p-4"
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        transition={{ type: "spring", damping: 25, stiffness: 300 }}
        className={`bg-${currentTheme.cardBackground} rounded-xl shadow-2xl w-full max-w-lg border border-${currentTheme.border} overflow-hidden`}
        onClick={(e) => e.stopPropagation()}
      >
        <div className={`flex justify-between items-center px-6 py-4 bg-${currentTheme.background} border-b border-${currentTheme.border}`}>
          <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
            {viewingReceipt.type === "expense" ? (
              <FaFileInvoice className={`mr-2 text-${currentTheme.danger}`} />
            ) : (
              <FaFileInvoiceDollar className={`mr-2 text-${currentTheme.success}`} />
            )}
            {viewingReceipt.type === "expense" ? "Expense Receipt" : "Sales Receipt"}
          </h3>
          <div className="flex items-center space-x-3">
            <button
              onClick={generateReceiptImage}
              disabled={isLoading}
              className={`p-2 rounded-full bg-${currentTheme.primary}/20 text-${currentTheme.primary} hover:bg-${currentTheme.primary}/30 transition-colors duration-200 group relative`}
              title="Download receipt"
            >
              {isLoading ? <FaSync className="animate-spin" /> : <FaDownload />}
              <span className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">Download</span>
            </button>
            {/* <button
              onClick={() => {
                // Optional: Add functionality to share receipt
                alert("Share functionality would go here");
              }}
              className={`p-2 rounded-full bg-${currentTheme.accent}/20 text-${currentTheme.accent} hover:bg-${currentTheme.accent}/30 transition-colors duration-200 group relative`}
              title="Share receipt"
            >
              <FaShare className="h-4 w-4" />
              <span className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">Share</span>
            </button> */}
            <button
              onClick={() => setShowReceiptPreview(false)}
              className={`p-2 rounded-full bg-${currentTheme.background}/50 text-gray-400 hover:bg-${currentTheme.background} transition-colors duration-200 group relative`}
              title="Close"
            >
              <FaTimes />
              <span className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs py-1 px-2 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">Close</span>
            </button>
          </div>
        </div>

        <div className="px-6 py-5 overflow-y-auto max-h-[70vh]">
          {/* Receipt card design - this will be captured to image */}
          <div
            ref={cardRef}
            className={`bg-white text-gray-800 p-6 rounded-lg shadow-xl ${
              viewingReceipt.type === "expense" 
                ? "border-t-8 border-t-rose-500" 
                : "border-t-8 border-t-emerald-500"
            }`}
            style={{ fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif" }}
          >
            {/* Business header section with logo option */}
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-xl font-bold text-gray-800" style={{ fontFamily: "Arial, sans-serif" }}>{businessInfo.name}</h2>
                <p className="text-sm text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>
                  {viewingReceipt.type === "expense" ? "Expense Receipt" : "Official Receipt"}
                </p>
              </div>
              {/* Optional: Business logo could be added here */}
              <div className="h-16 w-16 bg-gray-100 rounded-md flex items-center justify-center">
                <FaStore className="text-gray-400 text-2xl" />
              </div>
            </div>
            
            {/* Business contact info bar */}
            <div className="bg-gray-50 rounded-md p-3 mb-6 text-xs text-gray-500 flex flex-wrap justify-between">
              {businessInfo.address && (
                <div className="flex items-center mr-4 mb-1">
                  <FaMapMarkerAlt className="mr-1 text-gray-400" />
                  <span style={{ fontFamily: "Arial, sans-serif" }}>{businessInfo.address}</span>
                </div>
              )}
              {businessInfo.phone && (
                <div className="flex items-center mr-4 mb-1">
                  <FaPhone className="mr-1 text-gray-400" />
                  <span style={{ fontFamily: "Arial, sans-serif" }}>{businessInfo.phone}</span>
                </div>
              )}
              {businessInfo.email && (
                <div className="flex items-center mb-1">
                  <FaEnvelope className="mr-1 text-gray-400" />
                  <span style={{ fontFamily: "Arial, sans-serif" }}>{businessInfo.email}</span>
                </div>
              )}
            </div>
            
            {/* Receipt header with badge and receipt number */}
            <div className="flex flex-wrap items-center justify-between mb-6">
              <div className="flex items-center">
                <span 
                  className={`inline-block rounded-full px-3 py-1 text-xs font-bold uppercase tracking-wide ${
                    viewingReceipt.type === "income" 
                      ? "bg-emerald-100 text-emerald-700 ring-1 ring-emerald-200" 
                      : "bg-rose-100 text-rose-700 ring-1 ring-rose-200"
                  }`}
                  style={{ fontFamily: "Arial, sans-serif" }}
                >
                  {viewingReceipt.type === "income" ? "INCOME" : "EXPENSE"}
                </span>
                <span className="ml-2 text-gray-400 text-sm" style={{ fontFamily: "Arial, sans-serif" }}>
                  Receipt #{viewingReceipt.id.slice(-8).toUpperCase()}
                </span>
              </div>
              <div className="text-right mt-2 sm:mt-0">
                <p className="text-xs text-gray-400" style={{ fontFamily: "Arial, sans-serif" }}>Date Issued</p>
                <p className="text-sm font-medium" style={{ fontFamily: "Arial, sans-serif" }}>
                  {new Intl.DateTimeFormat('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  }).format(new Date(viewingReceipt.date))}
                </p>
              </div>
            </div>

            {/* Customer/Vendor details */}
            <div className="border border-gray-200 rounded-lg p-4 mb-6 bg-gray-50">
              <div className="flex items-center mb-2">
                {viewingReceipt.type === "income" ? (
                  <FaUser className="mr-2 text-emerald-500" />
                ) : (
                  <FaStore className="mr-2 text-rose-500" />
                )}
                <h3 className="font-bold text-gray-700" style={{ fontFamily: "Arial, sans-serif" }}>
                  {viewingReceipt.type === "income" ? "Customer Details" : "Vendor/Payee Details"}
                </h3>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <div>
                  <p className="font-medium text-sm text-gray-700" style={{ fontFamily: "Arial, sans-serif" }}>
                    {viewingReceipt.customerName || "Not specified"}
                  </p>
                  <p className="text-xs text-gray-500 mt-1" style={{ fontFamily: "Arial, sans-serif" }}>
                    ID: {viewingReceipt.customerId || "N/A"}
                  </p>
                </div>
                {(() => {
                  const customer = customers.find(c => c.id === viewingReceipt.customerId);
                  if (customer) {
                    return (
                      <div className="text-xs text-gray-500">
                        <div className="flex items-center mb-1">
                          {customer.phone && (
                            <>
                              <FaPhone className="mr-1" />
                              <span style={{ fontFamily: "Arial, sans-serif" }}>{customer.phone}</span>
                            </>
                          )}
                        </div>
                        <div className="flex items-center">
                          {customer.email && (
                            <>
                              <FaEnvelope className="mr-1" />
                              <span style={{ fontFamily: "Arial, sans-serif" }}>{customer.email}</span>
                            </>
                          )}
                        </div>
                      </div>
                    );
                  }
                  return null;
                })()}
              </div>
            </div>
            
            {/* Description */}
            <div className="mb-6">
              <div className="flex items-center mb-2">
                <FaFileAlt className="mr-2 text-gray-400" />
                <h3 className="font-bold text-gray-700" style={{ fontFamily: "Arial, sans-serif" }}>Description</h3>
              </div>
              <div className="bg-gray-50 p-3 border border-gray-200 rounded-lg">
                <p className="text-sm text-gray-700" style={{ fontFamily: "Arial, sans-serif" }}>
                  {viewingReceipt.description || "No description provided"}
                </p>
              </div>
            </div>
            
            {/* Items purchased - with improved styling */}
            {viewingReceipt.items.length > 0 ? (
              <div className="mb-6">
                <div className="flex items-center mb-2">
                  <FaShoppingCart className="mr-2 text-gray-400" />
                  <h3 className="font-bold text-gray-700" style={{ fontFamily: "Arial, sans-serif" }}>Items</h3>
                </div>
                <div className="border border-gray-200 rounded-lg overflow-hidden">
                  <table className="w-full text-sm">
                    <thead className="bg-gray-50 text-xs uppercase">
                      <tr>
                        <th className="text-left py-2 px-3" style={{ fontFamily: "Arial, sans-serif" }}>Item</th>
                        <th className="text-center py-2 px-3" style={{ fontFamily: "Arial, sans-serif" }}>Qty</th>
                        <th className="text-right py-2 px-3" style={{ fontFamily: "Arial, sans-serif" }}>Price</th>
                        <th className="text-right py-2 px-3" style={{ fontFamily: "Arial, sans-serif" }}>Total</th>
                      </tr>
                    </thead>
                    <tbody>
                      {viewingReceipt.items.map((item, index) => (
                        <tr key={index} className={index % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                          <td className="py-3 px-3" style={{ fontFamily: "Arial, sans-serif" }}>{item.name}</td>
                          <td className="py-3 px-3 text-center" style={{ fontFamily: "Arial, sans-serif" }}>{item.quantity}</td>
                          <td className="py-3 px-3 text-right" style={{ fontFamily: "Arial, sans-serif" }}>{selectedCurrency.symbol}{item.price.toFixed(2)}</td>
                          <td className="py-3 px-3 text-right font-medium" style={{ fontFamily: "Arial, sans-serif" }}>
                            {selectedCurrency.symbol}{(item.quantity * item.price).toFixed(2)}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            ) : null}
            
            {/* Total section - more detailed */}
            <div className="border border-gray-200 rounded-lg p-4 mb-6 bg-gray-50">
              <table className="w-full">
                <tbody className="divide-y divide-gray-200">
                  <tr>
                    <td className="py-2 text-sm text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>Subtotal:</td>
                    <td className="py-2 text-sm text-right" style={{ fontFamily: "Arial, sans-serif" }}>
                      {formatCurrency(viewingReceipt.totalAmount)}
                    </td>
                  </tr>
                  <tr>
                    <td className="py-2 text-sm text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>Tax (0%):</td>
                    <td className="py-2 text-sm text-right" style={{ fontFamily: "Arial, sans-serif" }}>
                      {formatCurrency(0)}
                    </td>
                  </tr>
                  <tr>
                    <td className="py-2 text-sm text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>Discount:</td>
                    <td className="py-2 text-sm text-right" style={{ fontFamily: "Arial, sans-serif" }}>
                      {formatCurrency(0)}
                    </td>
                  </tr>
                  <tr>
                    <td className="py-3 font-bold" style={{ fontFamily: "Arial, sans-serif" }}>Total:</td>
                    <td className={`py-3 text-right font-bold ${viewingReceipt.type === "expense" ? "text-rose-600" : "text-emerald-600"}`} style={{ fontFamily: "Arial, sans-serif" }}>
                      {formatCurrency(viewingReceipt.totalAmount)}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            
            {/* Payment status section (new) */}
            <div className="mb-6 flex justify-center">
              <div className={`inline-flex items-center ${
                viewingReceipt.type === "income" ? "bg-emerald-100 text-emerald-700" : "bg-amber-100 text-amber-700"
              } rounded-full px-4 py-1`}>
                <div className={`h-3 w-3 rounded-full mr-2 ${
                  viewingReceipt.type === "income" ? "bg-emerald-500" : "bg-amber-500"
                }`}></div>
                <span className="text-sm font-medium" style={{ fontFamily: "Arial, sans-serif" }}>
                  {viewingReceipt.type === "income" ? "Payment Received" : "Payment Made"}
                </span>
              </div>
            </div>
            
            {/* Footer with barcode */}
            <div className="text-center border-t border-gray-200 pt-6 mt-6">
              {/* Receipt QR Code */}
              {/* Receipt Barcode - real scannable barcode */}
              <div className="flex justify-center mb-4">
                <div className="flex flex-col items-center">
                  <div className="relative bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                    {/* Real scannable barcode */}
                    <Barcode 
                      value={viewingReceipt.id.slice(-8).toUpperCase()}
                      width={1.5}
                      height={50}
                      format="CODE128"
                      displayValue={true}
                      font="Arial"
                      fontSize={12}
                      textAlign="center"
                      textPosition="bottom"
                      textMargin={6}
                      background="#FFFFFF"
                      lineColor="#000000"
                    />
                  </div>
                  
                  {/* Barcode caption */}
                  <div className="mt-2 text-center">
                    <p className="text-xs font-medium text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>
                      Scan to verify receipt
                    </p>
                    {/* <p className="text-xs text-gray-500" style={{ fontFamily: "Arial, sans-serif" }}>
                      Receipt #{viewingReceipt.id.slice(-8).toUpperCase()}
                    </p> */}
                  </div>
                </div>
              </div>
              
              <p className="text-sm font-medium text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>
                {viewingReceipt.type === "income" 
                  ? "Thank you for your business!" 
                  : "This expense has been recorded in our system."}
              </p>
              <p className="text-xs text-gray-400 mt-2" style={{ fontFamily: "Arial, sans-serif" }}>
                Receipt generated on {new Date().toLocaleDateString()} at {new Date().toLocaleTimeString()}
              </p>
              <p className="text-xs text-gray-400 mt-1" style={{ fontFamily: "Arial, sans-serif" }}>
                Powered by BookKeep Pro
              </p>
            </div>
          </div>

          {/* Actions toolbar below the receipt */}
          <div className="flex md:flex-col justify-center gap-2 mt-6">
            <button
              onClick={generateReceiptImage}
              disabled={isLoading}
              className={`flex items-center px-4 py-2 bg-${currentTheme.primary} text-white rounded-md hover:bg-${currentTheme.primary}/80 transition-colors duration-200 shadow-md`}
            >
              {isLoading ? (
                <>
                  <FaSync className="animate-spin mr-2" /> Generating...
                </>
              ) : (
                <>
                  <FaDownload className="mr-2" /> Download PNG
                </>
              )}
            </button>
            
            <button
              onClick={() => {
                // Optional: Print functionality
                window.print();
              }}
              className={`flex items-center px-4 py-2 bg-${currentTheme.background} text-${currentTheme.text} border border-${currentTheme.border} rounded-md hover:bg-${currentTheme.border}/20 transition-colors duration-200`}
            >
              <FaPrint className="mr-2" /> Print Receipt
            </button>
            
            {/* <button
              onClick={() => {
                // Optional: Send receipt via email
                alert("Email functionality would go here");
              }}
              className={`flex items-center px-4 py-2 bg-${currentTheme.accent}/10 text-${currentTheme.accent} border border-${currentTheme.accent}/20 rounded-md hover:bg-${currentTheme.accent}/20 transition-colors duration-200`}
            >
              <FaEnvelope className="mr-2" /> Email Receipt
            </button> */}
          </div>
        </div>
      </motion.div>
    </motion.div>
  )}
</AnimatePresence>

      {/* Business Onboarding Modal */}
      <AnimatePresence>
        {showBusinessOnboarding && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border}`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <FaStore className={`mr-2 text-${currentTheme.accent}`} />
                  {businessInfo.name ? 'Update Business Info' : 'Welcome to BookKeep Pro!'}
                </h3>
                {businessInfo.name && (
                  <button 
                    onClick={() => setShowBusinessOnboarding(false)}
                    className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                  >
                    <FaTimes />
                  </button>
                )}
              </div>
              
              <div className="px-6 py-4">
                {!businessInfo.name && (
                  <p className={`mb-4 text-${currentTheme.text}`}>
                    Let's personalize your bookkeeping system. Please provide information about your business:
                  </p>
                )}
                
                <form onSubmit={(e) => { 
                  e.preventDefault(); 
                  completeBusinessOnboarding();
                }}>
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Business Name *</label>
                    <input 
                      type="text" 
                      name="name"
                      value={businessFormData.name}
                      onChange={handleBusinessFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                      placeholder="Enter your business name"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Business Type *</label>
                    <select 
                      name="type"
                      title="Business Type"
                      value={businessFormData.type}
                      onChange={handleBusinessFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                    >
                      {businessTypes.map(type => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </select>
                  </div>
                  
                  {/* Currency Selection */}
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                      Base Currency *
                      <span className="ml-1 text-xs text-gray-400">(Your primary currency for bookkeeping)</span>
                    </label>
                    <select 
                      name="baseCurrency"
                      title="Base Currency"
                      value={businessFormData.baseCurrency || ""}
                      onChange={handleBusinessFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                    >
                      <option value="" disabled>Select your base currency</option>
                      {currencies.map(currency => (
                        <option key={currency.code} value={currency.code}>
                          {currency.symbol} {currency.code} - {currency.name}
                        </option>
                      ))}
                    </select>
                    <p className="mt-1 text-xs text-gray-400">
                      This will be your default currency. All reports and calculations will use this as the base.
                    </p>
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Business Address</label>
                    <input 
                      type="text" 
                      name="address"
                      value={businessFormData.address}
                      onChange={handleBusinessFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="Optional: Enter your business address"
                    />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div className="mb-4">
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Phone Number</label>
                      <input 
                        type="tel" 
                        name="phone"
                        value={businessFormData.phone}
                        onChange={handleBusinessFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        placeholder="Optional: Phone number"
                      />
                    </div>
                    
                    <div className="mb-4">
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Email Address</label>
                      <input 
                        type="email" 
                        name="email"
                        value={businessFormData.email}
                        onChange={handleBusinessFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        placeholder="Optional: Email address"
                      />
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Year Established</label>
                    <input 
                      type="text" 
                      name="established"
                      value={businessFormData.established}
                      onChange={handleBusinessFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="Optional: Year established"
                      pattern="[0-9]*"
                    />
                  </div>
                  
                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    {businessInfo.name && (
                      <button 
                        type="button"
                        onClick={() => setShowBusinessOnboarding(false)}
                        className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                      >
                        Cancel
                      </button>
                    )}
                    <button 
                      type="submit"
                      className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaSave className="mr-2 h-4 w-4" /> 
                      {businessInfo.name ? 'Update Business Info' : 'Get Started'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}