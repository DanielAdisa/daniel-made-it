"use client";

import { useState, useEffect, useRef } from "react";
import { FaBook, FaBoxOpen, FaChartLine, FaHome, FaPlus, FaSearch, FaTimes, FaDollarSign, 
  FaChevronDown, FaDownload, FaUpload, FaSync, FaSave, FaUser, FaUsers, FaUserPlus, FaEye, FaPrint, FaInfoCircle, FaFileExcel } from "react-icons/fa";
import { motion, AnimatePresence } from "framer-motion";
import { v4 as uuidv4 } from 'uuid'; 
import { toPng, toJpeg } from 'html-to-image';

// Define TypeScript interfaces for our data models
interface InventoryItem {
  id: string;
  name: string;
  category: string;
  quantity: number;
  costPrice: number;
  sellingPrice: number;
  lastRestocked: Date;
  sku: string;
}

interface Transaction {
  id: string;
  date: Date;
  description: string;
  type: "income" | "expense";
  category: string;
  amount: number;
  relatedInventoryId?: string;
  customerId?: string; // Associate transaction with customer
}

// Modify Receipt interface to include a linked transaction id
interface Receipt {
  id: string;
  date: Date;
  customerId: string;
  customerName: string;
  items: { id: string; name: string; quantity: number; price: number }[];
  totalAmount: number;
  transactionId?: string; // Add this to link to transactions
  type: "income" | "expense"; // Add transaction type to distinguish between income and expense receipts
  description?: string; // Add description field for expense receipts that don't have items
  isAutoGenerated?: boolean; // Flag to track if this was auto-generated from transaction
}

// Add Customer interface
interface Customer {
  id: string;
  name: string;
  email: string;
  phone: string;
  address: string;
  notes: string;
  createdAt: Date;
  totalPurchases: number;
}

// Form state interfaces
interface InventoryFormData {
  name: string;
  category: string;
  quantity: number;
  costPrice: number;
  sellingPrice: number;
  sku: string;
}

// Update TransactionFormData to include optional customer association
interface TransactionFormData {
  description: string;
  type: "income" | "expense";
  category: string;
  amount: number;
  date: string;
  relatedInventoryId?: string;
  customerId?: string; // Associate transaction with customer
}

// Update ReceiptFormData to include customerId selection
interface ReceiptFormData {
  date: string;
  customerId?: string;
  customerName: string;
  items: { id: string; name: string; quantity: number; price: number }[];
  totalAmount: number;
  isNewCustomer: boolean; // Track if we're creating a new customer
  newCustomerData?: {
    email: string;
    phone: string;
    address: string;
    notes: string;
  };
}

// Add Customer form data interface
interface CustomerFormData {
  name: string;
  email: string;
  phone: string;
  address: string;
  notes: string;
}

// Currency interface
interface Currency {
  code: string;
  symbol: string;
  name: string;
  rate?: number;
}

// Add interface for app data
interface AppData {
  inventory: InventoryItem[];
  transactions: Transaction[];
  receipts: Receipt[];
  customers: Customer[]; // Add customers to AppData
  lastUpdated: string;
  version: string;
  selectedCurrency: string;
  selectedTheme: string; // Add this to save theme preference
  categories: Category[]; // Add categories to AppData
}

// First, let's add a Theme interface and available themes
interface Theme {
  id: string;
  name: string;
  primary: string;
  secondary: string;
  accent: string;
  background: string;
  cardBackground: string;
  text: string;
  border: string;
  buttonText: string;
  success: string;
  danger: string;
  warning: string;
}

// Add Category interface to the existing interfaces section
interface Category {
  id: string;
  name: string;
  description: string;
  type: "inventory" | "transaction" | "both"; // categorize by usage type
  color: string; // For visual distinction
}

// Add exchange rates after the Currency interface
const exchangeRates = {
  USD: 1, // Base currency
  NGN: 1515, 
  EUR: 0.92, 
  GBP: 0.78,
  GHS: 15.54,
  JPY: 151.05,
  INR: 83.42,
};

// Add conversion function
// Add conversion function
const convertCurrency = (usdPrice: number, rate: number): string => (usdPrice * rate).toFixed(2);

// Add this utility function to convert data to CSV format
const convertToCSV = (data: any[], headers: string[]): string => {
  // Create header row
  let csvContent = headers.join(',') + '\n';
  
  // Add data rows
  data.forEach(item => {
    const row = headers.map(header => {
      // Get property value from the data item
      const fieldValue = header.split('.').reduce((obj, key) => 
        obj && obj[key] !== undefined ? obj[key] : '', item);
      
      // Format date objects
      if (fieldValue instanceof Date) {
        return `"${fieldValue.toLocaleDateString()}"`;
      }
      
      // Format strings with commas or quotes
      if (typeof fieldValue === 'string' && (fieldValue.includes(',') || fieldValue.includes('"'))) {
        return `"${fieldValue.replace(/"/g, '""')}"`;
      }
      
      return fieldValue;
    });
    
    csvContent += row.join(',') + '\n';
  });
  
  return csvContent;
};

// Main component
export default function BookKeepingSystem() {
  // Update the activeTab state to include customers
  const [activeTab, setActiveTab] = useState<"dashboard" | "inventory" | "transactions" | "receipts" | "categories" | "customers">("dashboard");
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  
  // Currency state
  const [currencies] = useState<Currency[]>([
    { code: "USD", symbol: "$", name: "US Dollar", rate: exchangeRates.USD },
    { code: "EUR", symbol: "€", name: "Euro", rate: exchangeRates.EUR },
    { code: "GBP", symbol: "£", name: "British Pound", rate: exchangeRates.GBP },
    { code: "JPY", symbol: "¥", name: "Japanese Yen", rate: exchangeRates.JPY },
    { code: "NGN", symbol: "₦", name: "Nigerian Naira", rate: exchangeRates.NGN },
    { code: "INR", symbol: "₹", name: "Indian Rupee", rate: exchangeRates.INR },
    { code: "GHS", symbol: "₵", name: "Ghanaian Cedi", rate: exchangeRates.GHS },
  ]);
  const [selectedCurrency, setSelectedCurrency] = useState<Currency>(currencies[0]);
  const [showCurrencyDropdown, setShowCurrencyDropdown] = useState(false);
  const [showUsdPrices, setShowUsdPrices] = useState<boolean>(true);
  
  // Modal states
  const [showInventoryModal, setShowInventoryModal] = useState(false);
  const [showTransactionModal, setShowTransactionModal] = useState(false);
  
  // Edit states - add these for tracking the item being edited
  const [editingInventoryItem, setEditingInventoryItem] = useState<InventoryItem | null>(null);
  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);

  // New state for receipts
  const [receipts, setReceipts] = useState<Receipt[]>([]);
  const [showReceiptModal, setShowReceiptModal] = useState(false);
  const [editingReceipt, setEditingReceipt] = useState<Receipt | null>(null);

  // Add customers state
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [filteredCustomers, setFilteredCustomers] = useState<Customer[]>([]);

  // Add customer modal state
  const [showCustomerModal, setShowCustomerModal] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);

  // Form states
  const [inventoryFormData, setInventoryFormData] = useState<InventoryFormData>({
    name: "",
    category: "",
    quantity: 0,
    costPrice: 0,
    sellingPrice: 0,
    sku: "",
  });
  
  const [transactionFormData, setTransactionFormData] = useState<TransactionFormData>({
    description: "",
    type: "income",
    category: "",
    amount: 0,
    date: new Date().toISOString().split('T')[0],
    customerId: ""
  });

  // Update form states with new customer fields
  const [receiptFormData, setReceiptFormData] = useState<ReceiptFormData>({
    date: new Date().toISOString().split('T')[0],
    customerName: "",
    items: [],
    totalAmount: 0,
    isNewCustomer: false,
    newCustomerData: {
      email: "",
      phone: "",
      address: "",
      notes: ""
    }
  });

  // Add customer form data state
  const [customerFormData, setCustomerFormData] = useState<CustomerFormData>({
    name: "",
    email: "",
    phone: "",
    address: "",
    notes: ""
  });

  // Theme colors
  const theme = {
    primary: "indigo-600",
    primaryLight: "indigo-100",
    primaryDark: "indigo-800",
    secondary: "violet-500",
    secondaryLight: "violet-100",
    secondaryDark: "violet-800",
    success: "emerald-500",
    successLight: "emerald-100",
    danger: "rose-500",
    dangerLight: "rose-100",
    warning: "amber-500",
    warningLight: "amber-100",
    info: "sky-500",
    infoLight: "sky-100",
    gray: "gray-200",
    grayDark: "gray-700",
    textPrimary: "gray-900",
    textSecondary: "gray-600",
    textLight: "gray-400",
    white: "white",
    black: "black",
  };

  // Define available themes
  const themes: Theme[] = [
    {
      id: "default",
      name: "Midnight Blue",
      primary: "indigo-600",
      secondary: "violet-500",
      accent: "indigo-400",
      background: "gray-900",
      cardBackground: "gray-800",
      text: "white",
      border: "gray-700",
      buttonText: "white",
      success: "emerald-500",
      danger: "rose-500",
      warning: "amber-500"
    },
    {
      id: "dark-purple",
      name: "Dark Purple",
      primary: "purple-600",
      secondary: "fuchsia-500",
      accent: "purple-400",
      background: "gray-900",
      cardBackground: "gray-800",
      text: "white",
      border: "purple-900",
      buttonText: "white",
      success: "green-500",
      danger: "red-500",
      warning: "yellow-500"
    },
    {
      id: "emerald",
      name: "Emerald",
      primary: "emerald-600",
      secondary: "teal-500",
      accent: "emerald-400",
      background: "gray-900",
      cardBackground: "gray-800",
      text: "white",
      border: "emerald-900",
      buttonText: "white",
      success: "green-500",
      danger: "rose-500",
      warning: "amber-500"
    },
    {
      id: "crimson",
      name: "Crimson",
      primary: "rose-600",
      secondary: "pink-500",
      accent: "rose-400",
      background: "gray-900",
      cardBackground: "gray-800",
      text: "white",
      border: "rose-900",
      buttonText: "white",
      success: "emerald-500",
      danger: "red-600",
      warning: "amber-500"
    },
    {
      id: "navy",
      name: "Navy",
      primary: "blue-600",
      secondary: "sky-500",
      accent: "blue-400",
      background: "slate-900",
      cardBackground: "slate-800",
      text: "white",
      border: "blue-900",
      buttonText: "white", 
      success: "emerald-500",
      danger: "rose-500",
      warning: "amber-500"
    }
  ];
  
  // Theme state
  const [currentTheme, setCurrentTheme] = useState<Theme>(themes[0]);
  const [showThemeSelector, setShowThemeSelector] = useState(false);
  
  // Add state for data persistence
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [dataChanged, setDataChanged] = useState(false);

  // Add categories state
  const [categories, setCategories] = useState<Category[]>([
    // Some default categories to start with
    { id: "cat-1", name: "Electronics", description: "Electronic items and gadgets", type: "inventory", color: "blue-500" },
    { id: "cat-2", name: "Stationery", description: "Office supplies and stationery", type: "inventory", color: "green-500" },
    { id: "cat-3", name: "Sales", description: "Income from sales", type: "transaction", color: "emerald-500" },
    { id: "cat-4", name: "Utilities", description: "Utility bills and expenses", type: "transaction", color: "amber-500" },
    { id: "cat-5", name: "Salaries", description: "Staff salaries", type: "transaction", color: "rose-500" }
  ]);
  const [filteredCategories, setFilteredCategories] = useState<Category[]>([]);
  
  // Add category form state
  const [categoryFormData, setCategoryFormData] = useState<{
    name: string;
    description: string;
    type: "inventory" | "transaction" | "both";
    color: string;
  }>({
    name: "",
    description: "",
    type: "both",
    color: "blue-500"
  });
  
  // Add category modal state
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);

  // Available colors for categories
  const categoryColors = [
    "blue-500", "indigo-500", "purple-500", "pink-500", "rose-500", 
    "red-500", "orange-500", "amber-500", "yellow-500", "lime-500",
    "green-500", "emerald-500", "teal-500", "cyan-500", "sky-500"
  ];

  // LOCAL STORAGE INTEGRATION
  // Load data from localStorage on initial mount
  useEffect(() => {
    loadFromLocalStorage();
  }, []);

  // Save data to localStorage whenever inventory or transactions change
  useEffect(() => {
    if (inventory.length > 0 || transactions.length > 0 || receipts.length > 0) {
      saveToLocalStorage();
      setDataChanged(true);
    }
  }, [inventory, transactions, receipts, selectedCurrency]);

  // Load theme from localStorage
  useEffect(() => {
    try {
      const savedData = localStorage.getItem('bookkeep-data');
      if (savedData) {
        const parsedData: AppData = JSON.parse(savedData);
        if (parsedData.selectedTheme) {
          const savedTheme = themes.find(theme => theme.id === parsedData.selectedTheme);
          if (savedTheme) {
            setCurrentTheme(savedTheme);
          }
        }
      }
    } catch (error) {
      console.error('Failed to load theme from localStorage:', error);
    }
  }, []);

  // Function to load data from localStorage
  const loadFromLocalStorage = () => {
    try {
      const savedData = localStorage.getItem('bookkeep-data');
      
      if (savedData) {
        const parsedData: AppData = JSON.parse(savedData);
        
        // Convert date strings back to Date objects for transactions
        const loadedTransactions = parsedData.transactions.map(transaction => ({
          ...transaction,
          date: new Date(transaction.date)
        }));
        
        // Convert date strings back to Date objects for inventory items
        const loadedInventory = parsedData.inventory.map(item => ({
          ...item,
          lastRestocked: new Date(item.lastRestocked)
        }));
        
        setInventory(loadedInventory);
        setTransactions(loadedTransactions);
        
        // Load receipts if they exist
        if (parsedData.receipts) {
          const loadedReceipts = parsedData.receipts.map(receipt => ({
            ...receipt,
            date: new Date(receipt.date)
          }));
          setReceipts(loadedReceipts);
        }
        
        // Set selected currency if available
        const currencyCode = parsedData.selectedCurrency;
        if (currencyCode) {
          const foundCurrency = currencies.find(c => c.code === currencyCode);
          if (foundCurrency) {
            setSelectedCurrency(foundCurrency);
          }
        }
        
        // Load categories if they exist
        if (parsedData.categories) {
          setCategories(parsedData.categories);
        }

        // Load customers if they exist
        if (parsedData.customers) {
          const loadedCustomers = parsedData.customers.map(customer => ({
            ...customer,
            createdAt: new Date(customer.createdAt)
          }));
          setCustomers(loadedCustomers);
        }

        setLastSaved(new Date(parsedData.lastUpdated));
        console.log('Data loaded from localStorage');
      }
    } catch (error) {
      console.error('Failed to load data from localStorage:', error);
    }
  };

  // Function to save data to localStorage
  const saveToLocalStorage = () => {
    try {
      setIsSaving(true);
      const currentTime = new Date().toISOString();
      
      // Ensure all receipts have the type field before saving
      const receiptsToSave = receipts.map(r => ({...r, type: r.type || "income"}));
      
      const dataToSave: AppData = {
        inventory,
        transactions,
        receipts: receiptsToSave, // Save with type field
        customers, // Add customers to saved data
        lastUpdated: currentTime,
        version: "1.0",
        selectedCurrency: selectedCurrency.code,
        selectedTheme: currentTheme.id, // Save selected theme
        categories,
      };
      
      localStorage.setItem('bookkeep-data', JSON.stringify(dataToSave));
      setLastSaved(new Date());
      setDataChanged(false);
      
      setTimeout(() => {
        setIsSaving(false);
      }, 1000);
      
    } catch (error) {
      console.error('Failed to save data to localStorage:', error);
      setIsSaving(false);
    }
  };

  // EXPORT/IMPORT FUNCTIONALITY
  // Add state for export dropdown
  const [showExportDropdown, setShowExportDropdown] = useState(false);

  // Update the export function to support CSV format
  const exportData = (format: 'json' | 'csv-inventory' | 'csv-transactions' | 'csv-receipts' | 'csv-customers' | 'csv-all') => {
    try {
      const currentTime = new Date().toISOString().replace(/[:.]/g, '-');
      
      // JSON format (existing code)
      if (format === 'json') {
        const dataToExport: AppData = {
          inventory,
          transactions,
          receipts,
          customers,
          lastUpdated: new Date().toISOString(),
          version: "1.0",
          selectedCurrency: selectedCurrency.code,
          selectedTheme: currentTheme.id,
          categories,
        };
        
        const json = JSON.stringify(dataToExport, null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        const href = URL.createObjectURL(blob);
        
        const link = document.createElement('a');
        link.href = href;
        link.download = `bookkeep-export-${currentTime}.json`;
        document.body.appendChild(link);
        link.click();
        
        document.body.removeChild(link);
        URL.revokeObjectURL(href);
        
        return;
      }
      
      // CSV formats
      let csvContent = '';
      let fileName = '';
      const currencySymbol = selectedCurrency.symbol;
      
      if (format === 'csv-inventory' || format === 'csv-all') {
        const headers = ['ID', 'Name', 'Category', 'Quantity', `Cost Price (${currencySymbol})`, 
          `Selling Price (${currencySymbol})`, 'Last Restocked', 'SKU'];
        
        const inventoryData = inventory.map(item => {
          const category = categories.find(c => c.id === item.category);
          return {
            ...item,
            category: category ? category.name : item.category
          };
        });
        
        const inventoryMappings = [
          'id', 'name', 'category', 'quantity', 'costPrice', 'sellingPrice', 'lastRestocked', 'sku'
        ];
        
        const inventoryCSV = convertToCSV(inventoryData, inventoryMappings);
        
        if (format === 'csv-inventory') {
          csvContent = 'Product Inventory\n' + headers.join(',') + '\n' + inventoryCSV;
          fileName = `inventory-export-${currentTime}.csv`;
        } else {
          csvContent = 'INVENTORY DATA\n' + headers.join(',') + '\n' + inventoryCSV + '\n\n';
        }
      }
      
      if (format === 'csv-transactions' || format === 'csv-all') {
        const headers = ['ID', 'Date', 'Description', 'Type', 'Category', 
          `Amount (${currencySymbol})`, 'Related Inventory', 'Customer'];
        
        const transactionData = transactions.map(t => {
          const category = categories.find(c => c.id === t.category);
          const relatedItem = t.relatedInventoryId ? 
            inventory.find(i => i.id === t.relatedInventoryId)?.name : '';
          const customer = t.customerId ?
            customers.find(c => c.id === t.customerId)?.name : '';
            
          return {
            ...t,
            category: category ? category.name : t.category,
            relatedInventory: relatedItem,
            customer
          };
        });
        
        const transactionMappings = [
          'id', 'date', 'description', 'type', 'category', 'amount', 'relatedInventory', 'customer'
        ];
        
        const transactionsCSV = convertToCSV(transactionData, transactionMappings);
        
        if (format === 'csv-transactions') {
          csvContent = 'Financial Transactions\n' + headers.join(',') + '\n' + transactionsCSV;
          fileName = `transactions-export-${currentTime}.csv`;
        } else {
          csvContent += 'TRANSACTION DATA\n' + headers.join(',') + '\n' + transactionsCSV + '\n\n';
        }
      }
      
      if (format === 'csv-receipts' || format === 'csv-all') {
        const headers = ['ID', 'Date', 'Customer', 'Type', 'Items Count', 
          `Total Amount (${currencySymbol})`, 'Description'];
        
        const receiptData = unifiedReceipts.map(r => {
          return {
            id: r.id,
            date: r.date,
            customer: r.customerName,
            type: r.type,
            itemsCount: r.items.length,
            totalAmount: r.totalAmount,
            description: r.description || ""
          };
        });
        
        const receiptMappings = [
          'id', 'date', 'customer', 'type', 'itemsCount', 'totalAmount', 'description'
        ];
        
        const receiptsCSV = convertToCSV(receiptData, receiptMappings);
        
        if (format === 'csv-receipts') {
          csvContent = 'Receipts and Invoices\n' + headers.join(',') + '\n' + receiptsCSV;
          fileName = `receipts-export-${currentTime}.csv`;
        } else {
          csvContent += 'RECEIPT DATA\n' + headers.join(',') + '\n' + receiptsCSV + '\n\n';
        }
      }
      
      if (format === 'csv-customers' || format === 'csv-all') {
        const headers = ['ID', 'Name', 'Email', 'Phone', 'Address', 
          'Purchases Count', 'Created Date', 'Notes'];
        
        const customerMappings = [
          'id', 'name', 'email', 'phone', 'address', 'totalPurchases', 'createdAt', 'notes'
        ];
        
        const customersCSV = convertToCSV(customers, customerMappings);
        
        if (format === 'csv-customers') {
          csvContent = 'Customer Database\n' + headers.join(',') + '\n' + customersCSV;
          fileName = `customers-export-${currentTime}.csv`;
        } else {
          csvContent += 'CUSTOMER DATA\n' + headers.join(',') + '\n' + customersCSV;
        }
      }
      
      if (format === 'csv-all') {
        fileName = `bookkeep-all-data-${currentTime}.csv`;
      }
      
      // Create and download the CSV file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const href = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = href;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      
      document.body.removeChild(link);
      URL.revokeObjectURL(href);
      
    } catch (error) {
      console.error('Failed to export data:', error);
      alert('Failed to export data. Please try again.');
    }
  };

  // Function to import data from a JSON file
  const importData = (event: React.ChangeEvent<HTMLInputElement>) => {
    try {
      const file = event.target.files?.[0];
      if (!file) return;
      
      const reader = new FileReader();
      
      reader.onload = (e) => {
        try {
          const importedData: AppData = JSON.parse(e.target?.result as string);
          
          // Validate imported data structure
          if (!importedData.inventory || !importedData.transactions) {
            throw new Error('Invalid data format');
          }
          
          // Confirm before overwriting existing data
          if (inventory.length > 0 || transactions.length > 0) {
            if (!window.confirm('Importing will replace your existing data. Continue?')) {
              return;
            }
          }
          
          // Convert date strings to Date objects
          const processedTransactions = importedData.transactions.map(transaction => ({
            ...transaction,
            date: new Date(transaction.date)
          }));
          
          const processedInventory = importedData.inventory.map(item => ({
            ...item,
            lastRestocked: new Date(item.lastRestocked)
          }));
          
          setInventory(processedInventory);
          setTransactions(processedTransactions);
          
          // Load receipts if they exist
          if (importedData.receipts) {
            const loadedReceipts = importedData.receipts.map(receipt => ({
              ...receipt,
              date: new Date(receipt.date)
            }));
            setReceipts(loadedReceipts);
          }
          
          // Set currency if available
          if (importedData.selectedCurrency) {
            const foundCurrency = currencies.find(c => c.code === importedData.selectedCurrency);
            if (foundCurrency) {
              setSelectedCurrency(foundCurrency);
            }
          }

          // Load theme if available
          if (importedData.selectedTheme) {
            const importedTheme = themes.find(theme => theme.id === importedData.selectedTheme);
            if (importedTheme) {
              setCurrentTheme(importedTheme);
            }
          }

          // Load categories if they exist
          if (importedData.categories) {
            setCategories(importedData.categories);
          }

          // Load customers if they exist
          if (importedData.customers) {
            const loadedCustomers = importedData.customers.map(customer => ({
              ...customer,
              createdAt: new Date(customer.createdAt)
            }));
            setCustomers(loadedCustomers);
          }
          
          alert('Data imported successfully!');
          
        } catch (error) {
          console.error('Failed to parse imported data:', error);
          alert('The selected file contains invalid data. Please try again with a valid export file.');
        }
      };
      
      reader.readAsText(file);
      
    } catch (error) {
      console.error('Failed to import data:', error);
      alert('Failed to import data. Please try again.');
    }
    
    // Reset input
    event.target.value = '';
  };

  // Function to add a new inventory item
  const addInventoryItem = () => {
    const newItem: InventoryItem = {
      ...inventoryFormData,
      id: `inv-${Date.now()}`,
      lastRestocked: new Date(),
      quantity: Number(inventoryFormData.quantity),
      costPrice: Number(inventoryFormData.costPrice),
      sellingPrice: Number(inventoryFormData.sellingPrice),
    };
    setInventory([...inventory, newItem]);
    setShowInventoryModal(false);
    
    // Reset form
    resetInventoryForm();
  };
  
  // Function to update an inventory item
  const updateInventoryItem = () => {
    if (!editingInventoryItem) return;
    
    const updatedItem: InventoryItem = {
      ...editingInventoryItem,
      name: inventoryFormData.name,
      category: inventoryFormData.category,
      quantity: Number(inventoryFormData.quantity),
      costPrice: Number(inventoryFormData.costPrice),
      sellingPrice: Number(inventoryFormData.sellingPrice),
      sku: inventoryFormData.sku,
    };
    
    setInventory(inventory.map(item => 
      item.id === updatedItem.id ? updatedItem : item
    ));
    
    setShowInventoryModal(false);
    setEditingInventoryItem(null);
    resetInventoryForm();
  };
  
  // Function to delete an inventory item
  const deleteInventoryItem = (id: string) => {
    if (window.confirm("Are you sure you want to delete this inventory item?")) {
      setInventory(inventory.filter(item => item.id !== id));
    }
  };
  
  // Function to reset inventory form
  const resetInventoryForm = () => {
    setInventoryFormData({
      name: "",
      category: "",
      quantity: 0,
      costPrice: 0,
      sellingPrice: 0,
      sku: "",
    });
  };

  // Updated add transaction function to associate with customer
  const addTransaction = () => {
    const newTransaction: Transaction = {
      id: `txn-${Date.now()}`,
      description: transactionFormData.description,
      type: transactionFormData.type,
      category: transactionFormData.category,
      amount: Number(transactionFormData.amount),
      date: new Date(transactionFormData.date),
      relatedInventoryId: transactionFormData.relatedInventoryId,
      customerId: transactionFormData.customerId || undefined, // Add customerId if provided
    };
    
    // Update customer purchase count if transaction is income and has a customer
    if (transactionFormData.type === "income" && transactionFormData.customerId) {
      setCustomers(customers.map(customer =>
        customer.id === transactionFormData.customerId
          ? { ...customer, totalPurchases: customer.totalPurchases + 1 }
          : customer
      ));
    }
    
    setTransactions([...transactions, newTransaction]);
    setShowTransactionModal(false);
    resetTransactionForm();
  };
  
  // Updated update transaction function to handle customer association changes
  const updateTransaction = () => {
    if (!editingTransaction) return;
    
    const updatedTransaction: Transaction = {
      ...editingTransaction,
      description: transactionFormData.description,
      type: transactionFormData.type,
      category: transactionFormData.category,
      amount: Number(transactionFormData.amount),
      date: new Date(transactionFormData.date),
      relatedInventoryId: transactionFormData.relatedInventoryId,
      customerId: transactionFormData.customerId || undefined,
    };
    
    // Handle customer purchase count updates if the customer association changed
    if (transactionFormData.type === "income" && 
        transactionFormData.customerId && 
        transactionFormData.customerId !== editingTransaction.customerId) {
      // Increment new customer's purchase count
      setCustomers(customers.map(customer =>
        customer.id === transactionFormData.customerId
          ? { ...customer, totalPurchases: customer.totalPurchases + 1 }
          : customer
      ));
    }
    
    setTransactions(transactions.map(transaction => 
      transaction.id === updatedTransaction.id ? updatedTransaction : transaction
    ));
    
    setShowTransactionModal(false);
    setEditingTransaction(null);
    resetTransactionForm();
  };
  
  // Function to delete a transaction
  const deleteTransaction = (id: string) => {
    if (window.confirm("Are you sure you want to delete this transaction?")) {
      setTransactions(transactions.filter(transaction => transaction.id !== id));
    }
  };
  
  // Function to reset transaction form
  const resetTransactionForm = () => {
    setTransactionFormData({
      description: "",
      type: "income",
      category: "",
      amount: 0,
      date: new Date().toISOString().split('T')[0],
      customerId: ""
    });
  };

  // New functions for receipts
  // Updated add receipt function to handle customer creation/selection
  const addReceipt = () => {
    // Validate inventory quantities first
    let validInventory = true;
    const updatedInventory = [...inventory];
    
    for (const item of receiptFormData.items) {
      const inventoryItem = inventory.find(invItem => invItem.id === item.id);
      if (!inventoryItem || inventoryItem.quantity < item.quantity) {
        const itemName = inventoryItem ? inventoryItem.name : "Unknown item";
        alert(`Error: Not enough inventory for ${itemName}`);
        validInventory = false;
        break;
      }
    }
    
    if (!validInventory) {
      return;
    }
    
    // Create new customer if needed
    let customerInfo = {
      id: receiptFormData.customerId || uuidv4(),
      name: receiptFormData.customerName
    };
    
    // If creating a new customer, add them to customers list
    if (receiptFormData.isNewCustomer && receiptFormData.customerName) {
      const newCustomer: Customer = {
        id: customerInfo.id,
        name: customerInfo.name,
        email: receiptFormData.newCustomerData?.email || "",
        phone: receiptFormData.newCustomerData?.phone || "",
        address: receiptFormData.newCustomerData?.address || "",
        notes: receiptFormData.newCustomerData?.notes || "",
        createdAt: new Date(),
        totalPurchases: 1 // First purchase
      };
      
      setCustomers([...customers, newCustomer]);
    } else if (receiptFormData.customerId) {
      // Update existing customer's purchase count
      setCustomers(customers.map(customer => 
        customer.id === receiptFormData.customerId
          ? { ...customer, totalPurchases: customer.totalPurchases + 1 }
          : customer
      ));
    }
    
    // Create the new receipt with a UUID for customerId
    const newReceipt: Receipt = {
      id: `rcp-${Date.now()}`,
      date: new Date(receiptFormData.date),
      customerId: receiptFormData.customerId || uuidv4(), // Generate UUID if not provided
      customerName: receiptFormData.customerName,
      items: receiptFormData.items,
      totalAmount: receiptFormData.totalAmount,
      type: "income" // Default to income for new receipts
    };
    
    // Create a corresponding income transaction
    const transactionId = `txn-${Date.now()}`;
    const newTransaction: Transaction = {
      id: transactionId,
      date: new Date(receiptFormData.date),
      description: `Sale to ${receiptFormData.customerName}`,
      type: "income",
      category: "Sales",
      amount: receiptFormData.totalAmount,
    };
    
    // Update the receipt with the transaction ID
    newReceipt.transactionId = transactionId;
    
    // Update inventory quantities
    receiptFormData.items.forEach(item => {
      const inventoryIndex = updatedInventory.findIndex(invItem => invItem.id === item.id);
      if (inventoryIndex !== -1) {
        updatedInventory[inventoryIndex] = {
          ...updatedInventory[inventoryIndex],
          quantity: updatedInventory[inventoryIndex].quantity - item.quantity
        };
      }
    });
    
    // Save all updates
    setReceipts([...receipts, newReceipt]);
    setTransactions([...transactions, newTransaction]);
    setInventory(updatedInventory);
    setShowReceiptModal(false);
    resetReceiptForm();
  };

  // Updated update receipt function to handle customer changes
  const updateReceipt = () => {
    if (!editingReceipt) return;
    
    // Find quantities that have changed to update inventory correctly
    const quantityDifferences = editingReceipt.items.map(oldItem => {
      const newItem = receiptFormData.items.find(item => item.id === oldItem.id);
      return {
        id: oldItem.id,
        difference: newItem ? newItem.quantity - oldItem.quantity : -oldItem.quantity
      };
    });
    
    // Add new items not in original receipt
    receiptFormData.items.forEach(item => {
      if (!editingReceipt.items.some(oldItem => oldItem.id === item.id)) {
        quantityDifferences.push({
          id: item.id,
          difference: item.quantity
        });
      }
    });
    
    // Handle customer updates
    let customerInfo = {
      id: editingReceipt.customerId,
      name: editingReceipt.customerName
    };
    
    // If customer was changed or new one created
    if (receiptFormData.isNewCustomer && receiptFormData.customerName) {
      // Create new customer
      const newCustomer: Customer = {
        id: uuidv4(),
        name: receiptFormData.customerName,
        email: receiptFormData.newCustomerData?.email || "",
        phone: receiptFormData.newCustomerData?.phone || "",
        address: receiptFormData.newCustomerData?.address || "",
        notes: receiptFormData.newCustomerData?.notes || "",
        createdAt: new Date(),
        totalPurchases: 1
      };
      
      customerInfo = {
        id: newCustomer.id,
        name: newCustomer.name
      };
      
      setCustomers([...customers, newCustomer]);
    } else if (receiptFormData.customerId && receiptFormData.customerId !== editingReceipt.customerId) {
      // Update the selected customer's purchase count
      const selectedCustomer = customers.find(c => c.id === receiptFormData.customerId);
      if (selectedCustomer) {
        customerInfo = {
          id: selectedCustomer.id,
          name: selectedCustomer.name
        };
        
        setCustomers(customers.map(customer =>
          customer.id === receiptFormData.customerId
            ? { ...customer, totalPurchases: customer.totalPurchases + 1 }
            : customer
        ));
      }
    }
    
    // Create the updated receipt
    const updatedReceipt: Receipt = {
      ...editingReceipt,
      date: new Date(receiptFormData.date),
      customerId: customerInfo.id,
      customerName: customerInfo.name,
      items: receiptFormData.items,
      totalAmount: receiptFormData.totalAmount,
      type: "income" // Default to income for updated receipts
    };
    
    // Find or create corresponding transaction
    let updatedTransaction: Transaction | null = null;
    let existingTransactionIndex = -1;
    
    if (editingReceipt.transactionId) {
      // Find existing transaction
      existingTransactionIndex = transactions.findIndex(t => t.id === editingReceipt.transactionId);
      
      if (existingTransactionIndex !== -1) {
        updatedTransaction = {
          ...transactions[existingTransactionIndex],
          date: new Date(receiptFormData.date),
          description: `Sale to ${receiptFormData.customerName}`,
          amount: receiptFormData.totalAmount,
        };
      }
    }
    
    // If no valid transaction found or linked, create a new one
    if (updatedTransaction === null) {
      const transactionId = `txn-${Date.now()}`;
      updatedTransaction = {
        id: transactionId,
        date: new Date(receiptFormData.date),
        description: `Sale to ${receiptFormData.customerName}`,
        type: "income",
        category: "Sales",
        amount: receiptFormData.totalAmount,
      };
      updatedReceipt.transactionId = transactionId;
    }
    
    // Update inventory quantities - check for valid inventory first
    const updatedInventory = [...inventory];
    let validInventoryChanges = true;

    // Verify all inventory changes are valid before applying
    quantityDifferences.forEach(diff => {
      const inventoryIndex = updatedInventory.findIndex(invItem => invItem.id === diff.id);
      if (inventoryIndex !== -1) {
        const newQuantity = updatedInventory[inventoryIndex].quantity - diff.difference;
        if (newQuantity < 0) {
          validInventoryChanges = false;
          alert(`Error: Not enough inventory for ${updatedInventory[inventoryIndex].name}`);
        }
      }
    });

    if (!validInventoryChanges) {
      return;
    }
    
    // Apply inventory updates if all changes are valid
    quantityDifferences.forEach(diff => {
      const inventoryIndex = updatedInventory.findIndex(invItem => invItem.id === diff.id);
      if (inventoryIndex !== -1 && diff.difference !== 0) {
        updatedInventory[inventoryIndex] = {
          ...updatedInventory[inventoryIndex],
          quantity: updatedInventory[inventoryIndex].quantity - diff.difference
        };
      }
    });
    
    // Save all updates
    setReceipts(receipts.map(receipt =>
      receipt.id === updatedReceipt.id ? updatedReceipt : receipt
    ));
    
    // Update transactions array based on whether we're updating or adding
    if (existingTransactionIndex !== -1) {
      const newTransactions = [...transactions];
      newTransactions[existingTransactionIndex] = updatedTransaction;
      setTransactions(newTransactions);
    } else {
      setTransactions([...transactions, updatedTransaction]);
    }
    
    setInventory(updatedInventory);
    setShowReceiptModal(false);
    setEditingReceipt(null);
    resetReceiptForm();
  };

  // Update the deleteReceipt function to handle linked transactions and restore inventory
  const deleteReceipt = (id: string) => {
    if (window.confirm("Are you sure you want to delete this receipt?")) {
      const receiptToDelete = receipts.find(receipt => receipt.id === id);
      
      if (receiptToDelete) {
        // Restore inventory quantities
        const updatedInventory = [...inventory];
        receiptToDelete.items.forEach(item => {
          const inventoryIndex = updatedInventory.findIndex(invItem => invItem.id === item.id);
          if (inventoryIndex !== -1) {
            updatedInventory[inventoryIndex] = {
              ...updatedInventory[inventoryIndex],
              quantity: updatedInventory[inventoryIndex].quantity + item.quantity
            };
          }
        });
        
        // Delete linked transaction if exists
        if (receiptToDelete.transactionId) {
          setTransactions(transactions.filter(
            transaction => transaction.id !== receiptToDelete.transactionId
          ));
        }
        
        // Delete receipt and update inventory
        setReceipts(receipts.filter(receipt => receipt.id !== id));
        setInventory(updatedInventory);
      } else {
        setReceipts(receipts.filter(receipt => receipt.id !== id));
      }
    }
  };

  // Update reset receipt form function
  const resetReceiptForm = () => {
    setReceiptFormData({
      date: new Date().toISOString().split('T')[0],
      customerName: "",
      items: [],
      totalAmount: 0,
      isNewCustomer: false,
      newCustomerData: {
        email: "",
        phone: "",
        address: "",
        notes: ""
      }
    });
  };

  // Handle inventory form changes
  const handleInventoryFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setInventoryFormData({
      ...inventoryFormData,
      [name]: value,
    });
  };
  
  // Handle transaction form changes
  const handleTransactionFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setTransactionFormData({
      ...transactionFormData,
      [name]: value,
    });
  };

  // Update handle receipt form changes
  const handleReceiptFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    // Handle customer selection dropdown
    if (name === "customerSelect") {
      if (value === "new") {
        // Creating new customer
        setReceiptFormData({
          ...receiptFormData,
          isNewCustomer: true,
          customerId: undefined,
          customerName: ""
        });
      } else if (value) {
        // Selected existing customer
        const selectedCustomer = customers.find(c => c.id === value);
        if (selectedCustomer) {
          setReceiptFormData({
            ...receiptFormData,
            isNewCustomer: false,
            customerId: selectedCustomer.id,
            customerName: selectedCustomer.name
          });
        }
      }
    } 
    // Handle nested new customer data fields
    else if (name.startsWith("newCustomer.")) {
      const field = name.split(".")[1];
      setReceiptFormData({
        ...receiptFormData,
        newCustomerData: {
          ...receiptFormData.newCustomerData!,
          [field]: value
        }
      });
    } 
    // Handle all other fields
    else {
      setReceiptFormData({
        ...receiptFormData,
        [name]: value,
      });
    }
  };

  // Calculate summary statistics
  const totalInventoryValue = inventory.reduce(
    (sum, item) => sum + item.costPrice * item.quantity,
    0
  );
  
  const totalSalesValue = transactions
    .filter(t => t.type === "income")
    .reduce((sum, t) => sum + t.amount, 0);
  
  const totalExpenses = transactions
    .filter(t => t.type === "expense")
    .reduce((sum, t) => sum + t.amount, 0);
  
  const profit = totalSalesValue - totalExpenses;

  // Format currency function
  const formatCurrency = (amount: number): string => {
    if (showUsdPrices || selectedCurrency.code === "USD") {
      return `${selectedCurrency.symbol}${amount.toFixed(2)}`;
    } else {
      // Convert from USD to selected currency
      const convertedAmount = parseFloat(convertCurrency(amount, selectedCurrency.rate || 1));
      return `${selectedCurrency.symbol}${convertedAmount.toFixed(2)}`;
    }
  };

  // useEffect to set form data when editing an inventory item
  useEffect(() => {
    if (editingInventoryItem) {
      setInventoryFormData({
        name: editingInventoryItem.name,
        category: editingInventoryItem.category,
        quantity: editingInventoryItem.quantity,
        costPrice: editingInventoryItem.costPrice,
        sellingPrice: editingInventoryItem.sellingPrice,
        sku: editingInventoryItem.sku,
      });
      setShowInventoryModal(true);
    }
  }, [editingInventoryItem]);
  
  // useEffect to set form data when editing a transaction
  useEffect(() => {
    if (editingTransaction) {
      setTransactionFormData({
        description: editingTransaction.description,
        type: editingTransaction.type,
        category: editingTransaction.category,
        amount: editingTransaction.amount,
        date: editingTransaction.date.toISOString().split('T')[0],
        relatedInventoryId: editingTransaction.relatedInventoryId,
        customerId: editingTransaction.customerId || ""
      });
      setShowTransactionModal(true);
    }
  }, [editingTransaction]);

  // useEffect to set form data when editing a receipt
  useEffect(() => {
    if (editingReceipt) {
      setReceiptFormData({
        date: editingReceipt.date.toISOString().split('T')[0],
        customerId: editingReceipt.customerId,
        customerName: editingReceipt.customerName,
        items: editingReceipt.items,
        totalAmount: editingReceipt.totalAmount,
        isNewCustomer: false,
        newCustomerData: {
          email: "",
          phone: "",
          address: "",
          notes: ""
        }
      });
      setShowReceiptModal(true);
    }
  }, [editingReceipt]);

  // useEffect to set form data when editing a customer
  useEffect(() => {
    if (editingCustomer) {
      setCustomerFormData({
        name: editingCustomer.name,
        email: editingCustomer.email,
        phone: editingCustomer.phone,
        address: editingCustomer.address,
        notes: editingCustomer.notes
      });
      setShowCustomerModal(true);
    }
  }, [editingCustomer]);

  // Close currency dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const dropdown = document.getElementById('currency-dropdown');
      if (dropdown && !dropdown.contains(event.target as Node)) {
        setShowCurrencyDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Add these filtered data states to keep the original data intact
  // Add near the beginning of the component after the other state declarations
  const [filteredInventory, setFilteredInventory] = useState<InventoryItem[]>([]);
  const [filteredTransactions, setFilteredTransactions] = useState<Transaction[]>([]);
  const [filteredReceipts, setFilteredReceipts] = useState<Receipt[]>([]);

  // Update useEffect to initialize filtered data when original data loads
  useEffect(() => {
    setFilteredInventory(inventory);
    setFilteredTransactions(transactions);
    setFilteredReceipts(receipts);
    setFilteredCategories(categories);
    setFilteredCustomers(customers);
  }, [inventory, transactions, receipts, categories, customers]);

  // Add this useEffect for search functionality
  useEffect(() => {
    if (searchQuery.trim() === '') {
      // If search is empty, show all data
      setFilteredInventory(inventory);
      setFilteredTransactions(transactions);
      setFilteredReceipts(receipts);
      setFilteredCategories(categories);
      setFilteredCustomers(customers);
      return;
    }
    
    const query = searchQuery.toLowerCase().trim();
    
    // Filter inventory items
    const matchedInventory = inventory.filter(item => 
      item.name.toLowerCase().includes(query) || 
      item.category.toLowerCase().includes(query) || 
      item.sku.toLowerCase().includes(query)
    );
    setFilteredInventory(matchedInventory);
    
    // Filter transactions
    const matchedTransactions = transactions.filter(transaction => 
      transaction.description.toLowerCase().includes(query) || 
      transaction.category.toLowerCase().includes(query) || 
      transaction.type.toLowerCase().includes(query) ||
      transaction.amount.toString().includes(query)
    );
    setFilteredTransactions(matchedTransactions);
    
    // Filter receipts
    const matchedReceipts = receipts.filter(receipt => 
      receipt.customerName.toLowerCase().includes(query) || 
      receipt.customerId.toLowerCase().includes(query) ||
      receipt.totalAmount.toString().includes(query) ||
      // Also search items within receipts
      receipt.items.some(item => 
        item.name.toLowerCase().includes(query) ||
        item.price.toString().includes(query)
      )
    );
    setFilteredReceipts(matchedReceipts);

    // Filter categories
    const matchedCategories = categories.filter(category => 
      category.name.toLowerCase().includes(query) || 
      category.description.toLowerCase().includes(query) ||
      category.type.toLowerCase().includes(query)
    );
    setFilteredCategories(matchedCategories);

    // Filter customers
    const matchedCustomers = customers.filter(customer => 
      customer.name.toLowerCase().includes(query) || 
      customer.email.toLowerCase().includes(query) || 
      customer.phone.toLowerCase().includes(query) ||
      customer.address.toLowerCase().includes(query)
    );
    setFilteredCustomers(matchedCustomers);
  }, [searchQuery, inventory, transactions, receipts, categories, customers]);

  // Add a stats object to display search results count 
  const searchStats = {
    inventory: searchQuery ? `${filteredInventory.length} of ${inventory.length}` : `${inventory.length} items`,
    transactions: searchQuery ? `${filteredTransactions.length} of ${transactions.length}` : `${transactions.length} records`,
    receipts: searchQuery ? `${filteredReceipts.length} of ${receipts.length}` : `${receipts.length} records`,
    categories: searchQuery ? `${filteredCategories.length} of ${categories.length}` : `${categories.length} categories`,
    customers: searchQuery ? `${filteredCustomers.length} of ${customers.length}` : `${customers.length} customers`
  };

  // Add functions to manage categories
  const addCategory = () => {
    const newCategory: Category = {
      id: `cat-${Date.now()}`,
      name: categoryFormData.name,
      description: categoryFormData.description,
      type: categoryFormData.type,
      color: categoryFormData.color
    };
    
    setCategories([...categories, newCategory]);
    setShowCategoryModal(false);
    resetCategoryForm();
  };

  const updateCategory = () => {
    if (!editingCategory) return;
    
    const updatedCategory: Category = {
      ...editingCategory,
      name: categoryFormData.name,
      description: categoryFormData.description,
      type: categoryFormData.type,
      color: categoryFormData.color
    };
    
    setCategories(categories.map(category => 
      category.id === updatedCategory.id ? updatedCategory : category
    ));
    
    setShowCategoryModal(false);
    setEditingCategory(null);
    resetCategoryForm();
  };

  const deleteCategory = (id: string) => {
    // Check if the category is in use before deleting
    const isUsedInInventory = inventory.some(item => item.category === id);
    const isUsedInTransactions = transactions.some(transaction => transaction.category === id);
    
    if (isUsedInInventory || isUsedInTransactions) {
      alert("This category is currently in use and cannot be deleted.");
      return;
    }
    
    if (window.confirm("Are you sure you want to delete this category?")) {
      setCategories(categories.filter(category => category.id !== id));
    }
  };

  const resetCategoryForm = () => {
    setCategoryFormData({
      name: "",
      description: "",
      type: "both",
      color: "blue-500"
    });
  };

  const handleCategoryFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setCategoryFormData({
      ...categoryFormData,
      [name]: value,
    });
  };

  // Update useEffect for editingCategory
  useEffect(() => {
    if (editingCategory) {
      setCategoryFormData({
        name: editingCategory.name,
        description: editingCategory.description,
        type: editingCategory.type,
        color: editingCategory.color
      });
      setShowCategoryModal(true);
    }
  }, [editingCategory]);

  // Add functions to manage customers
  const addCustomer = () => {
    const newCustomer: Customer = {
      id: uuidv4(),
      name: customerFormData.name,
      email: customerFormData.email,
      phone: customerFormData.phone,
      address: customerFormData.address,
      notes: customerFormData.notes,
      createdAt: new Date(),
      totalPurchases: 0
    };
    
    setCustomers([...customers, newCustomer]);
    setShowCustomerModal(false);
    resetCustomerForm();
  };

  const updateCustomer = () => {
    if (!editingCustomer) return;
    
    const updatedCustomer: Customer = {
      ...editingCustomer,
      name: customerFormData.name,
      email: customerFormData.email,
      phone: customerFormData.phone,
      address: customerFormData.address,
      notes: customerFormData.notes
    };
    
    setCustomers(customers.map(customer => 
      customer.id === updatedCustomer.id ? updatedCustomer : customer
    ));
    
    setShowCustomerModal(false);
    setEditingCustomer(null);
    resetCustomerForm();
  };

  const deleteCustomer = (id: string) => {
    // Check if customer has receipts before deletion
    const hasReceipts = receipts.some(receipt => receipt.customerId === id);
    
    if (hasReceipts) {
      alert("This customer has associated receipts and cannot be deleted.");
      return;
    }
    
    if (window.confirm("Are you sure you want to delete this customer?")) {
      setCustomers(customers.filter(customer => customer.id !== id));
    }
  };

  const resetCustomerForm = () => {
    setCustomerFormData({
      name: "",
      email: "",
      phone: "",
      address: "",
      notes: ""
    });
  };

  const handleCustomerFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setCustomerFormData({
      ...customerFormData,
      [name]: value,
    });
  };

  // Define animation variants for reuse
  const fadeIn = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { duration: 0.3 }
    },
    exit: { 
      opacity: 0,
      transition: { duration: 0.2 }
    }
  };

  const slideUp = {
    hidden: { y: 20, opacity: 0 },
    visible: { 
      y: 0, 
      opacity: 1,
      transition: { 
        type: "spring", 
        stiffness: 300, 
        damping: 24,
        duration: 0.3
      }
    },
    exit: { 
      y: 20, 
      opacity: 0,
      transition: { duration: 0.2 }
    }
  };

  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.05
      }
    }
  };

  const tableRowVariant = {
    hidden: { opacity: 0, y: 10 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { type: "spring", stiffness: 300, damping: 24 }
    }
  };

  const cardVariant = {
    hidden: { opacity: 0, y: 10 },
    visible: { 
      opacity: 1, 
      y: 0, 
      transition: { 
        type: "spring", 
        stiffness: 300, 
        damping: 24 
      }
    },
    hover: { 
      y: -4,
      boxShadow: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
      transition: { 
        type: "spring", 
        stiffness: 300, 
        damping: 20 
      }
    }
  };

  // Add state for receipt preview modal
  const [showReceiptPreview, setShowReceiptPreview] = useState(false);
  const [viewingReceipt, setViewingReceipt] = useState<Receipt | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // Add receipt card ref for generating image
  const cardRef = useRef<HTMLDivElement>(null);

  // Function to view receipt details
  const viewReceipt = (receipt: Receipt) => {
    setViewingReceipt(receipt);
    setShowReceiptPreview(true);
  };

  // Function to generate and download receipt image
  const generateReceiptImage = async () => {
    if (!cardRef.current) return;
    setIsLoading(true);
    
    try {
      const content = cardRef.current;
      
      // First attempt with PNG
      let dataUrl;
      try {
        dataUrl = await toPng(content, {
          quality: 10,
          pixelRatio: 10,
          skipFonts: true, // Skip font embedding which causes issues
          fontEmbedCSS: "" // Empty string to avoid font embedding
        });
      } catch (pngError) {
        console.warn('PNG generation failed, falling back to JPEG:', pngError);
        // Fall back to JPEG if PNG fails
        dataUrl = await toJpeg(content, {
          quality: 10,
          pixelRatio: 10,
          skipFonts: true // Skip font embedding for JPEG as well
        });
      }
      
      const link = document.createElement('a');
      const receiptType = viewingReceipt?.type === "expense" ? "expense" : "receipt";
      const title = viewingReceipt?.customerName || receiptType;
      link.download = `${title}-${receiptType}-${Date.now()}.${dataUrl.startsWith('data:image/png') ? 'png' : 'jpg'}`;
      link.href = dataUrl;
      link.click();
    } catch (error) {
      console.error('Error generating image:', error);
      alert('Failed to generate image. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Update the state for receipts to include transaction-based receipts
  const [unifiedReceipts, setUnifiedReceipts] = useState<Receipt[]>([]);

  // Update useEffect to include transactions in the receipts tab
  useEffect(() => {
    // Combine actual receipts with transaction-based receipts
    const transactionReceipts = transactions
      .filter(transaction => !receipts.some(receipt => receipt.transactionId === transaction.id)) // Avoid duplicates
      .map(transaction => {
        // Create a receipt object from the transaction
        return {
          id: `auto-rcp-${transaction.id}`,
          date: transaction.date,
          customerId: transaction.customerId || "guest",
          customerName: transaction.customerId 
            ? customers.find(c => c.id === transaction.customerId)?.name || "Unknown Customer"
            : transaction.type === "income" ? "Walk-in Customer" : "Vendor",
          items: [], // Most transactions won't have items
          totalAmount: transaction.amount,
          transactionId: transaction.id,
          type: transaction.type,
          description: transaction.description,
          isAutoGenerated: true, // Mark as auto-generated for UI differentiation
        } as Receipt;
      });
    
    // Combine with regular receipts (which already have transactionId set)
    const allReceipts = [
      ...receipts.map(r => ({...r, type: "income" as const, isAutoGenerated: false})), 
      ...transactionReceipts
    ];
    
    // Sort by date, newest first
    const sortedReceipts = allReceipts.sort((a, b) => b.date.getTime() - a.date.getTime());
    
    setUnifiedReceipts(sortedReceipts);
  }, [transactions, receipts, customers]);

  // Update filtered receipts to use unifiedReceipts rather than just receipts
  useEffect(() => {
    setFilteredReceipts(unifiedReceipts);
  }, [inventory, transactions, unifiedReceipts, categories, customers]);

  // Add search functionality for unified receipts
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredReceipts(unifiedReceipts);
      return;
    }
    
    const query = searchQuery.toLowerCase().trim();
    
    // Filter unified receipts
    const matchedReceipts = unifiedReceipts.filter(receipt => 
      receipt.customerName.toLowerCase().includes(query) || 
      receipt.customerId.toLowerCase().includes(query) ||
      receipt.totalAmount.toString().includes(query) ||
      receipt.description?.toLowerCase().includes(query) ||
      // Also search items within receipts
      receipt.items.some(item => 
        item.name.toLowerCase().includes(query) ||
        item.price.toString().includes(query)
      )
    );
    setFilteredReceipts(matchedReceipts);
  }, [searchQuery, inventory, transactions, unifiedReceipts, categories, customers]);

  return (
    <div className={`min-h-screen bg-${currentTheme.background}`}>
      {/* Header - with gradient background */}
      <header className={`bg-gradient-to-r from-${currentTheme.background} to-${currentTheme.cardBackground} text-${currentTheme.text} shadow-lg border-b border-${currentTheme.border} sticky top-0 z-10`}>
        <div className="container mx-auto p-4 flex flex-col sm:flex-row justify-between items-center">
          <h1 className="text-2xl font-bold flex items-center mb-2 sm:mb-0">
            <FaBook className={`mr-2 text-${currentTheme.accent}`} />
            BookKeep Pro
          </h1>
          <div className="flex flex-col sm:flex-row items-center space-x-0 space-y-2 sm:space-y-0 sm:space-x-4">
            {/* Data Actions */}
            <div className="flex space-x-2">
              {/* Theme Selector Button */}
              <div className="relative">
                <button
                  title="Change Theme"
                  onClick={() => setShowThemeSelector(!showThemeSelector)}
                  className={`px-2 py-1 rounded bg-${currentTheme.cardBackground} hover:bg-${currentTheme.background} text-${currentTheme.text} border border-${currentTheme.border} text-sm flex items-center`}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
                  </svg>
                  Theme
                </button>
                
                {showThemeSelector && (
                  <div className={`absolute right-0 mt-2 w-48 bg-${currentTheme.cardBackground} rounded-md shadow-lg z-10 py-1 border border-${currentTheme.border} overflow-hidden animate-fadeIn`}>
                    {themes.map((theme) => (
                      <button
                        key={theme.id}
                        className={`flex items-center justify-between w-full text-left px-4 py-3 text-sm hover:bg-${theme.background} transition-colors duration-150 ${
                          theme.id === currentTheme.id ? `bg-${theme.background} text-${theme.accent}` : `text-${theme.text}`
                        }`}
                        onClick={() => {
                          setCurrentTheme(theme);
                          setShowThemeSelector(false);
                          // Trigger save to persist theme choice
                          setTimeout(() => saveToLocalStorage(), 100);
                        }}
                      >
                        <span>{theme.name}</span>
                        <span className={`h-4 w-4 rounded-full bg-${theme.primary}`}></span>
                      </button>
                    ))}
                  </div>
                )}
              </div>
              
              <button
                title="Save Data"
                onClick={saveToLocalStorage}
                className={`px-2 py-1 rounded ${isSaving ? `bg-${currentTheme.success} text-${currentTheme.buttonText}` : `bg-${currentTheme.cardBackground} text-${currentTheme.text}`} hover:bg-${currentTheme.background} border border-${currentTheme.border} text-sm flex items-center`}
              >
                <FaSave className={`mr-1 ${isSaving ? 'animate-pulse' : ''}`} />
                {isSaving ? 'Saving...' : 'Save'}
              </button>
              
              <div className="relative" id="export-dropdown">
                <button
                  title="Export Data"
                  onClick={() => setShowExportDropdown(!showExportDropdown)}
                  className={`px-2 py-1 rounded bg-${currentTheme.cardBackground} hover:bg-${currentTheme.background} text-${currentTheme.text} border border-${currentTheme.border} text-sm flex items-center`}
                >
                  <FaDownload className="mr-1" /> Export
                  <FaChevronDown size={8} className="ml-1" />
                </button>
                
                {showExportDropdown && (
                  <div className={`absolute right-0 mt-1 w-48 bg-${currentTheme.cardBackground} rounded shadow-lg z-20 py-1 border border-${currentTheme.border}`}>
                    <h3 className={`px-3 py-1 text-xs text-${currentTheme.accent} font-semibold border-b border-${currentTheme.border}`}>
                      Export Options
                    </h3>
                    
                    {/* JSON option */}
                    <button
                      className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                      onClick={() => {
                        exportData('json');
                        setShowExportDropdown(false);
                      }}
                    >
                      <span className="mr-2">📄</span> Complete Backup (JSON)
                    </button>
                    
                    {/* Excel-ready options */}
                    <div className={`border-t border-${currentTheme.border} mt-1 pt-1`}>
                      <p className={`px-3 py-1 text-xs text-${currentTheme.text} opacity-70`}>Excel-Ready (CSV):</p>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-all');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.success}`} /> All Data
                      </button>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-inventory');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.primary}`} /> Inventory Only
                      </button>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-transactions');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.accent}`} /> Transactions Only
                      </button>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-receipts');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.secondary}`} /> Receipts Only
                      </button>
                      
                      <button
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-${currentTheme.background} text-${currentTheme.text} flex items-center`}
                        onClick={() => {
                          exportData('csv-customers');
                          setShowExportDropdown(false);
                        }}
                      >
                        <FaFileExcel className={`mr-2 text-${currentTheme.warning}`} /> Customers Only
                      </button>
                    </div>
                  </div>
                )}
              </div>
              
              <label className={`px-2 py-1 rounded bg-${currentTheme.cardBackground} hover:bg-${currentTheme.background} text-${currentTheme.text} border border-${currentTheme.border} text-sm flex items-center cursor-pointer`}>
                <FaUpload className="mr-1" /> Import
                <input 
                  type="file"
                  accept=".json"
                  onChange={importData}
                  className="hidden"
                />
              </label>
            </div>
            
            {/* Currency Selector */}
            <div className="relative" id="currency-dropdown">
              <button 
                className={`flex items-center bg-${currentTheme.cardBackground} hover:bg-${currentTheme.background} text-${currentTheme.text} px-3 py-2 rounded transition-all duration-200 border border-${currentTheme.border} text-sm`}
                onClick={() => setShowCurrencyDropdown(!showCurrencyDropdown)}
              >
                <FaDollarSign className={`mr-1 text-${currentTheme.accent}`} />
                <span className="mr-1">{selectedCurrency.code}</span>
                <FaChevronDown size={12} className={`transform transition-transform duration-200 ${showCurrencyDropdown ? 'rotate-180' : ''}`} />
              </button>
              
              {showCurrencyDropdown && (
                <div className={`absolute right-0 mt-2 w-48 bg-${currentTheme.cardBackground} rounded-md shadow-lg z-10 py-1 border border-${currentTheme.border} overflow-hidden animate-fadeIn`}>
                  {currencies.map((currency) => (
                    <button
                      key={currency.code}
                      className={`flex items-center justify-between w-full text-left px-4 py-2 text-sm hover:bg-${currentTheme.background} transition-colors duration-150 ${
                        currency.code === selectedCurrency.code ? `bg-${currentTheme.background} text-${currentTheme.accent}` : `text-${currentTheme.text}`
                      }`}
                      onClick={() => {
                        setSelectedCurrency(currency);
                        setShowUsdPrices(currency.code === "USD"); // Only show raw USD prices for USD
                        setShowCurrencyDropdown(false);
                      }}
                    >
                      <span>{currency.name}</span>
                      <span className="text-gray-400 font-medium">{currency.symbol}</span>
                    </button>
                  ))}
                  <div className={`px-4 py-2 border-t border-${currentTheme.border} mt-1`}>
                    <label className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={showUsdPrices}
                        onChange={(e) => setShowUsdPrices(e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className={`relative w-10 h-5 bg-${currentTheme.border} peer-checked:bg-${currentTheme.primary} rounded-full peer-focus:outline-none transition-colors duration-200`}>
                        <div className={`absolute left-0.5 top-0.5 bg-white w-4 h-4 rounded-full transition-transform duration-200 ${showUsdPrices ? 'translate-x-0' : 'translate-x-5'}`}></div>
                      </div>
                      <span className="ml-2 text-xs">
                        {showUsdPrices ? 'Show USD values' : 'Show converted values'}
                      </span>
                    </label>
                  </div>
                </div>
              )}
            </div>

            <div className="relative w-full sm:w-auto">
              <FaSearch className={`absolute left-3 top-3 ${searchQuery ? `text-${currentTheme.accent}` : 'text-gray-400'}`} />
              <input
                type="text"
                placeholder="Search..."
                className={`pl-10 pr-10 py-2 rounded-md bg-${currentTheme.cardBackground} text-${currentTheme.text} placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-${currentTheme.primary} border ${searchQuery ? `border-${currentTheme.accent}` : `border-${currentTheme.border}`} w-full sm:w-48 text-sm`}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              {searchQuery && (
                <button
                  className={`absolute right-2 top-2 text-${currentTheme.text} hover:text-${currentTheme.accent} rounded p-1`}
                  onClick={() => setSearchQuery('')}
                  title="Clear search"
                >
                  <FaTimes size={16} />
                </button>
              )}
            </div>
          </div>
        </div>
        
        {/* Data status indicator */}
        <div className={`bg-${currentTheme.background} text-xs text-gray-400 px-4 py-1 flex justify-between`}>
          <div>
            {lastSaved ? (
              <span>Last saved: {lastSaved.toLocaleTimeString()}</span>
            ) : (
              <span>Not saved yet</span>
            )}
          </div>
          <div>
            {dataChanged && <span className="text-amber-400">Unsaved changes</span>}
          </div>
        </div>
      </header>

      {/* Main Content - wrap in AnimatePresence */}
      <AnimatePresence mode="wait">
        <motion.div 
          key={activeTab}
          initial="hidden"
          animate="visible"
          exit="exit"
          variants={fadeIn}
          className="container mx-auto px-4 py-8 flex flex-col lg:flex-row"
        >
          {/* Sidebar Navigation - animate it */}
          <motion.aside 
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ type: "spring", stiffness: 300, damping: 24 }}
            className={`w-full lg:w-64 bg-${currentTheme.cardBackground} rounded-lg shadow-md p-4 mb-6 lg:mb-0 lg:mr-8 border border-${currentTheme.border}`}
          >
            <nav>
              <ul className="space-y-2">
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "dashboard" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("dashboard")}
                  >
                    <FaHome className="mr-3" />
                    <span>Dashboard</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "inventory" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("inventory")}
                  >
                    <FaBoxOpen className="mr-3" />
                    <span>Inventory</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "transactions" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("transactions")}
                  >
                    <FaBook className="mr-3" />
                    <span>Transactions</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "receipts" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("receipts")}
                  >
                    <FaBook className="mr-3" />
                    <span>Receipts</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "categories" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("categories")}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                    <span>Categories</span>
                  </button>
                </li>
                <li>
                  <button
                    className={`w-full flex items-center p-3 rounded-md text-sm ${
                      activeTab === "customers" ? `bg-${currentTheme.primary}/50 text-${currentTheme.accent}` : `hover:bg-${currentTheme.background} text-gray-300`
                    }`}
                    onClick={() => setActiveTab("customers")}
                  >
                    <FaUsers className="mr-3" />
                    <span>Customers</span>
                  </button>
                </li>
              </ul>
            </nav>
          </motion.aside>

          {/* Main Content Area */}
          <motion.div 
            variants={slideUp}
            className={`flex-1 bg-${currentTheme.cardBackground} rounded-lg shadow-md p-6 border border-${currentTheme.border}`}
          >
            {/* Dashboard Tab */}
            {activeTab === "dashboard" && (
              <motion.div 
                variants={fadeIn} 
                className="space-y-6"
              >
                <h2 className={`text-2xl font-bold mb-4 flex items-center text-${currentTheme.text}`}>
                  <FaChartLine className={`mr-2 text-${currentTheme.accent}`} />
                  Dashboard Overview
                </h2>
              
                {/* Summary Cards with staggered animation */}
                <motion.div 
                  variants={staggerContainer}
                  initial="hidden"
                  animate="visible"
                  className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6"
                >
                  <motion.div
                    variants={cardVariant}
                    whileHover="hover"
                    className={`bg-${currentTheme.background} rounded-lg shadow-md p-6 border-l-4 border-${currentTheme.primary}`}
                  >
                    <h3 className="text-gray-400 text-sm">Inventory Value</h3>
                    <motion.p 
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      transition={{ delay: 0.2, duration: 0.3 }}
                      className={`text-2xl font-bold text-${currentTheme.text}`}
                    >
                      {formatCurrency(totalInventoryValue)}
                    </motion.p>
                  </motion.div>
                  
                  <motion.div
                    variants={cardVariant}
                    whileHover="hover"
                    className={`bg-${currentTheme.background} rounded-lg shadow-md p-6 border-l-4 border-${currentTheme.success}`}
                  >
                    <h3 className="text-gray-400 text-sm">Total Sales</h3>
                    <motion.p 
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      transition={{ delay: 0.2, duration: 0.3 }}
                      className={`text-2xl font-bold text-${currentTheme.text}`}
                    >
                      {formatCurrency(totalSalesValue)}
                    </motion.p>
                  </motion.div>
                  
                  <motion.div
                    variants={cardVariant}
                    whileHover="hover"
                    className={`bg-${currentTheme.background} rounded-lg shadow-md p-6 border-l-4 border-${currentTheme.danger}`}
                  >
                    <h3 className="text-gray-400 text-sm">Total Expenses</h3>
                    <motion.p 
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      transition={{ delay: 0.2, duration: 0.3 }}
                      className={`text-2xl font-bold text-${currentTheme.text}`}
                    >
                      {formatCurrency(totalExpenses)}
                    </motion.p>
                  </motion.div>
                  
                  <motion.div
                    variants={cardVariant}
                    whileHover="hover"
                    className={`bg-${currentTheme.background} rounded-lg shadow-md p-6 border-l-4 border-${currentTheme.secondary}`}
                  >
                    <h3 className="text-gray-400 text-sm">Profit</h3>
                    <motion.p 
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      transition={{ delay: 0.2, duration: 0.3 }}
                      className={`text-2xl font-bold ${profit >= 0 ? "text-emerald-400" : "text-rose-400"}`}
                    >
                      {formatCurrency(profit)}
                    </motion.p>
                  </motion.div>
                </motion.div>
              
                {/* Recent Activity */}
                <div>
                  <h3 className={`text-xl font-semibold mb-4 text-${currentTheme.text} border-b border-${currentTheme.border} pb-2`}>Recent Activity</h3>
                  {filteredTransactions.length === 0 ? (
                    <p className="text-gray-400">
                      {searchQuery ? "No matching transactions found." : "No transactions recorded yet."}
                    </p>
                  ) : (
                    <div className={`overflow-x-auto rounded-lg border border-${currentTheme.border}`}>
                      <table className="w-full text-left">
                        <thead>
                          <tr className={`bg-${currentTheme.background}`}>
                            <th className="p-4 text-gray-400 font-semibold">Date</th>
                            <th className="p-4 text-gray-400 font-semibold">Description</th>
                            <th className="p-4 text-gray-400 font-semibold">Category</th>
                            <th className="p-4 text-gray-400 font-semibold">Amount</th>
                          </tr>
                        </thead>
                        <motion.tbody
                          variants={staggerContainer}
                          initial="hidden"
                          animate="visible"
                        >
                          {filteredTransactions.slice(0, 5).map((transaction) => (
                            <motion.tr 
                              key={transaction.id} 
                              variants={tableRowVariant}
                              className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/50`}
                            >
                              <td className="p-4 text-gray-300">{transaction.date.toLocaleDateString()}</td>
                              <td className="p-4 text-gray-300">{transaction.description}</td>
                              <td className="p-4 text-gray-300">{transaction.category}</td>
                              <td className={`p-4 ${transaction.type === "income" ? "text-emerald-400" : "text-rose-400"}`}>
                                {transaction.type === "income" ? "+" : "-"}{formatCurrency(transaction.amount)}
                              </td>
                            </motion.tr>
                          ))}
                        </motion.tbody>
                      </table>
                    </div>
                  )}
                </div>
              </motion.div>
            )}

            {/* Inventory tab */}
            {activeTab === "inventory" && (
              <motion.div variants={fadeIn}>
                <div className={`flex justify-between items-center mb-6 border-b border-${currentTheme.border} pb-3`}>
                  <div>
                    <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Inventory Management</h2>
                    {searchQuery && (
                      <p className={`text-sm text-${currentTheme.accent} mt-1`}>
                        Showing {searchStats.inventory}
                      </p>
                    )}
                  </div>
                  <button 
                    className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
                    onClick={() => {
                      setEditingInventoryItem(null);
                      resetInventoryForm();
                      setShowInventoryModal(true);
                    }}
                  >
                    <FaPlus className="mr-2" /> Add Item
                  </button>
                </div>
                
                {filteredInventory.length === 0 ? (
                  <motion.div 
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
                  >
                    {searchQuery ? (
                      <>
                        <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching inventory items</h3>
                        <p className="text-gray-400 mt-2">Try different search terms</p>
                      </>
                    ) : (
                      <>
                        <FaBoxOpen className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No inventory items yet</h3>
                        <p className="text-gray-400 mt-2">Add your first inventory item to get started</p>
                      </>
                    )}
                  </motion.div>
                ) : (
                  <div className={`overflow-x-auto rounded-lg border border-${currentTheme.border}`}>
                    <table className="w-full text-left">
                      <thead>
                        <tr className={`bg-${currentTheme.background}`}>
                          <th className="p-4 text-gray-400 font-semibold">Item Name</th>
                          <th className="p-4 text-gray-400 font-semibold">SKU</th>
                          <th className="p-4 text-gray-400 font-semibold">Category</th>
                          <th className="p-4 text-gray-400 font-semibold">Quantity</th>
                          <th className="p-4 text-gray-400 font-semibold">Cost Price</th>
                          <th className="p-4 text-gray-400 font-semibold">Selling Price</th>
                          <th className="p-4 text-gray-400 font-semibold">Actions</th>
                        </tr>
                      </thead>
                      <motion.tbody
                        variants={staggerContainer}
                        initial="hidden"
                        animate="visible"
                      >
                        {filteredInventory.map((item) => (
                          <motion.tr 
                            key={item.id} 
                            variants={tableRowVariant}
                            className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/50`}
                          >
                            <td className={`p-4 text-${currentTheme.text}`}>{item.name}</td>
                            <td className="p-4 text-gray-400">{item.sku}</td>
                            <td className="p-4">
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                // Find matching category to apply its color
                                (() => {
                                  const category = categories.find(c => c.id === item.category);
                                  return category 
                                    ? `bg-${category.color}/20 text-${category.color} border border-${category.color}/30` 
                                    : `bg-${currentTheme.primary}/20 text-${currentTheme.accent} border border-${currentTheme.primary}/30`;
                                })()
                              }`}>
                                {/* Display category name instead of ID */}
                                {(() => {
                                  const category = categories.find(c => c.id === item.category);
                                  return category ? category.name : item.category;
                                })()}
                              </span>
                            </td>
                            <td className={`p-4 text-${currentTheme.text}`}>{item.quantity}</td>
                            <td className={`p-4 text-${currentTheme.text}`}>{formatCurrency(item.costPrice)}</td>
                            <td className={`p-4 text-${currentTheme.text}`}>{formatCurrency(item.sellingPrice)}</td>
                            <td className="p-4 space-x-2">
                              <button 
                                className={`text-${currentTheme.accent} hover:text-${currentTheme.primary} text-sm`}
                                onClick={() => setEditingInventoryItem(item)}
                              >
                                Edit
                              </button>
                              <button 
                                className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 text-sm`}
                                onClick={() => deleteInventoryItem(item.id)}
                              >
                                Delete
                              </button>
                            </td>
                          </motion.tr>
                        ))}
                      </motion.tbody>
                    </table>
                  </div>
                )}
              </motion.div>
            )}

            {/* Transaction tab */}
            {activeTab === "transactions" && (
              <motion.div variants={fadeIn}>
                <div className={`flex justify-between items-center mb-6 border-b border-${currentTheme.border} pb-3`}>
                  <div>
                    <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Financial Transactions</h2>
                    {searchQuery && (
                      <p className={`text-sm text-${currentTheme.accent} mt-1`}>
                        Showing {searchStats.transactions}
                      </p>
                    )}
                  </div>
                  <button 
                    className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
                    onClick={() => {
                      setEditingTransaction(null);
                      resetTransactionForm();
                      setShowTransactionModal(true);
                    }}
                  >
                    <FaPlus className="mr-2" /> Add Transaction
                  </button>
                </div>
                
                {filteredTransactions.length === 0 ? (
                  <motion.div 
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
                  >
                    {searchQuery ? (
                      <>
                        <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching transactions</h3>
                        <p className="text-gray-400 mt-2">Try different search terms</p>
                      </>
                    ) : (
                      <>
                        <FaBook className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No transactions recorded</h3>
                        <p className="text-gray-400 mt-2">Add your first transaction to start tracking finances</p>
                      </>
                    )}
                  </motion.div>
                ) : (
                  <div className={`overflow-x-auto rounded-lg border border-${currentTheme.border}`}>
                    <table className="w-full text-left">
                      <thead>
                        <tr className={`bg-${currentTheme.background}`}>
                          <th className="p-4 text-gray-400 font-semibold">Date</th>
                          <th className="p-4 text-gray-400 font-semibold">Description</th>
                          <th className="p-4 text-gray-400 font-semibold">Category</th>
                          <th className="p-4 text-gray-400 font-semibold">Type</th>
                          <th className="p-4 text-gray-400 font-semibold">Amount</th>
                          <th className="p-4 text-gray-400 font-semibold">Actions</th>
                        </tr>
                      </thead>
                      <motion.tbody
                        variants={staggerContainer}
                        initial="hidden"
                        animate="visible"
                      >
                        {filteredTransactions.map((transaction) => (
                          <motion.tr 
                            key={transaction.id} 
                            variants={tableRowVariant}
                            className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/50`}
                          >
                            <td className={`p-4 text-${currentTheme.text}`}>{transaction.date.toLocaleDateString()}</td>
                            <td className={`p-4 text-${currentTheme.text}`}>{transaction.description}</td>
                            <td className="p-4">
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                // Find matching category to apply its color
                                (() => {
                                  const category = categories.find(c => c.id === transaction.category);
                                  return category 
                                    ? `bg-${category.color}/20 text-${category.color} border border-${category.color}/30` 
                                    : transaction.type === "income"
                                      ? `bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30`
                                      : `bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`;
                                })()
                              }`}>
                                {/* Display category name instead of ID */}
                                {(() => {
                                  const category = categories.find(c => c.id === transaction.category);
                                  return category ? category.name : transaction.category;
                                })()}
                              </span>
                            </td>
                            <td className="p-4">
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                transaction.type === "income" ? `bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30` : `bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`
                              }`}>
                                {transaction.type}
                              </span>
                            </td>
                            <td className={`p-4 ${transaction.type === "income" ? `text-${currentTheme.success}` : `text-${currentTheme.danger}`}`}>
                              {formatCurrency(transaction.amount)}
                            </td>
                            <td className="p-4 space-x-2">
                              <button 
                                className={`text-${currentTheme.accent} hover:text-${currentTheme.primary} text-sm`}
                                onClick={() => setEditingTransaction(transaction)}
                              >
                                Edit
                              </button>
                              <button 
                                className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 text-sm`}
                                onClick={() => deleteTransaction(transaction.id)}
                              >
                                Delete
                              </button>
                            </td>
                          </motion.tr>
                        ))}
                      </motion.tbody>
                    </table>
                  </div>
                )}
              </motion.div>
            )}

            {/* Receipts tab */}
            {activeTab === "receipts" && (
              <motion.div variants={fadeIn}>
                <div className={`flex justify-between items-center mb-6 border-b border-${currentTheme.border} pb-3`}>
                  <div>
                    <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Receipts & Transactions</h2>
                    {searchQuery && (
                      <p className={`text-sm text-${currentTheme.accent} mt-1`}>
                        Showing {searchStats.receipts}
                      </p>
                    )}
                  </div>
                  <button
                    className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
                    onClick={() => {
                      setEditingReceipt(null);
                      resetReceiptForm();
                      setShowReceiptModal(true);
                    }}
                  >
                    <FaPlus className="mr-2" /> Add Receipt
                  </button>
                </div>

                {filteredReceipts.length === 0 ? (
                  <motion.div 
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
                  >
                    {searchQuery ? (
                      <>
                        <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching receipts</h3>
                        <p className="text-gray-400 mt-2">Try different search terms</p>
                      </>
                    ) : (
                      <>
                        <FaBook className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No receipts recorded</h3>
                        <p className="text-gray-400 mt-2">Add your first receipt to start tracking</p>
                      </>
                    )}
                  </motion.div>
                ) : (
                  <div className={`overflow-x-auto rounded-lg border border-${currentTheme.border}`}>
                    <table className="w-full text-left">
                      <thead>
                        <tr className={`bg-${currentTheme.background}`}>
                          <th className="p-4 text-gray-400 font-semibold">Date</th>
                          <th className="p-4 text-gray-400 font-semibold">Type</th>
                          <th className="p-4 text-gray-400 font-semibold">Description</th>
                          <th className="p-4 text-gray-400 font-semibold">Customer/Vendor</th>
                          <th className="p-4 text-gray-400 font-semibold">Total Amount</th>
                          <th className="p-4 text-gray-400 font-semibold">Actions</th>
                        </tr>
                      </thead>
                      <motion.tbody
                        variants={staggerContainer}
                        initial="hidden"
                        animate="visible"
                      >
                        {filteredReceipts.map((receipt) => (
                          <motion.tr 
                            key={receipt.id} 
                            variants={tableRowVariant}
                            className={`border-b border-${currentTheme.border} hover:bg-${currentTheme.background}/50`}
                          >
                            <td className={`p-4 text-${currentTheme.text}`}>{receipt.date.toLocaleDateString()}</td>
                            <td className="p-4">
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                receipt.type === "income" 
                                  ? `bg-${currentTheme.success}/20 text-${currentTheme.success} border border-${currentTheme.success}/30` 
                                  : `bg-${currentTheme.danger}/20 text-${currentTheme.danger} border border-${currentTheme.danger}/30`
                              }`}>
                                {receipt.type === "income" ? "Income" : "Expense"}
                              </span>
                            </td>
                            <td className={`p-4 text-${currentTheme.text}`}>
                              {receipt.description || (receipt.items.length > 0 
                                ? `Sale (${receipt.items.length} items)` 
                                : receipt.type === "income" ? "Income" : "Expense")}
                            </td>
                            <td className={`p-4 text-${currentTheme.text}`}>{receipt.customerName}</td>
                            <td className={`p-4 ${receipt.type === "income" ? `text-${currentTheme.success}` : `text-${currentTheme.danger}`}`}>
                              {formatCurrency(receipt.totalAmount)}
                            </td>
                            <td className="p-4 space-x-2">
                              <button
                                className={`text-${currentTheme.primary} hover:text-${currentTheme.accent} text-sm`}
                                onClick={() => viewReceipt(receipt)}
                                title="View receipt"
                              >
                                <FaEye />
                              </button>
                              
                              {/* Only show edit button for manually created receipts (not auto-generated from transactions) */}
                              {!receipt.isAutoGenerated && (
                                <button
                                  className={`text-${currentTheme.accent} hover:text-${currentTheme.primary} text-sm`}
                                  onClick={() => setEditingReceipt(receipt)}
                                  title="Edit receipt"
                                >
                                  Edit
                                </button>
                              )}
                              
                              {/* Allow deleting real receipts but not auto-generated ones */}
                              {!receipt.isAutoGenerated && (
                                <button
                                  className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 text-sm`}
                                  onClick={() => deleteReceipt(receipt.id)}
                                  title="Delete receipt"
                                >
                                  Delete
                                </button>
                              )}
                            </td>
                          </motion.tr>
                        ))}
                      </motion.tbody>
                    </table>
                  </div>
                )}
              </motion.div>
            )}

            {/* Categories Tab */}
            {activeTab === "categories" && (
              <motion.div variants={fadeIn}>
                <div className={`flex justify-between items-center mb-6 border-b border-${currentTheme.border} pb-3`}>
                  <div>
                    <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Category Management</h2>
                    {searchQuery && (
                      <p className={`text-sm text-${currentTheme.accent} mt-1`}>
                        Showing {searchStats.categories}
                      </p>
                    )}
                  </div>
                  <button
                    className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
                    onClick={() => {
                      setEditingCategory(null);
                      resetCategoryForm();
                      setShowCategoryModal(true);
                    }}
                  >
                    <FaPlus className="mr-2" /> Add Category
                  </button>
                </div>

                {filteredCategories.length === 0 ? (
                  <motion.div 
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
                  >
                    {searchQuery ? (
                      <>
                        <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching categories</h3>
                        <p className="text-gray-400 mt-2">Try different search terms</p>
                      </>
                    ) : (
                      <>
                        <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-16 w-16 text-gray-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                        </svg>
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No categories defined</h3>
                        <p className="text-gray-400 mt-2">Add categories to organize your inventory and transactions</p>
                      </>
                    )}
                  </motion.div>
                ) : (
                  <motion.div 
                    variants={staggerContainer}
                    initial="hidden"
                    animate="visible"
                    className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"
                  >
                    {filteredCategories.map(category => (
                      <motion.div 
                        key={category.id}
                        variants={cardVariant}
                        whileHover="hover"
                        className={`bg-${currentTheme.background} rounded-lg border border-${currentTheme.border} overflow-hidden shadow-sm`}
                      >
                        <div className={`bg-${category.color} h-2 w-full`}></div>
                        <div className="p-4">
                          <div className="flex justify-between items-start">
                            <h3 className={`text-lg font-medium text-${currentTheme.text}`}>{category.name}</h3>
                            <span className={`px-2 py-1 bg-${currentTheme.background} text-xs rounded-full border border-${currentTheme.border} text-gray-400`}>
                              {category.type === "both" ? "Inventory & Transactions" : 
                               category.type === "inventory" ? "Inventory Only" : "Transactions Only"}
                            </span>
                          </div>
                          <p className="mt-2 text-gray-400 text-sm">{category.description}</p>
                          <div className="mt-4 flex justify-end space-x-2">
                            <button 
                              className={`text-${currentTheme.accent} hover:text-${currentTheme.primary} text-sm`}
                              onClick={() => setEditingCategory(category)}
                            >
                              Edit
                            </button>
                            <button 
                              className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 text-sm`}
                              onClick={() => deleteCategory(category.id)}
                            >
                              Delete
                            </button>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </motion.div>
                )}
              </motion.div>
            )}

            {/* Customers Tab */}
            {activeTab === "customers" && (
              <motion.div variants={fadeIn}>
                <div className={`flex justify-between items-center mb-6 border-b border-${currentTheme.border} pb-3`}>
                  <div>
                    <h2 className={`text-2xl font-bold text-${currentTheme.text}`}>Customer Management</h2>
                    {searchQuery && (
                      <p className={`text-sm text-${currentTheme.accent} mt-1`}>
                        Showing {searchStats.customers}
                      </p>
                    )}
                  </div>
                  <button
                    className={`flex items-center bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} px-4 py-2 rounded-md shadow text-sm`}
                    onClick={() => {
                      setEditingCustomer(null);
                      resetCustomerForm();
                      setShowCustomerModal(true);
                    }}
                  >
                    <FaPlus className="mr-2" /> Add Customer
                  </button>
                </div>

                {filteredCustomers.length === 0 ? (
                  <motion.div 
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    className={`text-center py-12 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}
                  >
                    {searchQuery ? (
                      <>
                        <FaSearch className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No matching customers</h3>
                        <p className="text-gray-400 mt-2">Try different search terms</p>
                      </>
                    ) : (
                      <>
                        <FaUsers className="mx-auto text-4xl text-gray-500 mb-4" />
                        <h3 className={`text-xl font-medium text-${currentTheme.text}`}>No customers yet</h3>
                        <p className="text-gray-400 mt-2">Add your first customer to get started</p>
                      </>
                    )}
                  </motion.div>
                ) : (
                  <div className={`grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3`}>
                    {filteredCustomers.map(customer => (
                      <motion.div
                        key={customer.id}
                        variants={cardVariant}
                        whileHover="hover"
                        className={`bg-${currentTheme.background} p-4 rounded-lg border border-${currentTheme.border} shadow-sm`}
                      >
                        <div className="flex justify-between items-start">
                          <h3 className={`text-lg font-medium text-${currentTheme.text}`}>{customer.name}</h3>
                          <div className="flex space-x-2">
                            <button
                              className={`p-1 text-${currentTheme.accent} hover:text-${currentTheme.primary} transition-colors duration-200`}
                              onClick={() => setEditingCustomer(customer)}
                              title="Edit customer"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                              </svg>
                            </button>
                            <button
                              className={`p-1 text-${currentTheme.danger} hover:text-${currentTheme.danger}/80 transition-colors duration-200`}
                              onClick={() => deleteCustomer(customer.id)}
                              title="Delete customer"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
                              </svg>
                            </button>
                          </div>
                        </div>
                        
                        <div className="mt-3 space-y-1 text-sm">
                          {customer.email && (
                            <p className="flex items-center text-gray-400">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a1 1 0 00-1-1H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                              </svg>
                              {customer.email}
                            </p>
                          )}
                          {customer.phone && (
                            <p className="flex items-center text-gray-400">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                              </svg>
                              {customer.phone}
                            </p>
                          )}
                          {customer.address && (
                            <p className="flex items-start text-gray-400">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                              </svg>
                              <span className="line-clamp-2">{customer.address}</span>
                            </p>
                          )}
                        </div>
                        
                        <div className={`mt-4 pt-3 border-t border-${currentTheme.border} flex justify-between items-center`}>
                          <span className={`text-xs text-gray-500`}>
                            Added: {customer.createdAt.toLocaleDateString()}
                          </span>
                          <span className={`text-xs bg-${currentTheme.primary}/20 text-${currentTheme.accent} px-2 py-1 rounded-full`}>
                            {customer.totalPurchases} purchases
                          </span>
                        </div>
                        
                        {customer.notes && (
                          <div className={`mt-3 p-2 bg-${currentTheme.background} border border-${currentTheme.border} rounded text-xs text-gray-400`}>
                            <p className="line-clamp-2">{customer.notes}</p>
                          </div>
                        )}
                      </motion.div>
                    ))}
                  </div>
                )}
              </motion.div>
            )}
          </motion.div>
        </motion.div>
      </AnimatePresence>

      {/* Modals - Animate them with Framer Motion */}
      
      {/* Inventory Modal */}
      <AnimatePresence>
        {showInventoryModal && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border}`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <FaBoxOpen className={`mr-2 text-${currentTheme.accent}`} />
                  {editingInventoryItem ? 'Edit Inventory Item' : 'Add Inventory Item'}
                </h3>
                <button 
                  onClick={() => {
                    setShowInventoryModal(false);
                    setEditingInventoryItem(null);
                  }}
                  className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                >
                  <FaTimes />
                </button>
              </div>
              
              <div className="px-6 py-4">
                <form onSubmit={(e) => { 
                  e.preventDefault(); 
                  editingInventoryItem ? updateInventoryItem() : addInventoryItem();
                }}>
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Item Name</label>
                    <input 
                      type="text" 
                      name="name"
                      value={inventoryFormData.name}
                      onChange={handleInventoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                      placeholder="Enter item name"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>SKU</label>
                    <input 
                      type="text" 
                      name="sku"
                      value={inventoryFormData.sku}
                      onChange={handleInventoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                      placeholder="Stock keeping unit"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Category</label>
                    <select 
                      name="category"
                      title="Item category"
                      value={inventoryFormData.category}
                      onChange={handleInventoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                    >
                      <option value="">Select a category</option>
                      {categories
                        .filter(cat => cat.type === "inventory" || cat.type === "both")
                        .map(category => (
                          <option key={category.id} value={category.id}>
                            {category.name}
                          </option>
                        ))
                      }
                    </select>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 mb-4">
                    <div>
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Quantity</label>
                      <input 
                        type="number" 
                        name="quantity"
                        title="Quantity"
                        value={inventoryFormData.quantity}
                        onChange={handleInventoryFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        min="0"
                        required
                      />
                    </div>
                    
                    <div>
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                        Cost <span className="text-gray-500 text-xs">({selectedCurrency.symbol})</span>
                      </label>
                      <input 
                        type="number" 
                        name="costPrice"
                        title="Cost Price"
                        value={inventoryFormData.costPrice}
                        onChange={handleInventoryFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        min="0"
                        step="0.01"
                        required
                      />
                    </div>
                    
                    <div>
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                        Price <span className="text-gray-500 text-xs">({selectedCurrency.symbol})</span>
                      </label>
                      <input 
                        type="number" 
                        name="sellingPrice"
                        title="Selling Price"
                        value={inventoryFormData.sellingPrice}
                        onChange={handleInventoryFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        min="0"
                        step="0.01"
                        required
                      />
                    </div>
                  </div>
                  
                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    <button 
                      type="button"
                      onClick={() => {
                        setShowInventoryModal(false);
                        setEditingInventoryItem(null);
                      }}
                      className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                    >
                      Cancel
                    </button>
                    <button 
                      type="submit"
                      className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaPlus className="mr-2 h-4 w-4" /> 
                      {editingInventoryItem ? 'Update Item' : 'Save Item'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Transaction Modal */}
      <AnimatePresence>
        {showTransactionModal && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border}`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <FaBook className={`mr-2 text-${currentTheme.accent}`} />
                  {editingTransaction ? 'Edit Transaction' : 'Add Transaction'}
                </h3>
                <button 
                  onClick={() => {
                    setShowTransactionModal(false);
                    setEditingTransaction(null);
                  }}
                  className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                >
                  <FaTimes />
                </button>
              </div>
              
              <div className="px-6 py-4">
                <form onSubmit={(e) => { 
                  e.preventDefault(); 
                  editingTransaction ? updateTransaction() : addTransaction();
                }}>
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Description</label>
                    <input 
                      type="text" 
                      name="description"
                      value={transactionFormData.description}
                      onChange={handleTransactionFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                      placeholder="Transaction description"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Type</label>
                    <div className="flex space-x-2 mb-2">
                      <button
                        type="button"
                        className={`flex-1 py-3 px-4 rounded-lg font-medium border ${
                          transactionFormData.type === "income" 
                            ? `bg-${currentTheme.success}/30 text-${currentTheme.success} border-${currentTheme.success}/30`
                            : `bg-${currentTheme.background} text-${currentTheme.text} border-${currentTheme.border} hover:bg-${currentTheme.background}/80`
                        }`}
                        onClick={() => setTransactionFormData({...transactionFormData, type: "income"})}
                      >
                        Income
                      </button>
                      <button
                        type="button"
                        className={`flex-1 py-3 px-4 rounded-lg font-medium border ${
                          transactionFormData.type === "expense" 
                            ? `bg-${currentTheme.danger}/30 text-${currentTheme.danger} border-${currentTheme.danger}/30`
                            : `bg-${currentTheme.background} text-${currentTheme.text} border-${currentTheme.border} hover:bg-${currentTheme.background}/80`
                        }`}
                        onClick={() => setTransactionFormData({...transactionFormData, type: "expense"})}
                      >
                        Expense
                      </button>
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Category</label>
                    <select 
                      name="category"
                      title="Transaction category"
                      value={transactionFormData.category}
                      onChange={handleTransactionFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                    >
                      <option value="">Select a category</option>
                      {categories
                        .filter(cat => cat.type === "transaction" || cat.type === "both")
                        .map(category => (
                          <option key={category.id} value={category.id}>
                            {category.name}
                          </option>
                        ))
                      }
                    </select>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                        Amount <span className="text-gray-500 text-xs">({selectedCurrency.symbol})</span>
                      </label>
                      <input 
                        type="number" 
                        title="Transaction amount"
                        name="amount"
                        value={transactionFormData.amount}
                        onChange={handleTransactionFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        min="0"
                        step="0.01"
                        required
                      />
                    </div>
                    
                    <div>
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Date</label>
                      <input 
                        type="date" 
                        name="date"
                        title="Transaction date"
                        value={transactionFormData.date}
                        onChange={handleTransactionFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                        required
                      />
                    </div>
                  </div>
                  
                  {inventory.length > 0 && (
                    <div className="mb-4">
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Related Inventory Item (Optional)</label>
                      <select 
                        name="relatedInventoryId"
                        title="Related Inventory Item"
                        value={transactionFormData.relatedInventoryId || ""}
                        onChange={handleTransactionFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      >
                        <option value="">None</option>
                        {inventory.map(item => (
                          <option key={item.id} value={item.id}>{item.name}</option>
                        ))}
                      </select>
                    </div>
                  )}
                  
                  {/* Only show customer selection for income transactions */}
                  {transactionFormData.type === "income" && (
                    <div className="mb-4">
                      <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>
                        Associated Customer (Optional)
                      </label>
                      <select 
                        name="customerId"
                        title="Associated customer"
                        value={transactionFormData.customerId || ""}
                        onChange={handleTransactionFormChange}
                        className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      >
                        <option value="">None</option>
                        {customers.map(customer => (
                          <option key={customer.id} value={customer.id}>
                            {customer.name} {customer.phone ? `(${customer.phone})` : ""}
                          </option>
                        ))}
                      </select>
                    </div>
                  )}
                  
                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    <button 
                      type="button"
                      onClick={() => {
                        setShowTransactionModal(false);
                        setEditingTransaction(null);
                      }}
                      className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                    >
                      Cancel
                    </button>
                    <button 
                      type="submit"
                      className={`px-5 py-2.5 ${transactionFormData.type === "income" ? `bg-${currentTheme.success} hover:bg-${currentTheme.success}/80` : `bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80`} text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaPlus className="mr-2 h-4 w-4" /> 
                      {editingTransaction ? 'Update Transaction' : 'Save Transaction'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Receipt Modal */}
      <AnimatePresence>
        {showReceiptModal && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border}`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <FaBook className={`mr-2 text-${currentTheme.accent}`} />
                  {editingReceipt ? 'Edit Receipt' : 'Add Receipt'}
                </h3>
                <button
                  onClick={() => {
                    setShowReceiptModal(false);
                    setEditingReceipt(null);
                  }}
                  className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                >
                  <FaTimes />
                </button>
              </div>

              <div className="px-6 py-4">
                <form onSubmit={(e) => {
                  e.preventDefault();
                  editingReceipt ? updateReceipt() : addReceipt();
                }}>
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Date</label>
                    <input
                      type="date"
                      name="date"
                      title="Receipt date"
                      aria-label="Receipt date"
                      value={receiptFormData.date}
                      onChange={handleReceiptFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                    />
                  </div>

                  {/* Customer Selection Section */}
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Customer</label>
                    <select
                      name="customerSelect"
                      title="Select customer"
                      value={receiptFormData.isNewCustomer ? "new" : (receiptFormData.customerId || "")}
                      onChange={handleReceiptFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                    >
                      <option value="">-- Select Customer --</option>
                      {customers.map(customer => (
                        <option key={customer.id} value={customer.id}>
                          {customer.name} {customer.phone ? `(${customer.phone})` : ""}
                        </option>
                      ))}
                      <option value="new" className={`text-${currentTheme.accent} font-medium`}>+ Create New Customer</option>
                    </select>
                  </div>

                  {/* New Customer Form */}
                  {receiptFormData.isNewCustomer && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: "auto" }}
                      exit={{ opacity: 0, height: 0 }}
                      className={`mb-4 p-4 border border-${currentTheme.border} rounded-lg bg-${currentTheme.background}/50`}
                    >
                      <div className="flex items-center mb-3">
                        <FaUserPlus className={`mr-2 text-${currentTheme.accent}`} />
                        <h3 className={`text-sm font-medium text-${currentTheme.text}`}>New Customer Details</h3>
                      </div>
                      
                      <div className="mb-3">
                        <label className={`block text-xs text-gray-400 mb-1`}>Customer Name *</label>
                        <input
                          type="text"
                          name="customerName"
                          value={receiptFormData.customerName}
                          onChange={handleReceiptFormChange}
                          className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                          placeholder="Enter customer name"
                          required
                        />
                      </div>
                      
                      <div className="grid grid-cols-2 gap-3 mb-3">
                        <div>
                          <label className={`block text-xs text-gray-400 mb-1`}>Email</label>
                          <input
                            type="email"
                            name="newCustomer.email"
                            value={receiptFormData.newCustomerData?.email || ""}
                            onChange={handleReceiptFormChange}
                            className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                            placeholder="Email"
                          />
                        </div>
                        <div>
                          <label className={`block text-xs text-gray-400 mb-1`}>Phone</label>
                          <input
                            type="tel"
                            name="newCustomer.phone"
                            value={receiptFormData.newCustomerData?.phone || ""}
                            onChange={handleReceiptFormChange}
                            className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                            placeholder="Phone number"
                          />
                        </div>
                      </div>
                      
                      <div className="mb-3">
                        <label className={`block text-xs text-gray-400 mb-1`}>Address</label>
                        <input
                          type="text"
                          name="newCustomer.address"
                          value={receiptFormData.newCustomerData?.address || ""}
                          onChange={handleReceiptFormChange}
                          className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                          placeholder="Address"
                        />
                      </div>
                      
                      <div>
                        <label className={`block text-xs text-gray-400 mb-1`}>Notes</label>
                        <textarea
                          name="newCustomer.notes"
                          value={receiptFormData.newCustomerData?.notes || ""}
                          onChange={handleReceiptFormChange}
                          className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg text-sm`}
                          rows={2}
                          placeholder="Any additional notes"
                        />
                      </div>
                    </motion.div>
                  )}

                  {/* Rest of the receipt form */}
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Items</label>
                    
                    <div className={`bg-${currentTheme.background} rounded-lg border border-${currentTheme.border} p-4 mb-3`}>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="col-span-2">
                          <label className="block text-xs text-gray-400 mb-1">Select Item</label>
                          <select
                            title="Select inventory item"
                            aria-label="Select inventory item"
                            className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                            value=""
                            onChange={(e) => {
                              if (e.target.value) {
                                const selectedItem = inventory.find(item => item.id === e.target.value);
                                if (selectedItem) {
                                  const receiptItem = {
                                    id: selectedItem.id,
                                    name: selectedItem.name,
                                    quantity: 1,
                                    price: selectedItem.sellingPrice
                                  };
                                  setReceiptFormData({
                                    ...receiptFormData,
                                    items: [...receiptFormData.items, receiptItem],
                                    totalAmount: receiptFormData.totalAmount + selectedItem.sellingPrice
                                  });
                                  e.target.value = ""; // Reset select
                                }
                              }
                            }}
                          >
                            <option value="">-- Select an item --</option>
                            {inventory
                              .filter(item => item.quantity > 0)
                              .filter(item => {
                                const existingItem = receiptFormData.items.find((receiptItem) => receiptItem.id === item.id);
                                
                                // If editing, we need to consider the original receipt quantities
                                if (editingReceipt && existingItem) {
                                  const originalItem = editingReceipt.items.find((origItem) => origItem.id === item.id);
                                  if (originalItem) {
                                    // Only filter out if quantity in form exceeds available + original
                                    return existingItem.quantity < item.quantity + originalItem.quantity;
                                  }
                                }
                                
                                // For new receipts, just check if there's still available inventory
                                return !existingItem || existingItem.quantity < item.quantity;
                              })
                              .map((item) => {
                                // Calculate available quantity
                                const existingItem = receiptFormData.items.find((receiptItem) => receiptItem.id === item.id);
                                let availableQty = item.quantity;
                                
                                if (existingItem) {
                                  if (editingReceipt) {
                                    const originalItem = editingReceipt.items.find((origItem) => origItem.id === item.id);
                                    if (originalItem) {
                                      availableQty = item.quantity + originalItem.quantity - existingItem.quantity;
                                    } else {
                                      availableQty = item.quantity - existingItem.quantity;
                                    }
                                  } else {
                                    availableQty = item.quantity - existingItem.quantity;
                                  }
                                }
                                
                                return (
                                  <option key={item.id} value={item.id}>
                                    {item.name} - {formatCurrency(item.sellingPrice)} (Available: {availableQty})
                                  </option>
                                );
                              })}
                          </select>
                        </div>
                        
                        <div>
                          <label className="block text-xs text-gray-400 mb-1">Quantity</label>
                          <input
                            type="number"
                            className={`w-full p-2 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                            min="1"
                            placeholder="Quantity"
                            title="Item quantity"
                            aria-label="Item quantity"
                            disabled
                          />
                        </div>
                      </div>
                    </div>
                    
                    {/* Item List */}
                    {receiptFormData.items.length > 0 ? (
                      <div className={`bg-${currentTheme.background} rounded-lg border border-${currentTheme.border} overflow-hidden`}>
                        <table className="min-w-full divide-y divide-gray-700">
                          <thead>
                            <tr>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-400">Item</th>
                              <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Quantity</th>
                              <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Price</th>
                              <th className="px-3 py-2 text-right text-xs font-medium text-gray-400">Total</th>
                              <th className="px-3 py-2 text-xs font-medium text-gray-400"></th>
                            </tr>
                          </thead>
                          <motion.tbody
                            variants={staggerContainer}
                            initial="hidden"
                            animate="visible"
                            className={`divide-y divide-${currentTheme.border}`}
                          >
                            {receiptFormData.items.map((item, index) => (
                              <motion.tr key={`${item.id}-${index}`} variants={tableRowVariant}>
                                <td className={`px-3 py-2 text-sm text-${currentTheme.text}`}>{item.name}</td>
                                <td className="px-3 py-2 text-right">
                                  <input
                                    type="number"
                                    title={`Quantity for ${item.name}`}
                                    placeholder="Qty"
                                    aria-label={`Quantity for ${item.name}`}
                                    className={`w-16 p-1 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded text-sm text-center`}
                                    min="1"
                                    value={item.quantity}
                                    max={(() => {
                                      const inventoryItem = inventory.find((invItem) => invItem.id === item.id);
                                      if (!inventoryItem) return 1;
                                      
                                      // If editing, we need to account for the original quantity
                                      if (editingReceipt) {
                                        const originalItem = editingReceipt.items.find((origItem) => origItem.id === item.id);
                                        if (originalItem) {
                                          return originalItem.quantity + inventoryItem.quantity;
                                        }
                                      }
                                      
                                      return inventoryItem.quantity;
                                    })()}
                                    onChange={(e) => {
                                      const inventoryItem = inventory.find((invItem) => invItem.id === item.id);
                                      if (!inventoryItem) return;
                                      
                                      let maxAllowed = inventoryItem.quantity;
                                      
                                      // If editing, we need to account for the original quantity
                                      if (editingReceipt) {
                                        const originalItem = editingReceipt.items.find((origItem) => origItem.id === item.id);
                                        if (originalItem) {
                                          maxAllowed += originalItem.quantity;
                                        }
                                      }
                                      
                                      // Parse and cap the new quantity
                                      const newValue = parseInt(e.target.value) || 1;
                                      const newQuantity = Math.min(newValue, maxAllowed);
                                      
                                      if (newValue > maxAllowed) {
                                        // Provide feedback that we've limited the quantity
                                        alert(`Maximum available quantity for ${item.name} is ${maxAllowed}`);
                                      }
                                      
                                      const newItems = [...receiptFormData.items];
                                      const oldTotal = item.quantity * item.price;
                                      const newTotal = newQuantity * item.price;
                                      
                                      newItems[index] = {
                                        ...item,
                                        quantity: newQuantity,
                                      };
                                      
                                      setReceiptFormData({
                                        ...receiptFormData,
                                        items: newItems,
                                        totalAmount: receiptFormData.totalAmount - oldTotal + newTotal,
                                      });
                                    }}
                                  />
                                </td>
                                <td className={`px-3 py-2 text-right text-sm text-${currentTheme.text}`}>{formatCurrency(item.price)}</td>
                                <td className={`px-3 py-2 text-right text-sm text-${currentTheme.success}`}>
                                  {formatCurrency(item.price * item.quantity)}
                                </td>
                                <td className="px-3 py-2 text-center">
                                  <button
                                    type="button"
                                    title="Remove item"
                                    aria-label="Remove item from receipt"
                                    className={`text-${currentTheme.danger} hover:text-${currentTheme.danger}/80`}
                                    onClick={() => {
                                      const newItems = receiptFormData.items.filter((_, i) => i !== index);
                                      const itemTotal = item.price * item.quantity;
                                      
                                      setReceiptFormData({
                                        ...receiptFormData,
                                        items: newItems,
                                        totalAmount: receiptFormData.totalAmount - itemTotal,
                                      });
                                    }}
                                  >
                                    <FaTimes />
                                  </button>
                                </td>
                              </motion.tr>
                            ))}
                          </motion.tbody>
                          <tfoot>
                            <tr className={`border-t-2 border-${currentTheme.primary}/30`}>
                              <td className={`px-3 py-2 text-sm font-medium text-${currentTheme.text}`} colSpan={3}>
                                Total
                              </td>
                              <td className={`px-3 py-2 text-right text-sm font-bold text-${currentTheme.success}`}>
                                {formatCurrency(receiptFormData.totalAmount)}
                              </td>
                              <td></td>
                            </tr>
                          </tfoot>
                        </table>
                      </div>
                    ) : (
                      <div className={`text-center py-4 bg-${currentTheme.background} rounded-lg border border-${currentTheme.border}`}>
                        <p className="text-gray-400 text-sm">No items added to receipt</p>
                      </div>
                    )}
                  </div>

                  {/* Remove the manual total amount input field since we're calculating it automatically */}
                  {/* Instead, add this hidden field to keep the form working */}
                  <input
                    type="hidden"
                    name="totalAmount"
                    value={receiptFormData.totalAmount}
                    title="Receipt Total Amount"
                    placeholder="Receipt Total Amount"
                  />

                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    <button
                      type="button"
                      onClick={() => {
                        setShowReceiptModal(false);
                        setEditingReceipt(null);
                      }}
                      className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaPlus className="mr-2 h-4 w-4" />
                      {editingReceipt ? 'Update Receipt' : 'Save Receipt'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Category Modal */}
      <AnimatePresence>
        {showCategoryModal && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border}`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-2 text-${currentTheme.accent}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  {editingCategory ? 'Edit Category' : 'Add Category'}
                </h3>
                <button 
                  onClick={() => {
                    setShowCategoryModal(false);
                    setEditingCategory(null);
                  }}
                  className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                >
                  <FaTimes />
                </button>
              </div>
              
              <div className="px-6 py-4">
                <form onSubmit={(e) => { 
                  e.preventDefault(); 
                  editingCategory ? updateCategory() : addCategory();
                }}>
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Category Name</label>
                    <input 
                      type="text" 
                      name="name"
                      value={categoryFormData.name}
                      onChange={handleCategoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                      placeholder="Enter category name"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Description</label>
                    <textarea 
                      name="description"
                      value={categoryFormData.description}
                      onChange={handleCategoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      rows={3}
                      placeholder="Category description (optional)"
                    ></textarea>
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Category Type</label>
                    <select
                      name="type"
                      title="Category Type"
                      value={categoryFormData.type}
                      onChange={handleCategoryFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                    >
                      <option value="both">Both Inventory & Transactions</option>
                      <option value="inventory">Inventory Only</option>
                      <option value="transaction">Transactions Only</option>
                    </select>
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Color</label>
                    <div className="grid grid-cols-5 gap-2">
                      {categoryColors.map(color => (
                        <div 
                          key={color} 
                          className={`w-full aspect-square rounded-md cursor-pointer border-2 ${categoryFormData.color === color ? `border-${currentTheme.text}` : 'border-transparent'}`}
                          onClick={() => setCategoryFormData({...categoryFormData, color})}
                        >
                          <div className={`w-full h-full rounded bg-${color} hover:opacity-80 transition-opacity`}></div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    <button 
                      type="button"
                      onClick={() => {
                        setShowCategoryModal(false);
                        setEditingCategory(null);
                      }}
                      className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                    >
                      Cancel
                    </button>
                    <button 
                      type="submit"
                      className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaPlus className="mr-2 h-4 w-4" /> 
                      {editingCategory ? 'Update Category' : 'Save Category'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Customer Modal */}
      <AnimatePresence>
        {showCustomerModal && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50"
          >
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} p-0 rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border}`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <FaUser className={`mr-2 text-${currentTheme.accent}`} />
                  {editingCustomer ? 'Edit Customer' : 'Add Customer'}
                </h3>
                <button 
                  onClick={() => {
                    setShowCustomerModal(false);
                    setEditingCustomer(null);
                  }}
                  className={`text-gray-400 hover:text-${currentTheme.text} transition-colors duration-200 p-1 rounded-full hover:bg-${currentTheme.background}`}
                >
                  <FaTimes />
                </button>
              </div>
              
              <div className="px-6 py-4">
                <form onSubmit={(e) => { 
                  e.preventDefault(); 
                  editingCustomer ? updateCustomer() : addCustomer();
                }}>
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Full Name *</label>
                    <input 
                      type="text" 
                      name="name"
                      value={customerFormData.name}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      required
                      placeholder="Enter customer name"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Email Address</label>
                    <input 
                      type="email" 
                      name="email"
                      value={customerFormData.email}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="email@example.com"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Phone Number</label>
                    <input 
                      type="tel" 
                      name="phone"
                      value={customerFormData.phone}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="+1 (555) 123-4567"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Address</label>
                    <input 
                      type="text" 
                      name="address"
                      value={customerFormData.address}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      placeholder="123 Main St, City, Country"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className={`block text-sm font-medium text-${currentTheme.text} mb-1`}>Notes</label>
                    <textarea 
                      name="notes"
                      value={customerFormData.notes}
                      onChange={handleCustomerFormChange}
                      className={`w-full p-3 bg-${currentTheme.background} border border-${currentTheme.border} text-${currentTheme.text} rounded-lg focus:ring-2 focus:ring-${currentTheme.primary} focus:border-${currentTheme.primary} transition-all duration-200 text-sm`}
                      rows={3}
                      placeholder="Additional notes about this customer"
                    ></textarea>
                  </div>
                  
                  <div className={`flex justify-end space-x-3 mt-8 pt-4 border-t border-${currentTheme.border}`}>
                    <button 
                      type="button"
                      onClick={() => {
                        setShowCustomerModal(false);
                        setEditingCustomer(null);
                      }}
                      className={`px-4 py-2.5 bg-${currentTheme.background} hover:bg-${currentTheme.background}/80 text-${currentTheme.text} rounded-lg shadow-sm font-medium transition-all duration-200 border border-${currentTheme.border} text-sm`}
                    >
                      Cancel
                    </button>
                    <button 
                      type="submit"
                      className={`px-5 py-2.5 bg-${currentTheme.primary} hover:bg-${currentTheme.primary}/80 text-${currentTheme.buttonText} rounded-lg shadow-sm font-medium transition-all duration-200 flex items-center text-sm`}
                    >
                      <FaPlus className="mr-2 h-4 w-4" /> 
                      {editingCustomer ? 'Update Customer' : 'Save Customer'}
                    </button>
                  </div>
                </form>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Add this animation for saved notification */}
      <AnimatePresence>
        {isSaving && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className={`fixed bottom-4 right-4 bg-${currentTheme.success} text-${currentTheme.buttonText} px-4 py-2 rounded-lg shadow-lg flex items-center`}
          >
            <FaSave className="mr-2 animate-pulse" />
            Data saved successfully
          </motion.div>
        )}
      </AnimatePresence>

      {/* Animate theme switch */}
      <AnimatePresence>
        {showThemeSelector && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: -10 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: -10 }}
            transition={{ duration: 0.2 }}
            className={`absolute right-0 mt-2 w-48 bg-${currentTheme.cardBackground} rounded-md shadow-lg z-10 py-1 border border-${currentTheme.border} overflow-hidden`}
          >
            {themes.map((theme) => (
              <button
                key={theme.id}
                className={`flex items-center justify-between w-full text-left px-4 py-3 text-sm hover:bg-${theme.background} transition-colors duration-150 ${
                  theme.id === currentTheme.id ? `bg-${theme.background} text-${theme.accent}` : `text-${theme.text}`
                }`}
                onClick={() => {
                  setCurrentTheme(theme);
                  setShowThemeSelector(false);
                  // Trigger save to persist theme choice
                  setTimeout(() => saveToLocalStorage(), 100);
                }}
              >
                <span>{theme.name}</span>
                <span className={`h-4 w-4 rounded-full bg-${theme.primary}`}></span>
              </button>
            ))}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Receipt Preview Modal */}
      <AnimatePresence>
        {showReceiptPreview && viewingReceipt && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className={`bg-${currentTheme.cardBackground} rounded-xl shadow-2xl w-full max-w-md border border-${currentTheme.border} overflow-hidden`}
              onClick={(e) => e.stopPropagation()}
            >
              <div className={`flex justify-between items-center px-6 py-4 bg-${currentTheme.background} border-b border-${currentTheme.border}`}>
                <h3 className={`text-xl font-bold text-${currentTheme.text} flex items-center`}>
                  <FaBook className={`mr-2 text-${currentTheme.accent}`} />
                  {viewingReceipt.type === "expense" ? "Expense Receipt" : "Receipt"}
                </h3>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={generateReceiptImage}
                    disabled={isLoading}
                    className={`p-2 rounded-full bg-${currentTheme.primary}/20 text-${currentTheme.primary} hover:bg-${currentTheme.primary}/30 transition-colors duration-200`}
                    title="Download receipt"
                  >
                    {isLoading ? <FaSync className="animate-spin" /> : <FaDownload />}
                  </button>
                  <button
                    onClick={() => setShowReceiptPreview(false)}
                    className={`p-2 rounded-full bg-${currentTheme.background}/50 text-gray-400 hover:bg-${currentTheme.background} transition-colors duration-200`}
                    title="Close"
                  >
                    <FaTimes />
                  </button>
                </div>
              </div>

              <div className="px-6 py-5 overflow-y-auto max-h-[70vh]">
                {/* Receipt card design - this will be captured to image */}
                <div
                  ref={cardRef}
                  className={`bg-white text-gray-800 p-6 rounded-lg shadow-md ${viewingReceipt.type === "expense" ? "border-l-4 border-rose-500" : "border-l-4 border-emerald-500"}`}
                  style={{ fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif" }}
                >
                  {/* Business section at the top */}
                  <div className="text-center border-b border-gray-200 pb-4 mb-4">
                    <h2 className="text-xl font-bold text-gray-800" style={{ fontFamily: "Arial, sans-serif" }}>BookKeep Pro</h2>
                    <p className="text-sm text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>
                      {viewingReceipt.type === "expense" ? "Expense Receipt" : "Official Receipt"}
                    </p>
                  </div>
                  
                  {/* Receipt metadata */}
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-xs text-gray-500" style={{ fontFamily: "Arial, sans-serif" }}>Receipt No.</p>
                      <p className="text-sm font-medium" style={{ fontFamily: "Arial, sans-serif" }}>
                        {viewingReceipt.id.slice(-8).toUpperCase()}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className="text-xs text-gray-500" style={{ fontFamily: "Arial, sans-serif" }}>Date</p>
                      <p className="text-sm font-medium" style={{ fontFamily: "Arial, sans-serif" }}>
                        {viewingReceipt.date.toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  
                  {/* Transaction type badge */}
                  <div className="mb-4">
                    <span 
                      className={`inline-block rounded-full px-3 py-1 text-xs font-medium ${
                        viewingReceipt.type === "income" 
                          ? "bg-emerald-100 text-emerald-700" 
                          : "bg-rose-100 text-rose-700"
                      }`}
                      style={{ fontFamily: "Arial, sans-serif" }}
                    >
                      {viewingReceipt.type === "income" ? "INCOME" : "EXPENSE"}
                    </span>
                  </div>

                  {/* Customer/Vendor details */}
                  <div className="border border-gray-200 rounded-md p-3 mb-4 bg-gray-50">
                    <h3 className="font-medium text-sm text-gray-800 mb-1" style={{ fontFamily: "Arial, sans-serif" }}>
                      {viewingReceipt.type === "income" ? "Customer Details" : "Vendor/Payee Details"}
                    </h3>
                    <p className="text-sm" style={{ fontFamily: "Arial, sans-serif" }}>{viewingReceipt.customerName}</p>
                    <p className="text-xs text-gray-500 mt-1" style={{ fontFamily: "Arial, sans-serif" }}>ID: {viewingReceipt.customerId}</p>
                    
                    {/* Show customer details if available */}
                    {(() => {
                      const customer = customers.find(c => c.id === viewingReceipt.customerId);
                      if (customer) {
                        return (
                          <div className="mt-1">
                            {customer.phone && <p className="text-xs text-gray-500" style={{ fontFamily: "Arial, sans-serif" }}>{customer.phone}</p>}
                            {customer.email && <p className="text-xs text-gray-500" style={{ fontFamily: "Arial, sans-serif" }}>{customer.email}</p>}
                          </div>
                        );
                      }
                      return null;
                    })()}
                  </div>
                  
                  {/* Description for both types */}
                  <div className="mb-4">
                    <h3 className="font-medium text-sm text-gray-800 mb-1" style={{ fontFamily: "Arial, sans-serif" }}>Description</h3>
                    <p className="text-sm text-gray-700 bg-gray-50 p-2 border border-gray-200 rounded" style={{ fontFamily: "Arial, sans-serif" }}>
                      {viewingReceipt.description || "No description provided"}
                    </p>
                  </div>
                  
                  {/* Items purchased - only show for receipts with items */}
                  {viewingReceipt.items.length > 0 ? (
                    <div className="mb-4">
                      <h3 className="font-medium text-sm text-gray-800 mb-2" style={{ fontFamily: "Arial, sans-serif" }}>Items</h3>
                      <div className="border-t border-b border-gray-200 py-2">
                        {viewingReceipt.items.map((item, index) => (
                          <div 
                            key={index} 
                            className="flex justify-between py-2 border-b border-gray-100 last:border-0"
                          >
                            <div className="flex-1">
                              <p className="text-sm font-medium" style={{ fontFamily: "Arial, sans-serif" }}>{item.name}</p>
                              <p className="text-xs text-gray-500" style={{ fontFamily: "Arial, sans-serif" }}>
                                {item.quantity} x {selectedCurrency.symbol}{item.price.toFixed(2)}
                              </p>
                            </div>
                            <div className="text-right">
                              <p className="text-sm font-medium" style={{ fontFamily: "Arial, sans-serif" }}>
                                {selectedCurrency.symbol}{(item.quantity * item.price).toFixed(2)}
                              </p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  ) : null}
                  
                  {/* Total section */}
                  <div className="border-t border-gray-200 pt-3">
                    <div className="flex justify-between items-center mb-1">
                      <p className="text-sm text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>Subtotal</p>
                      <p className="text-sm" style={{ fontFamily: "Arial, sans-serif" }}>{formatCurrency(viewingReceipt.totalAmount)}</p>
                    </div>
                    <div className="flex justify-between items-center mb-1">
                      <p className="text-sm text-gray-600" style={{ fontFamily: "Arial, sans-serif" }}>Tax</p>
                      <p className="text-sm" style={{ fontFamily: "Arial, sans-serif" }}>{formatCurrency(0)}</p>
                    </div>
                    <div className="flex justify-between items-center font-bold border-t border-gray-200 mt-2 pt-2">
                      <p style={{ fontFamily: "Arial, sans-serif" }}>Total</p>
                      <p className={viewingReceipt.type === "expense" ? "text-rose-600" : "text-emerald-600"} 
                         style={{ fontFamily: "Arial, sans-serif" }}>
                        {formatCurrency(viewingReceipt.totalAmount)}
                      </p>
                    </div>
                  </div>
                  
                  {/* Footer */}
                  <div className="text-center mt-6 pt-4 border-t border-gray-200">
                    <p className="text-xs text-gray-500" style={{ fontFamily: "Arial, sans-serif" }}>
                      {viewingReceipt.type === "income" 
                        ? "Thank you for your business!" 
                        : "This expense has been recorded in our system."}
                    </p>
                    <p className="text-xs text-gray-400 mt-1" style={{ fontFamily: "Arial, sans-serif" }}>
                      Generated on {new Date().toLocaleString()}
                    </p>
                  </div>
                </div>

                {/* Download button below the receipt */}
                <div className="flex justify-center mt-6">
                  <button
                    onClick={generateReceiptImage}
                    disabled={isLoading}
                    className={`flex items-center px-4 py-2 bg-${currentTheme.primary} text-white rounded-md hover:bg-${currentTheme.primary}/80 transition-colors duration-200`}
                  >
                    {isLoading ? (
                      <>
                        <FaSync className="animate-spin mr-2" /> Generating...
                      </>
                    ) : (
                      <>
                        <FaDownload className="mr-2" /> Download Receipt
                      </>
                    )}
                  </button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}